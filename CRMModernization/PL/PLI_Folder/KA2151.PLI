         
 /********************************************************************/        
 /*                                                                  */        
 /* KA2151                                                           */        
 /*                                                                  */        
 /*   OBJET : SERVICE ACCES DB EUROTAX (DA215 , DA216)               */        
 /*   ================================================               */        
 /*         V O I T U R E S     P A R T I C U L I E R S              */        
 /*                  U T I L I T A I R E S                           */        
 /*                      M O T O S                                   */        
 /*                                                                  */        
 /********************************************************************/        
 /*                                                                  */        
 /* AUTHOR      = TDMKIP                                             */        
 /* TEAM LEADER = TDMBRY                                             */        
 /*                                                                  */        
 /********************************************************************/        
 /* INFORMATIONS :                                                   */        
 /* ------------                                                     */        
 /*                                                                  */        
 /* LISTE DES DATA BASES DLI UTILISEES :                             */        
 /*    - POINTEUR SUR  DEU02 ==> DB DICTIONNAIRE                     */        
 /*    - POINTEUR SUR  DA215 ==> DB EUROTAX (VP , UT , MO)           */        
 /*    - POINTEUR SUR  DA215 ==> idem avec Procopt = GO              */        
 /*    - POINTEUR SUR  DA2152==> DB Index 2 pour EXPLO MAK,MOD,TYP   */        
 /*    - POINTEUR SUR  DA216 ==> DB EUROTAX INDEX                    */        
 /********************************************************************/        
 /*                                                                  */        
 /* DERNIER MESSAGE D'ERREUR (JWB001.CDRTPGM = $LTNMPRJ !! '015')    */        
 /*                                                                  */        
 /********************************************************************/        
 /*  NOTES :                                                         */        
 /*  -----                                                           */        
 /*                                                                  */        
 /*                                                                  */        
 /********************************************************************/        
 /*  -------------------------------                                 */        
 /*  -  M O D I F I C A T I O N S  -                                 */        
 /*------------------------------------------------------------------*/        
 /* TDMKIP ! 23/02/05 ! #000 : CREATION DU PROGRAMME                 */        
 /* TDMKIP ! 30/06/05 ! #001 : EXPLO MAK,MOD,TYP Via Index 2 et 3    */        
 /* TDMVDB ! 01/09/05 ! #003 : creation VP_TMC UT_TMC                */        
 /* TDMBEA ! 10/11/05 ! #004 : CONVERTIR LES LIBELLES MARQUE EN MAJ. */        
 /* TDMKIP ! 14/06/07 ! #005 : EVITER EQUIPEMENT 'GARANTIES' EN EXPLO*/        
 /* TDMSOX ! 19/12/07 ! #006 : GEstion TCO2EMI                       */        
 /* TDMGAS ! 01/06/10 ! #007 : GEstion CDTYOP3 CDTYDM3               */        
 /********************************************************************/        
         
 (STRINGRANGE,SUBSCRIPTRANGE):        
 KA2151 : PROC OPTIONS(MAIN)(IEU001, JWB001, KA2151J) REORDER;        
         
 /********************************************************************/        
 /*  DECLARATION DES PARAMETRES PASSES AU SERVICE                    */        
 /********************************************************************/        
 /*********************************************************************/        
 /*                                                                   */        
 /*         INTERFACE DE COMMUNICATION AVEC BEU001                    */        
 /*         ======================================                    */        
 /*                                                                   */        
 /* USAGE :                                                           */        
 /* CALL BEU001(IEU001,COUNT,FUNCT,DATAPCB,IOAREA,                    */        
 /*             SSA1, SSA2, SSA3, SSA4, SSA5, SSA6, SSA7);            */        
 /*********************************************************************/        
 /* MODE CONVERSION :                                                 */        
 /*                                                                   */        
 /* CALL BEU001(IEU001,THREE,'GCV',DATAPCB,IOAREA);                   */        
 /*                                                                   */        
 /*********************************************************************/        
 /*                                                                   */        
 /* PROCEDURE DE COMPILATION : TDMFOG.LIB.CNTL(FETCH)                 */        
 /* MODULE A TRANSFERER PAR L'EQUIPE SYSTEME : FEUT.T.LOAD(BEU001)    */        
 /*                                                                   */        
 /*********************************************************************/        
 /* DESCRIPTION DES MESSAGES D'ERREURS : CDRTPGM                      */        
 /* -----------------------------------                               */        
 /* DB : PROBLEME BASE DE DONNEES : VOIR LE PCB DATA                  */        
 /* 01 : COEFFICIENT DE CONVERSION EURO --> FB ERRONE                 */        
 /* 02 : PARAM. CODE DEVISE DIFFERENT DE 'F' ET 'E'                   */        
 /* 03 : PARAM. CODE PAGE DIFFERENT DE '500' ET '274'                 */        
 /* 04 : PARAM. CODE USAGE APPLICATION DIFF. DE : 3 = 3270            */        
 /*                                        P = HOST PRINTER           */        
 /*                                        L = LOCAL PRINTER          */        
 /*                                        Q = MQSERIES               */        
 /* 05 : CODE DEVISE MAL INSTALLE DANS LE DICTIONNAIRE                */        
 /* 06 : CODE PAGE MAL INSTALLE DANS LE DICTIONNAIRE                  */        
 /* 07 : CODE VERSION DE LA DB MAL INSTALLE DANS LE DICTIONNAIRE      */        
 /* 08 : DESCRIPTION FORME EXTERNE DU SEGMENT ABSENTE DU DICTIONNAIRE */        
 /* 09 : ERREUR BASE DE DONNEE SUR LA DB DICTIONNAIE                  */        
 /* 10 : LONGUEUR D'ATTRIBUT MODIFIEE POUR FORMAT TYPE : BF/BE/DE     */        
 /* 11 : LE FORMAT DE MONTANT DEVISE OU DATE  <> DZ/DF/BF             */        
 /* 12 : EN ISRT, REPL, LA DATE DOIT OBLIG. ETRE EXPRIMEE EN SAAMMJJ  */        
 /* 13 : FORMAT DE DONNEE NON RECONNU                                 */        
 /* 14 : LONGUEUR EN BYTE INADEQUATE POUR UN TYPE BF                  */        
 /* 15 : LONGUEUR TYPE BF <> 2/4                                      */        
 /* 16 : LONGUEUR TYPE DE/BE <> 4/8                                   */        
 /* 17 : EN ISRT, REPL, LA D. COMPLEM. DOIT ETRE EXPRIMEE EN SAAMMJJ  */        
 /* 18 : MONTANT AU FORMAT ZONED DECIMAL NON NUMERIQUE EN LECTURE     */        
 /* 19 : MONTANT AU FORMAT PACKED DECIMAL NON NUMERIQUE EN LECTURE    */        
 /* 20 : MONTANT AU FORMAT ZONED DECIMAL NON NUMERIQUE EN M A J       */        
 /* 21 : MONTANT AU FORMAT PACKED DECIMAL NON NUMERIQUE EN M A J      */        
 /* 22 : COUNT < 2 OU > 10                                            */        
 /* 23 : FONCTION NON IMPLEMENTEE CAR NON SPECIFIQUE A DL1            */        
 /* 24 : FONCTION INCONNUE                                            */        
 /* 25 : NOMBRE D'ATTRIBUTS DU SEGMENT DEPASSANT LE MAXIMUM AUTORISE  */        
 /* 26 : LONGUEUR DE RUBRIQUE MAL DEFINIE AU DICTIONNAIRE             */        
 /* 27 : COUNT PARAMETER > 7                                          */        
 /* 28 : PROTOCOLE EURO POSTPOSE JUSQU'A LA CONVERSION DE LA CAISSE   */        
 /* 29 : PARAMETRE SOCIETE NON RECONNU                                */        
 /* 30 : PROTOCOLE EURO INTERDIT CAR DB NON CONVERTIE A L'EURO        */        
 /*                                                                   */        
 /*********************************************************************/        
         
 DCL 1     IEU001,        
 /*------------------------- I N P U T -------------------------------*/        
      2    PTR,                        #################################################################        
       3   METAPCB      PTR,           ####################################################        
       3   ALTPCB       PTR,           ####################################################        
      2    INPUT,                      ###############################################################        
       3   LTSCTRN      CHAR (4),      ###############################################        
       3   CDDVTRN      CHAR (3),      ###############################################        
       3   CDPGTRN      CHAR (3),      ###############################################        
       3   CDTYUSR      CHAR (1),      ###############################################        
       3   CDPGMID      CHAR (8),      ###############################################        
       3   CDDFSEG      CHAR (8),      ###############################################        
       3   LASTCALL     CHAR (30),     ##############################################        
       3   TBEGCOD(32)  BIT(1),        #################################################        
                                       /*--!  BIT 1: MAJ EURO         */        
                                       /*--!    AUTORISEE AVANT PIVOT */        
                                       /*--!  BIT 2: NE PAS CONVERTIR */        
                                       /*--!  BIT 3: MAJ BEF          */        
                                       /*--!    AUTORISEE APRES PIVOT */        
       3   TBDISPO(128),        
        4  DBDNAME      CHAR(8),       ################################################        
        4  DBSTATE      CHAR(1),       ################################################        
                                       /*--! 0 : UPDATABLE            */        
                                       /*--! 1 : READ ONLY (NU)       */        
                                       /*--! 2 : NO ACCESS (NA)       */        
       3   FILLER       CHAR(200),     ##############################################        
         
 /*------------------------ O U T P U T ------------------------------*/        
      2    OUTPUT,                     ##############################################################        
       3   CDRTPGM      CHAR (6),      ###############################################        
       3   LTRTPGM      CHAR (60),     ##############################################        
       3   DBPTR        PTR,           ####################################################        
       3   LASTDLI      CHAR (10);     ##############################################        
         
 /*------------------- REDEFINITIONS DE IEU001 -----------------------*/        
 DCL 1     IEU001_R     BASED(ADDR(IEU001.INPUT.FILLER)),        
       2   CDEVTRN      CHAR(001),     ##############################################        
                                       /*--!  P : VALEUR PAR DEFAUT   */        
       2   CDDEVDB      CHAR(003),     ##############################################        
                                       /*--!  BEF / EUR               */        
       2   TBDFDBD_PTR  PTR,        
       2   TBDFATT_PTR  PTR,        
       2   TBDFSEG_PTR  PTR,        
       2   SYSTIME      BIN FIXED(31),        
       2   DATEORD      PIC '(7)9',        
       2   NBMXCOP_C    FIXED BIN(15),        
       2   FILLER       CHAR(170);     ##############################################        
 /*********************************************************************/        
 /*******************************************************************/        
 /* INTERFACE GENERAL POUR TOUS LES SERVICES                        */        
 /*******************************************************************/        
         
 DCL 1  JWB001,        
      2   CDEVCLI    CHAR(01),      ########################################        
      2   RETOUR     BIT (1),       #########################################        
      2   LEVEL      PIC '9',       #########################################        
      2   ATTRIB     CHAR(02),      ########################################        
      2   LTNMSER    CHAR(08),      ########################################        
      2   ENTREE,        
       3  DBSCRAT,        
        4 METAPCB    PTR,           ##############################################        
        4 DBSCRPCB   PTR,           ##############################################        
        4 LTSGSCR    CHAR(08),      #########################################        
       3  DBTABLE,        
        4 METAPCB    PTR,           ##############################################        
        4 DBTABPCB   PTR,           ##############################################        
        4 LTSGTAB    CHAR(08),      #########################################        
        4 CDDFTAB    CHAR(08),      #########################################        
       3  DBCOMDE,        
        4 METAPCB    PTR,           ##############################################        
        4 DBCDEPCB   PTR,           ##############################################        
        4 LTSGCDE    CHAR(08),      #########################################        
        4 CDDFCDE    CHAR(08),      #########################################        
       3  CDTRACE    PIC '9',       ##########################################        
       3  TBTRACE_I  FIXED (5),     ########################################        
       3  BOTBDB2    BIT (1),       ##########################################        
       3  LTNMBUS    CHAR(20),      #########################################        
       3  LTNMOBJ    CHAR(20),      #########################################        
       3  LTNMMTH    CHAR(20),      #########################################        
      2   SORTIE,        
       3  CDRTPGM    CHAR(09),      #########################################        
       3  CDRTDB2    BIN FIXED(31), ####################################        
       3  SQLERRM    CHAR (70) VAR, ####################################        
       3  CDROLLB    BIT(1),        ###########################################        
       3  LSTCALL    CHAR(12),      #########################################        
       3  LSTSERV    CHAR(12),      #########################################        
       3  TBTRACE (100),            ###############################################        
        4 FLAG_TRACE CHAR(01),        
        4 MSGE_TRACE CHAR(40),        
      2   GXXXXXJ_P  PTR;           ##############################################        
         
 /* EXPLICATIONS:                                                    */        
 /*                                                                  */        
 /* APPEL DU BUS 'LTNMBUS' POUR EXECUTION DE LA FONCTION 'LTNMFCT'   */        
 /* DE L'OBJET 'LTNMOBJ'                                             */        
 /*                                                                  */        
 /* LES TRACES SONT AFFICHEES EN FCT DE CDTRACE (0->9)               */        
 /* ->  0 PAS DE TRACE, 9 TRACE COMPLETES                            */        
         
         
 /*********************************************************************/        
 /* INTERFACE : KA2151J                                               */        
 /*                                                                   */        
 /*                 SERVICE D'ACCES DB EUROTAX                        */        
 /*                                                                   */        
 /*         V O I T U R E S     P A R T I C U L I E R S               */        
 /*                  U T I L I T A I R E S                            */        
 /*                      M O T O S                                    */        
 /*         *******************************************               */        
 /*               DB    DA215 , DA216                                 */        
 /*                                                                   */        
 /*********************************************************************/        
                                 /* LIMITE EXPLO MARQUES              */        
                                 /* LIMITE EXPLO MODELES              */        
                                 /* LIMITE EXPLO TYPES                */        
                                 /* LIMITE EXPLO EQUIPEMENTS          */        
                                 /* LIMITE EXPLO CONTENU D'UN PACK    */        
         
 DCL 1 KA2151J,        
      2 PTRPCB       CHAR (256),    ################################################        
      2 INPUT        CHAR (2000),   ###############################################        
      2 OUTPUT       CHAR (20000);  ##############################################        
         
 /*********************************************************************/        
 /*             REDEFINITION DES POINTEURS                            */        
 /*  REMARQUES : PTR = CHAR (04)                                      */        
 /*********************************************************************/        
         
 DCL 1 KA2151J_P      BASED(ADDR(KA2151J.PTRPCB)),        
      2 DEU02PCB      PTR,               ######################################################        
      2 DA215PCB      PTR,               ######################################################        
      2 DA215$PCB     PTR,               ######################################################        
      2 DA2152PCB     PTR,               ######################################################        
      2 DA216PCB      PTR;               ######################################################        
         
 /*********************************************************************/        
 /*                S E G M E N T S     I N D I V I D U E L S          */        
 /*                =========================================          */        
 /* METHODE : CONSULT_YY_XXX                                          */        
 /* METHODE : SUPPR_YY_XXX                                            */        
 /* METHODE : CREAT_YY_XXX                                            */        
 /* METHODE : MODIF_YY_XXX                                            */        
 /*                                                                   */        
 /*     YY = VP(VOITURES) , UT(UTILITAIRES), MO(MOTOS)                */        
 /*    XXX = MAK , Marque ..................A2EUTnn (T11,T21,T41)     */        
 /*          MOD : Modele ..................A2EUTnn (T12,T22,T42)     */        
 /*          TYP : Type de vehicule.........A2EUTnn (T13,T23,T43)     */        
 /*          PRI : Prix d'un type de vehic..A2EUTnn (T14,T24,T44)     */        
 /*          EQT : Equipements pour un type.A2EUTnn (T15,T25,T45)     */        
 /*          CON : Contenu d'un pack .......A2EUTnn (T16,T26,T46)     */        
 /*          TXT : Libelle d'un equipement..A2EUTnn (T17,T27,T47)     */        
 /*          COT : Cotation d'un type.......A2EUTnn (T18,T28,T48)     */        
 /*                                                                   */        
 /* INPUT : LE SEGMENT A2EUTnn                                        */        
 /* OUTPUT: LE SEGMENT A2EUTnn                                        */        
 /*                                                                   */        
 /* Exemple dans le programme appelant pour 'CONSULT_VP_MAK'          */        
 /* -------                                                           */        
 /* DCL A2EUT11_R         CHAR(STG(A2EUT11)) BASED(ADDR(A2EUT11));    */        
 /*         A2EUT11.CDTYPTB = '11';                                   */        
 /*         A2EUT11.NOIDMAR = numero de marque                        */        
 /*     KA2151J_A2EUTAX_I = A2EUT11_R;                                */        
 /* En output :                                                       */        
 /*     A2EUT11_R = KA2151J_A2EUTAX_O;                                */        
 /*                                                                   */        
 /* -------------------- INPUT -------------------------------------- */        
 DCL 1 KA2151J_A2EUTAX_I  CHAR(300)    BASED(ADDR(KA2151J.INPUT));        
         
 /* -------------------- OUTPUT ------------------------------------- */        
 DCL 1 KA2151J_A2EUTAX_O  CHAR(300)    BASED(ADDR(KA2151J.OUTPUT));        
         
 /*********************************************************************/        
 /*                     E X P L O R A T I O N S                       */        
 /*                     =======================                       */        
 /* METHODE : EXPLO_1P_YY_XXX                                         */        
 /* METHODE : EXPLO_PS_YY_XXX                                         */        
 /* METHODE : EXPLO_PP_YY_XXX                                         */        
 /*                                                                   */        
 /*     YY = VP(VOITURES) , UT(UTILITAIRES), MO(MOTOS)                */        
 /*    XXX = MAK : Toutes les marques d'une categorie (VP,UT ou MO)   */        
 /*          MOD : tous les modeles pour une marque                   */        
 /*          TYP : tous les type pour un modele et une marque         */        
 /*          EQT : tous les equipements d'un Type                     */        
 /*          CON : tous les equipements contenu dans un pack          */        
 /*                                                                   */        
 /* INPUT :                                                           */        
 /* O indique que la donnee est obligatoire                           */        
 /* F indique que la donnee est facultative uniqt pour EXPLO_1P_YY_XXX*/        
 /*   sinon la donnee est Obligatoire pour suivant/precedent          */        
 /*                                                                   */        
 /* !!ANNECTR : Zero => pas de test sur date debut et fin d'importat. */        
 /*                     Donc on prend tout                            */        
 /* REMARQUE EXPLO MAK,MOD,TYP :                                      */        
 /* ==========================                                        */        
 /* Ces explo se font sur l'index secondaire trie par libelle.        */        
 /* Pour les explo suivant/precedent il faut en plus du NOIDMAR       */        
 /* renvoyer le LTMARQU pour se repositionner le o on etait arrive   */        
 /* (Idem pour Explo MOD et TYP)                                      */        
 /*                                                                   */        
 /*********************************************************************/        
         
 /* -------------------- INPUT ---------------------------------------*/        
         
 DCL 1 KA2151J_EXPMAK_I                   BASED(ADDR(KA2151J.INPUT)),        
      2 CDTYPTB        CHAR(02),     ################################################        
      2 NBITEXP        BIN FIXED(15),###########################################        
      2 NOIDMAR        DEC FIXED(07),###########################################        
      2 LTMARQU        CHAR(40),     ################################################        
      2 ANNECTR        PIC '(4)9',   ##############################################        
      2 CDTTERR        CHAR(01),     ################################################        
      2 CDSPORT        CHAR(01),     ################################################        
      2 CDSPOSE        CHAR(02),     ################################################        
      2 TXTCLAS        CHAR(08),     ################################################        
      2 TXTCATV        CHAR(08),     ################################################        
      2 TXTCARO        CHAR(08),     ################################################        
      2 TXTCARB        CHAR(08),     ################################################        
      2 LIBMARQ        CHAR(40),     ################################################        
                                     /* Le ? est obligatoire pour     */        
                                     /* delimiter les champs e tester */        
                                     /* (A?RO? etc..)                 */        
      2 NOUVEAU        CHAR(01);     ################################################        
                                     /*   nouveaux vehicules          */        
         
 DCL 1 KA2151J_EXPMOD_I                   BASED(ADDR(KA2151J.INPUT)),        
      2 CDTYPTB        CHAR(02),     ################################################        
      2 NBITEXP        BIN FIXED(15),###########################################        
      2 NOIDMAR        DEC FIXED(07),###########################################        
      2 NOIDMOD        DEC FIXED(07),###########################################        
      2 LTMODEL        CHAR(40),     ################################################        
      2 ANNECTR        PIC '(4)9',   ##############################################        
      2 CDTTERR        CHAR(01),     ################################################        
      2 CDSPORT        CHAR(01),     ################################################        
      2 CDSPOSE        CHAR(02),     ################################################        
      2 TXTCLAS        CHAR(08),     ################################################        
      2 TXTCATV        CHAR(08),     ################################################        
      2 TXTCARO        CHAR(08),     ################################################        
      2 TXTCARB        CHAR(08),     ################################################        
      2 NOUVEAU        CHAR(01);     ################################################        
                                     /*   nouveaux vehicules          */        
         
 DCL 1 KA2151J_EXPTYP_I                   BASED(ADDR(KA2151J.INPUT)),        
      2 CDTYPTB        CHAR(02),     ################################################        
      2 NBITEXP        BIN FIXED(15),###########################################        
      2 NOIDMAR        DEC FIXED(07),###########################################        
      2 NOIDMOD        DEC FIXED(07),###########################################        
      2 NOIDTYP        DEC FIXED(07),###########################################        
      2 LTTYPEV        CHAR(60),     ################################################        
      2 ANNECTR        PIC '(4)9',   ##############################################        
      2 CDTTERR        CHAR(01),     ################################################        
      2 CDSPORT        CHAR(01),     ################################################        
      2 CDSPOSE        CHAR(02),     ################################################        
      2 TXTCLAS        CHAR(08),     ################################################        
      2 TXTCATV        CHAR(08),     ################################################        
      2 TXTCARO        CHAR(08),     ################################################        
      2 TXTCARB        CHAR(08),     ################################################        
      2 NOUVEAU        CHAR(01);     ################################################        
                                     /*   nouveaux vehicules          */        
         
 DCL 1 KA2151J_EXPEQT_I                   BASED(ADDR(KA2151J.INPUT)),        
      2 CDTYPTB        CHAR(02),     ################################################        
      2 NBITEXP        BIN FIXED(15),###########################################        
      2 NOIDTYP        DEC FIXED(07),###########################################        
      2 NOIDADD        DEC FIXED(11),###########################################        
      2 ANNECTR        PIC '(4)9',   ##############################################        
      2 CDTYPEQ        CHAR(03),     ################################################        
                                     /*                     O=Options */        
                                     /*                     P=Packs   */        
                                     /*                 blanc = tout  */        
                                     /*   Ex: "SO "=Serie + Options   */        
      2 CDMULTI        CHAR(01),     ################################################        
                                     /*         les doubles           */        
      2 DAFINIM        PIC'(6)9',    ###############################################        
                                     /*   (AAAAMM : obligatoire si    */        
                                     /*    CDMULTI#'Y')               */        
      2 CDGARAN        CHAR(01);     ################################################        
                                     /*         les garanties         */        
         
 DCL 1 KA2151J_EXPCON_I                   BASED(ADDR(KA2151J.INPUT)),        
      2 CDTYPTB        CHAR(02),     ################################################        
      2 NBITEXP        BIN FIXED(15),###########################################        
      2 NOIDTYP        DEC FIXED(07),###########################################        
      2 NOIDPAC        DEC FIXED(07),###########################################        
      2 NOIDEQT        DEC FIXED(07),###########################################        
      2 DATEDEB        DEC FIXED(07),###########################################        
      2 ANNECTR        PIC '(4)9',   ##############################################        
      2 CDMULTI        CHAR(01),     ################################################        
                                     /*         les doubles           */        
      2 DAFINIM        PIC'(6)9';    ###############################################        
                                     /*   (AAAAMM : obligatoire si    */        
                                     /*    CDMULTI#'Y')               */        
         
 /* -------------------- OUTPUT ------------------------------------- */        
         
 DCL 1 KA2151J_EXPMAK_O                   BASED(ADDR(KA2151J.OUTPUT)),        
      2 NBELMTB        BIN FIXED(15),    ###########################################        
      2 TBIDELM (50),        
       3 NOIDMAR            FIXED(07),   ##########################################        
       3 LTMARQU            CHAR(40),    ###########################################        
       3 CDTTERR            CHAR(01);    ###########################################        
         
 DCL 1 KA2151J_EXPMOD_O                   BASED(ADDR(KA2151J.OUTPUT)),        
      2 NBELMTB        BIN FIXED(15),    ###########################################        
      2 TBIDELM (50),        
       3 NOIDMOD            FIXED(07),   ##########################################        
       3 LTMODEL            CHAR(40),    ###########################################        
       3 CDTTERR            CHAR(01);    ###########################################        
         
 DCL 1 KA2151J_EXPTYP_O                   BASED(ADDR(KA2151J.OUTPUT)),        
      2 NBELMTB        BIN FIXED(15),    ###########################################        
      2 TBIDELM (50),        
       3 NOIDTYP            FIXED(07),   ##########################################        
       3 LTTYPEV            CHAR(60),    ###########################################        
       3 CDTTERR            CHAR(01),    ###########################################        
       3 DADEBIM            PIC'(6)9',   ##########################################        
       3 DAFINIM            PIC'(6)9',   ##########################################        
       3 NBRPORT            FIXED(03),   ##########################################        
       3 NBTYPKW            FIXED(03),   ##########################################        
       3 NBVITES            FIXED(03),   ##########################################        
       3 TXTBOIT            CHAR(08),    ###########################################        
       3 TYPCYLI            FIXED(05),   ##########################################        
       3 NBCVDIN            FIXED(03),   ##########################################        
       3 TCO2EMI            FIXED(05),   ##########################################        
       3 CDECOV2            CHAR(01),    ###########################################        
       3 FILLER             CHAR(26);    ###########################################        
         
 DCL 1 KA2151J_EXPEQT_O                   BASED(ADDR(KA2151J.OUTPUT)),        
      2 NBELMTB        BIN FIXED(15),    ###########################################        
      2 TBIDELM (50),        
       3 NOIDADD            FIXED(11),   ##########################################        
       3 NOIDEQT            FIXED(07),   ##########################################        
       3 DATEDEB            FIXED(07),   ##########################################        
       3 DATEFIN            FIXED(07),   ##########################################        
       3 LTTXTEQ(2)         CHAR(80),    ###########################################        
       3 LTTXTST(2)         CHAR(40),    ###########################################        
       3 CDTYPEQ            CHAR(01),    ###########################################        
       3 PRIHTVA            FIXED(09),   ##########################################        
       3 PRITVAC            FIXED(09);   ##########################################        
         
 DCL 1 KA2151J_EXPCON_O                   BASED(ADDR(KA2151J.OUTPUT)),        
      2 NBELMTB        BIN FIXED(15),    ###########################################        
      2 TBIDELM (50),        
       3 NOIDPAC            FIXED(07),   ##########################################        
       3 NOIDEQT            FIXED(07),   ##########################################        
       3 LTTXTEQ(2)         CHAR(80),    ###########################################        
       3 LTTXTST(2)         CHAR(40),    ###########################################        
       3 DATEDEB            FIXED(07),   ##########################################        
       3 DATEFIN            FIXED(07),   ##########################################        
       3 PRIHTVA            FIXED(09),   ##########################################        
       3 PRITVAC            FIXED(09);   ##########################################        
         
 /*********************************************************************/        
 /*                P R I X   D ' U N   V E H I C U L E                */        
 /*                ===================================                */        
 /* METHODE : YY_PRIX                                                 */        
 /*                                                                   */        
 /*     YY = VP(VOITURES) , UT(UTILITAIRES), MO(MOTOS)                */        
 /*                                                                   */        
 /* !!ANNECTR : Zero => Renvoi le dernier prix connu pour le vehicule */        
 /*                                                                   */        
 /*********************************************************************/        
         
 /* -------------------- INPUT ---------------------------------------*/        
         
 DCL 1 KA2151J_PRIX_I                  BASED(ADDR(KA2151J.INPUT)),        
      2 CDTYPTB       CHAR(02),      #################################################        
      2 NOIDTYP       DEC FIXED(07), ############################################        
      2 ANNECTR       PIC'(4)9';     ################################################        
         
 /* -------------------- OUTPUT ------------------------------------- */        
 DCL 1 KA2151J_PRIX_O                  BASED(ADDR(KA2151J.OUTPUT)),        
      2 DATEDEB       DEC FIXED(07), ############################################        
      2 PRIHTVA       DEC FIXED(09), ############################################        
      2 PRITVAC       DEC FIXED(09), ############################################        
      2 TAUXTVA       DEC FIXED(5,2);###########################################        
         
         
 /*********************************************************************/        
 /*                C O T A T I O N S                                  */        
 /*                =================                                  */        
 /* METHODE : YY_COTATION                                             */        
 /*                                                                   */        
 /*     YY = VP(VOITURES) , UT(UTILITAIRES), MO(MOTOS)                */        
 /*********************************************************************/        
         
 /* -------------------- INPUT ---------------------------------------*/        
         
 DCL 1 KA2151J_COTAT_I                 BASED(ADDR(KA2151J.INPUT)),        
      2 CDTYPTB        CHAR(02),     ################################################        
      2 NOIDTYP        DEC FIXED(07),###########################################        
      2 ANNIMAT        PIC'(4)9',    ###############################################        
      2 MOIIMAT        PIC'99',      #################################################        
      2 KILOMRE        DEC FIXED(09);###########################################        
         
 /* -------------------- OUTPUT ------------------------------------- */        
 DCL 1 KA2151J_COTAT_O                 BASED(ADDR(KA2151J.OUTPUT)),        
      2 ANNEVAL        PIC'(4)9',    ###############################################        
      2 MOISVAL        PIC'99',      #################################################        
      2 KILOMTH        DEC FIXED(09),###########################################        
      2 COTAREV        DEC FIXED(09),###########################################        
      2 COTARAC        DEC FIXED(09);###########################################        
         
 /*********************************************************************/        
 /*      A C C E S    P A R    L E S    I N D E X   (DA216)           */        
 /*      ==================================================           */        
 /*                                                                   */        
 /* METHODE : MAR_MOD_YY_TYP  ...........(index '10','20','40')       */        
 /*   renvoi  Numero de Marque et de Modele d'un type donne           */        
 /*                                                                   */        
 /*     YY = VP(VOITURES) , UT(UTILITAIRES), MO(MOTOS)                */        
 /*                                                                   */        
 /*********************************************************************/        
 /* Utilise par le BMP de chargement pour partiel (AA2243)            */        
 /*                                                                   */        
 /* METHODE : EQT_ADD_YY ................(Index '12','22','42')       */        
 /*   renvoi  Numero addition et type pour un equipement donne        */        
 /*                                                                   */        
 /* METHODE : EQT_CON_YY ................(Index '13','23','43')       */        
 /*   renvoi  Numero de pack  et type pour un equipement donne        */        
 /*                                                                   */        
 /*********************************************************************/        
         
 /* -------------------- INPUT ---------------------------------------*/        
         
 DCL 1 KA2151J_A2IXEUT_I               BASED(ADDR(KA2151J.INPUT)),        
      2 NOIDTYP           DEC FIXED(07),        
      2 NOIDEQT           DEC FIXED(07);        
         
 /* -------------------- OUTPUT ------------------------------------- */        
         
 DCL 1 KA2151J_A2IXEUT_O               BASED(ADDR(KA2151J.OUTPUT)),        
      2 NOIDMAR           DEC FIXED(07),        
      2 NOIDMOD           DEC FIXED(07),        
      2 NOIDTYP           DEC FIXED(07),        
      2 NOIDADD           DEC FIXED(11),        
      2 NOIDPAC           DEC FIXED(07);        
         
 /*********************************************************************/        
 /*        LE TAUX TMC POUR DES NOUV. VOITURES ET OCCASION            */        
 /*      ==================================================           */        
 /*                                                                   */        
 /* METHODE : YY_TMC                                                  */        
 /*                                                                   */        
 /*     YY = VP(VOITURES) , UT(UTILITAIRES), MO(MOTOS)                */        
 /*                                                                   */        
 /*********************************************************************/        
         
 /* -------------------- INPUT ---------------------------------------*/        
         
 DCL 1 KA2151J_TMC_I               BASED(ADDR(KA2151J.INPUT)),        
      2 NOIDMAR            DEC FIXED(07),######################        
      2 NOIDMOD            DEC FIXED(07),######################        
      2 NOIDTYP            DEC FIXED(07),######################        
      2 TMC_MOIS           CHAR(02),     ##############################        
      2 TMC_ANNEE          CHAR(04);     ###############################        
 /* -------------------- OUTPUT ------------------------------------- */        
 DCL 1 KA2151J_TMC_O               BASED(ADDR(KA2151J.OUTPUT)),        
       2 TMC_NOUV          DEC FIXED(09),        
       2 TMC_OCCAS         DEC FIXED(09);        
 /*********************************************************************/        
         
 /*********************************************************************/        
 /*                                                                   */        
 /* MESSAGE D'ERREUR (JWB001.CDRTPGM = $LTNMPRJ !! 'XXX')             */        
 /*    001 : NOM DE METHODE PAS CONNU                                 */        
 /*    002 : TAILLE INPUT INCORRECTE                                  */        
 /*    003 : DONNEES SEGMENT INPUT INVALIDES                          */        
 /*    004 : DONNEES SEGMENT OUTPUT INVALIDES                         */        
 /*    005 : TAILLE INPUT EXPLORATION INCORRECTE                      */        
 /*    006 : TAILLE OUTPUT EXPLORATION INCORRECTE                     */        
 /*    007 : NOMBRE D'ITEMS A EXPLORER INVALIDE                       */        
 /*    008 : NOMBRE D'ITEMS A EXPLORER > LIMITE PREVUE                */        
 /*    009 : EXPLORATION S/P : CLE DE DEPART NON RENSEIGNEE           */        
 /*    010 : TRAITEMENT INDEX PAS PREVU                               */        
 /*    011 : EXPLORATION : DONNEES INPUT INVALIDES                    */        
 /*    012 : TAILLE INPUT YY_PRIX INCORRECTE                          */        
 /*    013 : TAILLE OUTPUT YY_PRIX INCORRECTE                         */        
 /*    014 : TAILLE INPUT YY_COTATION INCORRECTE                      */        
 /*    015 : TAILLE OUTPUT YY_COTATION INCORRECTE                     */        
 /*                                                                   */        
 /*********************************************************************/        
         
 /********************************************************************/        
 /*  BUILTINS & DECLARATIONS STANDARDS                               */        
 /********************************************************************/        
         
 DCL ABS       BUILTIN;        
 DCL ADDR      BUILTIN;        
 DCL CEIL      BUILTIN;        
 DCL DATE      BUILTIN;        
 DCL DATETIME  BUILTIN;        
 DCL DIM       BUILTIN;        
 DCL FLOOR     BUILTIN;        
 DCL INDEX     BUILTIN;        
 DCL LENGTH    BUILTIN;        
 DCL LOW       BUILTIN;        
 DCL MAX       BUILTIN;        
 DCL MIN       BUILTIN;        
 DCL MOD       BUILTIN;        
 DCL NULL      BUILTIN;        
 DCL ONCODE    BUILTIN;        
 DCL ONLOC     BUILTIN;        
 DCL REPEAT    BUILTIN;        
 DCL STG       BUILTIN;        
 DCL SUBSTR    BUILTIN;        
 DCL TIME      BUILTIN;        
 DCL TRANSLATE BUILTIN;        
 DCL UNSPEC    BUILTIN;        
 DCL VERIFY    BUILTIN;        
 /* TDMOHL 03/05/2005 AJOUT DE ONSOURCE, PLIRETC ET PLIRETV */        
 DCL ONSOURCE  BUILTIN;        
 DCL PLIRETC   BUILTIN;        
 DCL PLIRETV   BUILTIN;        
         
 /* TDMSLE : 041103 */        
 DCL CENTER    BUILTIN;        
 DCL LEFT      BUILTIN;        
 DCL RIGHT     BUILTIN;        
 DCL TRIM      BUILTIN;        
 DCL UPPERCASE BUILTIN;        
 DCL PTRADD    BUILTIN;        
 /* TDMSLE FIN : 041103 */        
         
 /* TDMSLE : 041103 -                                         */        
 /*  MISE EN COMMENTAIRE CAR IL FAUT UTILISER 'TRIM' DE VAPLI */        
 /* DCL TRIM      EXT ENTRY RETURNS(CHAR(133) VAR BYVALUE);   */        
 /* DCL LTRIM     EXT ENTRY RETURNS(CHAR(133) VAR BYVALUE);   */        
 /* DCL RTRIM     EXT ENTRY RETURNS(CHAR(133) VAR BYVALUE);   */        
 /* TDMSLE FIN : 041103                                       */        
         
    /* BUILTINS STANDARDS                          */        
         
 /*---------------------------------------------------------- $DATTIM */        
 /*      Date & Heure ordinateur sous toutes les formes     */        
 /*     ------------------------------------------------    */        
 /*     ->     call $Dates_Times pour rafraichir      <-    */        
 /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */        
 DCL $DATE_TIME          CHAR(17) INIT(''); #################################        
 DCL $DATE_MSK           CHAR(17);        
 DCL $DATE_HEURE         CHAR(18) INIT(''); #################################        
 DCL 1 $DATE_TIME_W BASED(ADDR($DATE_TIME)),        
      2 S    CHAR(1),        
      2 A    CHAR(1),        
      2 AA   CHAR(2),        
      2 MM   CHAR(2),        
      2 JJ   CHAR(2),        
      2 HH   CHAR(2),        
      2 MI   CHAR(2),        
      2 SS   CHAR(2),        
      2 CCC  CHAR(3);        
         
 DCL $DATE_AAAAMMJJ      CHAR(08);    ####################################        
 DCL #DATE_AAAAMMJJ      PIC'(08)9'        
      BASED(ADDR($DATE_AAAAMMJJ));        
 DCL $DATE_AAMMJJ        CHAR(06);    ####################################        
 DCL #DATE_AAMMJJ        PIC'(06)9'        
      BASED(ADDR($DATE_AAMMJJ));        
 DCL $DATE_SAAMMJJ       CHAR(07);    ####################################        
 DCL #DATE_SAAMMJJ       PIC'(07)9'        
      BASED(ADDR($DATE_SAAMMJJ));        
 DCL $DATE_JJMMAAAA      CHAR(08);    ####################################        
 DCL #DATE_JJMMAAAA      PIC'(08)9'        
      BASED(ADDR($DATE_JJMMAAAA));        
 DCL $DATE_JJMMAA        CHAR(06);    ####################################        
 DCL #DATE_JJMMAA        PIC'(06)9'        
      BASED(ADDR($DATE_JJMMAA));        
         
 DCL $DATE_AAAA          CHAR(04);    ####################################        
 DCL #DATE_AAAA          PIC'(04)9'        
      BASED(ADDR($DATE_AAAA));        
 DCL $DATE_AA            CHAR(02);    ####################################        
 DCL #DATE_AA            PIC'(02)9'        
      BASED(ADDR($DATE_AA));        
 DCL $DATE_S             CHAR(01);    ####################################        
 DCL #DATE_S             PIC'(01)9'        
      BASED(ADDR($DATE_S));        
 DCL $DATE_SAA           CHAR(03);    ####################################        
 DCL #DATE_SAA           PIC'(03)9'        
      BASED(ADDR($DATE_SAA));        
         
 DCL $DATE_MM            CHAR(02);    ####################################        
 DCL #DATE_MM            PIC'(02)9'        
      BASED(ADDR($DATE_MM));        
 DCL $DATE_JJ            CHAR(02);    ####################################        
 DCL #DATE_JJ            PIC'(02)9'        
      BASED(ADDR($DATE_JJ));        
         
 DCL $TIME_HHMMSSCCC     CHAR(09);    ####################################        
 DCL #TIME_HHMMSSCCC     PIC'(09)9'        
      BASED(ADDR($TIME_HHMMSSCCC));        
 DCL $TIME_HHMMSS        CHAR(06);    ####################################        
 DCL #TIME_HHMMSS        PIC'(06)9'        
      BASED(ADDR($TIME_HHMMSS));        
 DCL $TIME_HHMM          CHAR(04);    ####################################        
 DCL #TIME_HHMM          PIC'(04)9'        
      BASED(ADDR($TIME_HHMM));        
 DCL $TIME_HH            CHAR(02);    ####################################        
 DCL #TIME_HH            PIC'(02)9'        
      BASED(ADDR($TIME_HH));        
 DCL $TIME_MM            CHAR(02);    ####################################        
 DCL #TIME_MM            PIC'(02)9'        
      BASED(ADDR($TIME_MM));        
         
 DCL $DATE_JJ_MM_AAAA    CHAR(10);    ####################################        
 DCL $DATE#JJ#MM#AAAA    CHAR(10);    ####################################        
 DCL $DATE_JJ_MM_AA      CHAR(08);    ####################################        
         
 DCL $TIME_HH_MM_SS_CCC  CHAR(12);    ####################################        
 DCL $TIME_HH_MM_SS      CHAR(08);    ####################################        
 DCL $TIME#HH#MM#SS      CHAR(08);    ####################################        
 DCL $TIME_HH_MM         CHAR(05);    ####################################        
         
 DCL $TIME_STAMP         CHAR(26);    ###########################################        
 DCL $TIME_STAMP_PL1     CHAR(20);    ###########################################        
 /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */        
 $DATE_MSK = 'ABCDEFGHIJKLMNOPQ';        
         
 CALL $DATES_TIMES;        
         
 $DATES_TIMES: PROC;        
 $DATE_TIME      = DATETIME();        
 $DATE_HEURE     = $DATE_TIME_W.JJ!!'/'!!$DATE_TIME_W.MM!!'/'!!        
                   $DATE_TIME_W.S!!$DATE_TIME_W.A!!$DATE_TIME_W.AA!!        
                   ' - '!!$DATE_TIME_W.HH!!':'!!$DATE_TIME_W.MI;        
 $DATE_AAAAMMJJ     = $DATE_TIME_W.S!!$DATE_TIME_W.A!!$DATE_TIME_W.AA!!        
                      $DATE_TIME_W.MM!!$DATE_TIME_W.JJ;        
 $DATE_JJMMAAAA     = $DATE_TIME_W.JJ!!$DATE_TIME_W.MM!!$DATE_TIME_W.S!!        
                      $DATE_TIME_W.A!!$DATE_TIME_W.AA;        
 $DATE_AAMMJJ       = $DATE_TIME_W.AA!!$DATE_TIME_W.MM!!$DATE_TIME_W.JJ;        
 $DATE_JJMMAA       = $DATE_TIME_W.JJ!!$DATE_TIME_W.MM!!$DATE_TIME_W.AA;        
 $DATE_SAAMMJJ      = $DATE_TIME_W.S!!$DATE_TIME_W.AA!!$DATE_TIME_W.MM!!        
                      $DATE_TIME_W.JJ;        
 $DATE_AAAA         = $DATE_TIME_W.S!!$DATE_TIME_W.A!!$DATE_TIME_W.AA;        
 $DATE_AA           = $DATE_TIME_W.AA;        
 $DATE_S            = $DATE_TIME_W.S;        
 $DATE_SAA          = $DATE_TIME_W.S!!$DATE_TIME_W.AA;        
 $DATE_MM           = $DATE_TIME_W.MM;        
 $DATE_JJ           = $DATE_TIME_W.JJ;        
 $DATE_JJ_MM_AAAA   = $DATE_TIME_W.JJ!!'/'!!        
                      $DATE_TIME_W.MM!!'/'!!$DATE_TIME_W.S!!        
                      $DATE_TIME_W.A!!$DATE_TIME_W.AA;        
 $DATE#JJ#MM#AAAA   = $DATE_TIME_W.JJ!!'.'!!        
                      $DATE_TIME_W.MM!!'.'!!$DATE_TIME_W.S!!        
                      $DATE_TIME_W.A!!$DATE_TIME_W.AA;        
 $DATE_JJ_MM_AA     = $DATE_TIME_W.JJ!!'/'!!        
                      $DATE_TIME_W.MM!!'/'!!$DATE_TIME_W.AA;        
 $TIME_HHMMSSCCC    = $DATE_TIME_W.HH!!$DATE_TIME_W.MI!!        
                      $DATE_TIME_W.SS!!$DATE_TIME_W.CCC;        
 $TIME_HHMMSS       = $DATE_TIME_W.HH!!$DATE_TIME_W.MI!!        
                      $DATE_TIME_W.SS;        
 $TIME_HHMM         = $DATE_TIME_W.HH!!$DATE_TIME_W.MI;        
 $TIME_HH           = $DATE_TIME_W.HH;        
 $TIME_MM           = $DATE_TIME_W.MI;        
 $TIME_HH_MM_SS_CCC = $DATE_TIME_W.HH!!':'!!$DATE_TIME_W.MI!!':'!!        
                      $DATE_TIME_W.SS!!':'!!$DATE_TIME_W.CCC;        
 $TIME_HH_MM_SS     = $DATE_TIME_W.HH!!':'!!$DATE_TIME_W.MI!!':'!!        
                      $DATE_TIME_W.SS;        
 $TIME#HH#MM#SS     = $DATE_TIME_W.HH!!'.'!!$DATE_TIME_W.MI!!'.'!!        
                      $DATE_TIME_W.SS;        
 $TIME_HH_MM        = $DATE_TIME_W.HH!!':'!!$DATE_TIME_W.MI;        
 $TIME_STAMP        = $DATE_TIME_W.S!!$DATE_TIME_W.A!!$DATE_TIME_W.AA!!        
                      '-'!!$DATE_TIME_W.MM!!'-'!!$DATE_TIME_W.JJ!!'-'!!        
                      $DATE_TIME_W.HH!!'.'!!$DATE_TIME_W.MI!!'.'!!        
                      $DATE_TIME_W.SS!!'.'!!$DATE_TIME_W.CCC!!'000';        
 $TIME_STAMP_PL1    = $DATE_TIME_W.S!!$DATE_TIME_W.A!!$DATE_TIME_W.AA!!        
                      $DATE_TIME_W.MM!!$DATE_TIME_W.JJ!!        
                      $DATE_TIME_W.HH!!$DATE_TIME_W.MI!!        
                      $DATE_TIME_W.SS!!$DATE_TIME_W.CCC!!'000';        
 $END $DATES_TIMES;        
 /*------------------------------------------------------ END $DATTIM */        
                      /* PERMET D'AVOIR LA DATE ET L'HEURE DU JOUR   */        
         
 /********************************************************************/        
 /*  INTERFACE ET ENTRIES POUR SERVICES DB                           */        
 /********************************************************************/        
         
 /*********************************************************************/        
 /* INTERFACE : KGI011J POUR LES METHODES DE TRAITEMENT DES DATES     */        
 /*                                                                   */        
 /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ */        
 /*$                  ATTENTION                                     $ */        
 /*$                  =========                                     $ */        
 /*$LA NOTION DE JOURS FERIES EST LIEE AUX JOURS FERIES BANCAIRES   $ */        
 /*$  SAUF SI TBEGCOD(1) = 1 (IL Y A QUELQUES PONTS BANCAIRES EN +) $ */        
 /*$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ */        
 /*                                                                   */        
 /*********************************************************************/        
         
 DCL 1 KGI011J,        
      2 INPUT        CHAR (200),    ################################################        
      2 INPUT2       CHAR (150),    ################################################        
      2 OUTPUT       CHAR (400);    ################################################        
         
 /*********************************************************************/        
 /*                                                                   */        
 /*             REDEFINITION EN INPUT                                 */        
 /*                                                                   */        
 /*********************************************************************/        
         
 DCL 1 KGI011J_RI BASED(ADDR(KGI011J.INPUT)),        
    /* ----- FORMAT D'ENTREE OBLIGATOIRE ---- */        
    /* CHAMPS PERMETTANT LE TRAITEMENT SUIVANT LA METHODE */        
      2 CDFMTDA          CHAR (20),   ############################################        
         
      2 NBJJCAL          FIXED (05),  ###########################################        
      2 NBMMCAL          FIXED (05),  ###########################################        
      2 NBAACAL          FIXED (03),  ###########################################        
         
      2 AAPIVOT          PIC '9999',  ###########################################        
                                      /* DU SIECLE                   */        
         
      2 CDLGTRN          PIC '9',     ##############################################        
         
      2 TBEGCOD (32)     BIT (01),    #############################################        
           /* BIT  1 : 0 = UTILISATION JOUR FERIE BANCAIRE           */        
           /*          1 = UTILISATION JOUR FERIE NON BANCAIRE       */        
           /* BIT  2 : 0 = UTILISATION JOUR FERIE EN INPUT           */        
           /*          1 = UTILISATION JOUR FERIE DATE CIBLE         */        
         
      2 NBSEM_P6         PIC '(06)9', ##########################################        
         
      2 JJJJULIEN_P3     PIC '(03)9', ##########################################        
      2 AAAAJULIEN_P4    PIC '(04)9', ##########################################        
         
    /* LISTE DES FORMATS DE DATES POSSIBLE */        
      2 JJMMAA_P6        PIC '(06)9',        
      2 AAMMJJ_P6        PIC '(06)9',        
      2 SAAMMJJ_P7       PIC '(07)9',        
      2 SJJMMAA_P7       PIC '(07)9',        
      2 JJMMAAAA_P8      PIC '(08)9',        
      2 AAAAMMJJ_P8      PIC '(08)9',        
         
      2 JJMMAA_C6        CHAR (06),        
      2 AAMMJJ_C6        CHAR (06),        
      2 SAAMMJJ_C7       CHAR (07),        
      2 SJJMMAA_C7       CHAR (07),        
      2 JJMMAAAA_C8      CHAR (08),        
      2 AAAAMMJJ_C8      CHAR (08),        
         
      2 DATETIME_C17     CHAR (17),   ##################################        
         
      2 JJ_MM_AAAA_C10   CHAR (10),   ########################################        
         
      2 FILLER           CHAR (39);        
         
 DCL 1 KGI011J_RI2 BASED(ADDR(KGI011J.INPUT2)),        
    /* ----FORMAT D'ENTREE OPTIONNEL - POUR LE CALCUL ENTRE 2 DATES */        
      2 JJMMAA_P6        PIC '(06)9',        
      2 AAMMJJ_P6        PIC '(06)9',        
      2 SAAMMJJ_P7       PIC '(07)9',        
      2 SJJMMAA_P7       PIC '(07)9',        
      2 JJMMAAAA_P8      PIC '(08)9',        
      2 AAAAMMJJ_P8      PIC '(08)9',        
         
      2 JJMMAA_C6        CHAR (06),        
      2 AAMMJJ_C6        CHAR (06),        
      2 SAAMMJJ_C7       CHAR (07),        
      2 SJJMMAA_C7       CHAR (07),        
      2 JJMMAAAA_C8      CHAR (08),        
      2 AAAAMMJJ_C8      CHAR (08),        
         
      2 DATETIME_C17     CHAR (17),   ##################################        
         
      2 JJ_MM_AAAA_C10   CHAR (10),   ########################################        
         
      2 FILLER           CHAR (39);        
         
         
 /*********************************************************************/        
 /*                                                                   */        
 /*             REDEFINITION EN OUTPUT                                */        
 /*                                                                   */        
 /*********************************************************************/        
         
 DCL 1 KGI011J_RO BASED(ADDR(KGI011J.OUTPUT)),        
    /* FORMAT DE SORTIE */        
      /* RESULTAT DU NBR JOURS OUVRABLES - NBR JOURS NON OUVRABLES   */        
      /*  ENTRE 2 DATES                                              */        
      2 NBJJOUV          PIC '(05)9', ##########################################        
      2 NBJJNOUV         PIC '(05)9', ##########################################        
         
      /* RESULT. DIFF ENTRE 2 DATES  */        
      2 NBJJJJJ          PIC '(05)9', ##########################################        
      2 NBJJRES          PIC '(02)9', ##########################################        
      2 NBMMRES          PIC '(02)9', ##########################################        
      2 NBAARES          PIC '(04)9', ##########################################        
         
      2 CDCOMPARE        CHAR (01),   ############################################        
                                      /* '2' -> DATE2 > DATE1        */        
                                      /* '=' -> DATE1 = DATE2        */        
         
      2 BOVALID_DATE     BIT (01),        
          /* '1'B : SI 'VALID_DATE_ECH' ALORS DATE1 <= DATE JOUR     */        
          /*        SI 'VALID_DATE_POST' ALORS DATE1 >= DATE JOUR    */        
          /* '0'B : SI 'VALID_DATE_ECH' ALORS DATE1 >  DATE JOUR     */        
          /*        SI 'VALID_DATE_POST' ALORS DATE1 <  DATE JOUR    */        
         
      /* FORMATAGE POUR DATE DU JOUR */        
      2 DATEHEURE_C18    CHAR (18),   ############################################        
      2 DATETIME_C17     CHAR (17),   ############################################        
      2 HEURE_F5         FIXED (05),  ###########################################        
         
      2 HHHMISS999_P10,               ########################################################        
       3 HHH             PIC '(03)9', ##################        
       3 MI              PIC '(02)9', ##################        
       3 SS              PIC '(02)9', ##################        
       3 MIL             PIC '(03)9', ##################        
         
    /* FORMAT DE SORTIE TOUJOURS ASSIGNE */        
    /* RENSEIGNEMENT SUR LA DATE EN INPUT */        
      2 CDTYPEJJ         CHAR (01),        
          /* '1' : SI LA DATE EN INPUT EST UN JOUR FERIE OU WEEK-END */        
          /* '2' : SI LA DATE EN INPUT EST UN JOUR OUVRABLE          */        
          /* '3' : SI LA DATE EN INPUT EST HORS LIMITE TABLEAU FERIE */        
         
      2 BOFINMOIS        BIT (01),    #############################################        
                                      /* '0'B SI DATE NON FIN DE MOIS*/        
         
      2 NBWEEK           PIC '(02)9', ##########################################        
      2 NOAAAA           PIC '(04)9', ##########################################        
         
    /* RENSEIGNEMENT SUR LA DATE EN OUTPUT */        
      2 JJJJULIEN_P3     PIC '(03)9', ##########################################        
      2 AAAAJULIEN_P4    PIC '(04)9', ##########################################        
         
      2 IDJOUR           PIC '(01)9', ##########################################        
                                      /* DIMANCHE = 1 - SAMEDI = 7   */        
      2 LTFILLER         CHAR (08) VAR, ########################################        
      2 LTMOIS           CHAR (09) VAR, ########################################        
      2 LTDATE           CHAR (30) VAR, ########################################        
         
      2 JJMMAA_P6        PIC '(06)9',        
      2 AAMMJJ_P6        PIC '(06)9',        
      2 SAAMMJJ_P7       PIC '(07)9',        
      2 SJJMMAA_P7       PIC '(07)9',        
      2 JJMMAAAA_P8      PIC '(08)9',        
      2 AAAAMMJJ_P8      PIC '(08)9',        
         
      2 JJMMAA_C6        CHAR (06),        
      2 AAMMJJ_C6        CHAR (06),        
      2 SAAMMJJ_C7       CHAR (07),        
      2 SJJMMAA_C7       CHAR (07),        
      2 JJMMAAAA_C8      CHAR (08),        
      2 AAAAMMJJ_C8      CHAR (08),        
         
      2 S_P1             PIC '(01)9',        
      2 JJ_P2            PIC '(02)9',        
      2 MM_P2            PIC '(02)9',        
      2 AA_P2            PIC '(02)9',        
      2 SAA_P3           PIC '(03)9',        
      2 AAAA_P4          PIC '(04)9',        
      2 JJ_MM_AA_P8      PIC '99/99/99',        
      2 JJ_MM_AAAA_P10   PIC '99/99/9999',        
         
      2 JJ_MM_AAAA_C10   CHAR (10),        #############################################        
         
      2 LTJOUR           CHAR (15) VAR, ########################################        
         
      2 FILLER           CHAR (115);        
         
         
 /********************************************************************/        
 /*                                                                  */        
 /* METHODE :                                                        */        
 /*    - VALID_DATE            : VALIDATION D'UNE DATE               */        
 /*    - VALID_DATE_ECH        : VALIDATION D'UNE DATE <= A DATE JOUR*/        
 /*    - VALID_DATE_POST       : VALIDATION D'UNE DATE >= A DATE JOUR*/        
 /*    - FORMAT_DATE           : FORMATAGE DES DATES                 */        
 /*                                                                  */        
 /*    - DIFF_2_DATES_365      : CALCUL NOMBRE DE JOURS ENTRE 2 DATES*/        
 /*                            :  SANS LES ANNEES BISSEXTILES        */        
 /*    - DIFF_2_DATES_366      : CALCUL NOMBRE DE JOURS ENTRE 2 DATES*/        
 /*                            :  AVEC LES ANNEES BISSEXTILES        */        
 /*                            :  + NBR ANNEES, NBR MOIS, NBR JOURS  */        
 /*    - DIFF_2_DATES_372      : CALCUL NOMBRE DE JOURS ENTRE 2 DATES*/        
 /*                            :  AVEC TOUS LES MOIS A 31 JOURS      */        
 /*    - DIFF_2_DATES_HEURES   : CALCUL DU NOMBRE D'HEURES, MINUTES, */        
 /*                            :  SECONDES ENTRE 2 DATES             */        
 /*                                                                  */        
 /*    - DIFF_2_DATES_OUV      : CALCUL DU NOMBRE DE JOURS OUVRABLES */        
 /*                            :  ET NON OUVRABLES ENTRE 2 DATES     */        
 /*                            :  DU LUNDI AU VENDREDI INCLUS        */        
 /*                            :  DATES LIMITES INCLUSES             */        
 /*                                                                  */        
 /*    - DIFF_2_DATES_OUV_SAM  : CALCUL DU NOMBRE DE JOURS OUVRABLES */        
 /*                            :  ET NON OUVRABLES ENTRE 2 DATES     */        
 /*                            :  DU LUNDI AU SAMEDI INCLUS          */        
 /*                            :  DATES LIMITES INCLUSES             */        
 /*                                                                  */        
 /*    - DATE_PLUS_DUREE       : AJOUT NBR JOURS/MOIS/ANNEE A 1 DATE */        
 /*    - DATE_MOINS_DUREE      : ENLEVE NBR JOURS/MOIS/ANNEE A 1 DATE*/        
 /*                                                                  */        
 /*    - DATE_DU_JOUR          : RENVOI LA DATE DU JOUR              */        
 /*                                                                  */        
 /*    - DATE_EN_JOUR_JULIEN   : CALCUL DU JOUR JULIEN SUIVANT DATE  */        
 /*    - JOUR_JULIEN_EN_DATE   : CALCUL LA DATE SUIVANT JOUR JULIEN  */        
 /*                                                                  */        
 /*    - NUMERO_SEMAINE        : CALCUL LE NUMERO DE LA SEMAINE      */        
 /*                                                                  */        
 /*    - DATE_SEMAINE          : CALCUL DU LUNDI DE LA SEMAINE       */        
 /*                            : DEMANDEE                            */        
 /*                                                                  */        
 /*    - VERIF_DATE_FIN_MOIS   : VERIFICATION D'UNE DATE FIN DE MOIS */        
 /*    - AVOIR_DATE_FIN_MOIS   : AVOIR UN DATE DE FIN DE MOIS        */        
 /*                                                                  */        
 /*    - COMPARE_DATES         : COMPARAISON ENTRE 2 DATES           */        
 /*                                                                  */        
 /*    - DATE_PLUS_JJ_OUV      : AJOUT NBR JOURS OUVRABLES A UNE DATE*/        
 /*    - DATE_MOINS_JJ_OUV     : ENLEVE NBR JOURS OUVRABLES A UNE DATE*/        
 /*                                                                  */        
 /* ATTENTION :                                                      */        
 /*    TOUTES METHODES VALIDENT LA DATE D'ENTREE                     */        
 /*    TOUTES METHODES RENVOIENT LE FORMATAGE DE LA DATE             */        
 /*         - SOIT D'ENTREE                                          */        
 /*         - SOIT DE SORTIE EN CAS DE CALCUL                        */        
 /*         - SOIT LA PREMIERE DATE D'ENTREE POUR LES COMPARAISONS   */        
 /*                                                                  */        
 /* NB :                                                             */        
 /*    LES METHODES 'DIFF_2_DATES_XXX' DONNENT COMME RESULTAT        */        
 /*    1 JOUR ENTRE LE 1 MAI ET LE 2 MAI                             */        
 /*                                                                  */        
 /********************************************************************/        
 /*                                                                  */        
 /* MESSAGE D'ERREUR (KWB001.CDRTPGM = $LTNMPRJ !! 'XXX')            */        
 /*------------------------------------------------------------------*/        
 /*                                                                  */        
 /*    001 : LA METHODE N'EXISTE PAS                                 */        
 /*    002 : LE FORMAT N'EXISTE PAS                                  */        
 /*    003 : DATE NON CONFORME                                       */        
 /*    004 : CODE INCORRECT - INTERNE AU PROGRAMME                   */        
 /*    005 : ANNEE DIFFERENTE DE 18XX, 19XX, 20XX OU 21XX            */        
 /*           (VALABLE UNIQUEMENT POUR LA DATE EN 6 POSITIONS)       */        
 /*    006 : DATE INVALIDE                                           */        
 /*    007 : NOMBRE DE JOURS INCORRECT                               */        
 /*    008 : ANNEE INCORRECTE                                        */        
 /*    009 : JOUR JULIEN INCORRECT                                   */        
 /*    010 : ANNEE NON ENCODEE DANS TABLEAU JOURS FERIES             */        
 /*    011 : DATE ENCODEE OU DATE RESULTAT EST SOIT INFERIEURE       */        
 /*           A 1800 SOIT SUPERIEURE A 2799                          */        
 /*    012 : NUMERO DE LA SEMAINE INFERIEURE A 1 OU SUPERIEURE A 53  */        
 /*    013 : PAS DE COMPARAISON ENTRE 2 DATES EN 6 POSITIONS         */        
 /*                                                                  */        
 /********************************************************************/        
         
         /* SERVICE DATES       #003             */        
 DCL KGI011  ENTRY;                               #################################################        
         
 /********************************************************************/        
 /* FICHIERS                                                         */        
 /********************************************************************/        
 DCL     SYSPRINT FILE  STREAM OUTPUT PRINT;  ###################################        
         
 /********************************************************************/        
 /*  DECLARATION DES PCB                                             */        
 /********************************************************************/        
 /*---------------------------------------------------------- PCBINIT */        
 /*------------------------------------------------------ END PCBINIT */        
 /*-------------------------------------------------------- FCTINIVA */        
    DCL  CEETDLI ENTRY OPTIONS (ASM);        
    DCL  PLITDLI ENTRY;        
    DCL  GN    CHAR(4)               VALUE ('GN  ');        
    DCL  GU    CHAR(4)               VALUE ('GU  ');        
    DCL  GHU   CHAR(4)               VALUE ('GHU ');        
    DCL  GNP   CHAR(4)               VALUE ('GNP ');        
    DCL  GHN   CHAR(4)               VALUE ('GHN ');        
    DCL  GHNP  CHAR(4)               VALUE ('GHNP');        
    DCL  GCV   CHAR(4)               VALUE ('GCV ');        
    DCL  ISRT  CHAR(4)               VALUE ('ISRT');        
    DCL  DLET  CHAR(4)               VALUE ('DLET');        
    DCL  REPL  CHAR(4)               VALUE ('REPL');        
    DCL  CHNG  CHAR(4)               VALUE ('CHNG');        
    DCL  LOG   CHAR(4)               VALUE ('LOG ');        
    DCL  STAT  CHAR(4)               VALUE ('STAT');        
    DCL  ROLL  CHAR(4)               VALUE ('ROLL');        
    DCL  ROLB  CHAR(4)               VALUE ('ROLB');        
    DCL  PURG  CHAR(4)               VALUE ('PURG');        
    DCL  CMD   CHAR(4)               VALUE ('CMD ');        
    DCL  GCMD  CHAR(4)               VALUE ('GCMD');        
    DCL  CHKP  CHAR(4)               VALUE ('CHKP');        
    DCL  XRST  CHAR(4)               VALUE ('XRST');        
    DCL  DEQ   CHAR(4)               VALUE ('DEQ ');        
    DCL  ONE   FIXED BIN (31)        VALUE (0001B);        
    DCL  TWO   FIXED BIN (31)        VALUE (0010B);        
    DCL  THREE FIXED BIN (31)        VALUE (0011B);        
    DCL  FOUR  FIXED BIN (31)        VALUE (0100B);        
    DCL  FIVE  FIXED BIN (31)        VALUE (0101B);        
    DCL  SIX   FIXED BIN (31)        VALUE (0110B);        
    DCL  SEVEN FIXED BIN (31)        VALUE (0111B);        
    DCL  EIGHT FIXED BIN (31)        VALUE (1000B);        
    DCL  NINE  FIXED BIN (31)        VALUE (1001B);        
 /*----------------------------------------------------- END FCTINIVA */        
               /* DB DICTIONNAIRE               */        
 /*-------------------------------------------------------- DBPCBMSK */        
   DCL      DEU02PCB             PTR;        
    DCL  LKEY_DEU02 FIXED BINARY(31,0);        
         
    DCL  1  DEU02           BASED(DEU02PCB) ,        
         
           2  DBDNAME              CHAR(8),        
           2  SEGLEVEL             CHAR(2),        
           2  STATUS               CHAR(2),        
           2  PROCOPT              CHAR(4),        
           2  RESERVED             CHAR(4),        
           2  SEGNAME              CHAR(8),        
           2  KEYLEN               FIXED BIN(31),        
           2  SENSEG               FIXED BIN(31),        
           2  KEYAREA              CHAR(LKEY_DEU02 REFER(DEU02.KEYLEN));        
         
 /*---------------------------------------------------- END DBPCBMSK */        
 DEU02PCB= KA2151J_P.DEU02PCB;        
         
               /* DB VOITURES,MOTOS,UTIL        */        
 /*-------------------------------------------------------- DBPCBMSK */        
   DCL      DA215PCB             PTR;        
    DCL  LKEY_DA215 FIXED BINARY(31,0);        
         
    DCL  1  DA215           BASED(DA215PCB) ,        
         
           2  DBDNAME              CHAR(8),        
           2  SEGLEVEL             CHAR(2),        
           2  STATUS               CHAR(2),        
           2  PROCOPT              CHAR(4),        
           2  RESERVED             CHAR(4),        
           2  SEGNAME              CHAR(8),        
           2  KEYLEN               FIXED BIN(31),        
           2  SENSEG               FIXED BIN(31),        
           2  KEYAREA              CHAR(LKEY_DA215 REFER(DA215.KEYLEN));        
         
 /*---------------------------------------------------- END DBPCBMSK */        
 DA215PCB= KA2151J_P.DA215PCB;        
         
              /* DB VOITURES,MOTOS,UTIL        */        
 /*-------------------------------------------------------- DBPCBMSK */        
   DCL      DA215$PCB             PTR;        
         
    DCL  LKEY_DA215$ FIXED BINARY(31,0);        
         
    DCL  1  DA215$           BASED(DA215$PCB) ,        
         
           2  DBDNAME              CHAR(8),        
           2  SEGLEVEL             CHAR(2),        
           2  STATUS               CHAR(2),        
           2  PROCOPT              CHAR(4),        
           2  RESERVED             CHAR(4),        
           2  SEGNAME              CHAR(8),        
           2  KEYLEN               FIXED BIN(31),        
           2  SENSEG               FIXED BIN(31),        
           2  KEYAREA              CHAR(LKEY_DA215$ REFER(DA215$.KEYLEN)        
 );        
 /*---------------------------------------------------- END DBPCBMSK */        
 DA215$PCB= KA2151J_P.DA215$PCB;        
         
              /* DB INDEX Libelle MAK et MOD   */        
 /*-------------------------------------------------------- DBPCBMSK */        
   DCL      DA2152PCB             PTR;        
         
    DCL  LKEY_DA2152 FIXED BINARY(31,0);        
         
    DCL  1  DA2152           BASED(DA2152PCB) ,        
         
           2  DBDNAME              CHAR(8),        
           2  SEGLEVEL             CHAR(2),        
           2  STATUS               CHAR(2),        
           2  PROCOPT              CHAR(4),        
           2  RESERVED             CHAR(4),        
           2  SEGNAME              CHAR(8),        
           2  KEYLEN               FIXED BIN(31),        
           2  SENSEG               FIXED BIN(31),        
           2  KEYAREA              CHAR(LKEY_DA2152 REFER(DA2152.KEYLEN)        
 );        
 /*---------------------------------------------------- END DBPCBMSK */        
 DA2152PCB= KA2151J_P.DA2152PCB;        
         
               /* DB INDEX EUROTAX              */        
 /*-------------------------------------------------------- DBPCBMSK */        
   DCL      DA216PCB             PTR;        
    DCL  LKEY_DA216 FIXED BINARY(31,0);        
         
    DCL  1  DA216           BASED(DA216PCB) ,        
         
           2  DBDNAME              CHAR(8),        
           2  SEGLEVEL             CHAR(2),        
           2  STATUS               CHAR(2),        
           2  PROCOPT              CHAR(4),        
           2  RESERVED             CHAR(4),        
           2  SEGNAME              CHAR(8),        
           2  KEYLEN               FIXED BIN(31),        
           2  SENSEG               FIXED BIN(31),        
           2  KEYAREA              CHAR(LKEY_DA216 REFER(DA216.KEYLEN));        
         
 /*---------------------------------------------------- END DBPCBMSK */        
 DA216PCB= KA2151J_P.DA216PCB;        
 /********************************************************************/        
 /*  SEGMENTS DE DB                                                  */        
 /********************************************************************/        
 /* NRB - TDMKIP - GENERATION LE 09/05/2005 - 17:13        LGTH=00300 */        
 /************************************************************        
 *  BASE DE DONNEES EUROTAX                                  *        
 ************************************************************/        
         
 DCL  1 A2EUTAX ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !CODE TYPE DE SEGMENT */        
 /*K*/ 2 CDCLETB  CHAR(20),              /*CD!  !CLE DU SEGMENT       */        
       2 LTRUBRI  CHAR(278);             ####################################################        
         
    DCL 1 SSA_A2EUTAX,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02),        
         2 VALUE1       CHAR (20),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT GENERAUX DA215                     */        
 /*                VOITURES ...                                      */        
 /* NRB - TDMKIP - GENERATION LE 24/01/2007 - 17:02        LGTH=00300 */        
 /****************************************************************        
 *  MARQUES DE VOITURES PARTICULIERS (MARKET = BE , VEHTYPE = 10)*        
 ****************************************************************/        
         
 DCL  1 A2EUT11 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT (11) */        
 /*K*/ 2 NOIDMAR  DEC FIXED(7),          /*NO!  !NO. DE LA MARQUE     */        
 /*K*/ 2 FILLKEY  CHAR(16),              /*FI!  !RESERVE              */        
       2 KA2EUT1  CHAR(8),               ######################################################        
       2 LTMARQU  CHAR(40),              #####################################################        
       2 KA2EUT2  DEC FIXED(7),          #################################################        
       2 KA2EUT3  CHAR(16),              #####################################################        
       2 CDTTERR  PIC'9',                #######################################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 DADEBIM  PIC'(6)9',             ####################################################        
       2 DAFINIM  PIC'(6)9',             ####################################################        
       2 TBEGCOD(16)  BIT(1),            ###################################################        
       2 FILLER  CHAR(187);              #####################################################        
         
    DCL 1 SSA_A2EUT11,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('11'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUEF       CHAR (16)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
         
    DCL 1 SSA2_A2EUT11,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTI2'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('11'),        
         2 VALUE1       CHAR (08)      INIT (' '),        
         2 VALUE2       CHAR (40),        
         2 VALUE3       DEC FIXED(7),        
         2 VALUEF       CHAR (16)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
         
     /* SEGMENT MARQUES                            */        
 /* NRB - TDMKIP - GENERATION LE 24/01/2007 - 17:03        LGTH=00300 */        
 /****************************************************************        
 *  MODELES DE VOITURES PARTICULIERS (MARKET = BE , VEHTYPE = 10)*        
 ****************************************************************/        
         
 DCL  1 A2EUT12 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT      */        
 /*K*/ 2 NOIDMAR  DEC FIXED(7),          /*NO!  !NO. DE MARQUE (T11)  */        
 /*K*/ 2 NOIDMOD  DEC FIXED(7),          /*NO!  !NO. DE MODELE        */        
 /*K*/ 2 FILLKEY  CHAR(12),              /*FI!  !RESERVE              */        
       2 KA2EUT1  CHAR(4),               ######################################################        
       2 KA2EUT2  DEC FIXED(7),          #################################################        
       2 LTMODEL  CHAR(40),              #####################################################        
       2 KA2EUT3  DEC FIXED(7),          #################################################        
       2 KA2EUT4  CHAR(16),              #####################################################        
       2 CDTTERR  PIC'9',                #######################################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 DADEBIM  PIC'(6)9',             ####################################################        
       2 DAFINIM  PIC'(6)9',             ####################################################        
       2 TBEGCOD(16)  BIT(1),            ###################################################        
       2 FILLER  CHAR(187);              #####################################################        
         
    DCL 1 SSA_A2EUT12,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('12'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUEF       CHAR (12)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
         
    DCL 1 SSA2_A2EUT12,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTI2'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('12'),        
         2 VALUE1       CHAR (04)      INIT (' '),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       CHAR (40),        
         2 VALUE4       DEC FIXED(7),        
         2 VALUEF       CHAR (16)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT MODELES                            */        
 /* NRB - TDMGAS - GENERATION LE 01/06/2010 - 10:40        LGTH=00300 */        
 /**************************************************************        
 *  TYPES DE VOITURES PARTICULIERS (MARKET = BE , VEHTYPE = 10)*        
 **************************************************************/        
         
 DCL  1 A2EUT13 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (13)  */        
 /*K*/ 2 NOIDMAR  DEC FIXED(7),         /*NO!  !NO ID MARQUE (T11)    */        
 /*K*/ 2 NOIDMOD  DEC FIXED(7),         /*NO!  !NO ID MODELE (T12)    */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),         /*NO!  !NO ID TYPE            */        
 /*K*/ 2 FILLKEY  CHAR(8),              /*FI!  !RESERVE               */        
       2 KA2EUT1  DEC FIXED(7),         #################################################        
       2 KA2EUT2  DEC FIXED(7),         #################################################        
       2 LTTYPEV  CHAR(60),             #####################################################        
       2 DADEBIM  PIC'(6)9',            ####################################################        
       2 DAFINIM  PIC'(6)9',            ####################################################        
       2 TXTCLAS  CHAR(8),              ######################################################        
       2 TXTCATV  CHAR(8),              ######################################################        
       2 TXTCARO  CHAR(8),              ######################################################        
       2 NBRPORT  DEC FIXED(3),         #################################################        
       2 NPLAMIN  DEC FIXED(3),         #################################################        
       2 NPLAMAX  DEC FIXED(3),         #################################################        
       2 NBRTRAN  DEC FIXED(3),         #################################################        
       2 NBSIEGE  CHAR(10),             #####################################################        
       2 NBTYPKW  DEC FIXED(3),         #################################################        
       2 NBCVDIN  DEC FIXED(3),         #################################################        
       2 NBCVFIS  DEC FIXED(5,2),       ###############################################        
       2 TXTBOIT  CHAR(8),              ######################################################        
       2 NBVITES  DEC FIXED(3),         #################################################        
       2 NBRCYLI  DEC FIXED(3),         #################################################        
       2 TYPCYLI  DEC FIXED(5),         #################################################        
       2 POIDVID  DEC FIXED(5),         #################################################        
       2 POIDTRA  DEC FIXED(5),         #################################################        
       2 POIDMAX  DEC FIXED(5),         #################################################        
       2 HAUTEUR  DEC FIXED(5),         #################################################        
       2 LARGEUR  DEC FIXED(5),         #################################################        
       2 LONGUEU  DEC FIXED(5),         #################################################        
       2 CAPRESE  DEC FIXED(5,1),       ###############################################        
       2 TXTCARB  CHAR(8),              ######################################################        
       2 CDSPORT  CHAR(1),              ######################################################        
       2 CDSPOSE  CHAR(1),              ######################################################        
       2 TAXETMC  DEC FIXED(9),         #################################################        
       2 CDVOLSM  CHAR(1),              ######################################################        
       2 CDDMSMA  CHAR(1),              ######################################################        
       2 DERPRIX  DEC FIXED(9),         #################################################        
       2 ANNEPRI  PIC'(4)9',            ####################################################        
       2 MOISPRI  PIC'99',              ######################################################        
       2 CDTTERR  PIC'9',               #######################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 CDOMETH  CHAR(1),              ######################################################        
       2 CDDMETH  CHAR(1),              ######################################################        
       2 TCO2EMI  DEC FIXED(5),         #################################################        
       2 CDTYOP3  CHAR(1),              ######################################################        
       2 CDTYDM3  CHAR(1),              ######################################################        
       2 CDECOV2  CHAR(1),              ######################################################        
       2 TXTMOTE  CHAR(8),              ######################################################        
       2 FILLER  CHAR(60);              ######################################################        
         
    DCL 1 SSA_A2EUT13,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('13'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       DEC FIXED(7),        
         2 VALUEF       CHAR (08),        
         2 FIL4         CHAR (1)       INIT (')');        
         
    DCL 1 SSA2_A2EUT13,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTI2'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('13'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       CHAR (60),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT TYPES                              */        
 /* NRB - TDMKIP - GENERATION LE 01/03/2005 - 15:55        LGTH=00300 */        
 /************************************************************        
 *  PRIX DES TYPES DE VOITURES PARTICULIERS                  *        
 *  (MARKET = BE , VEHTYPE = 10)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT14 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT (14) */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),          /*NO!  !NO. ID TYP (T13)     */        
 /*K*/ 2 DATEDEB  DEC FIXED(7),          /*DC!  !DATE DEBUT VALIDITE  */        
 /*K*/ 2 FILLKEY  CHAR(12),              /*FI!  !RESERVE              */        
       2 PRIHTVA  DEC FIXED(9),          #################################################        
       2 PRITVAC  DEC FIXED(9),          #################################################        
       2 TAUXTVA  DEC FIXED(5,2),        ###############################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 FILLER  CHAR(257);              #####################################################        
         
    DCL 1 SSA_A2EUT14,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('14'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUEF       CHAR (12),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT PRIX                               */        
 /* NRB - TDMKIP - GENERATION LE 25/03/2005 - 15:18        LGTH=00300 */        
 /************************************************************        
 *  EQUIPEMENTS POUR  VOITURES PARTICULIERS                  *        
 *  (SERIE/OPTIONS/PACKAGES)                                 *        
 *  (MARKET = BE , VEHTYPE = 10)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT15 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT (15) */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),          /*NO!  !NO. ID TYPE (T13)    */        
 /*K*/ 2 NOIDADD  DEC FIXED(11),         /*NO!  !NO. ID ADDITION      */        
 /*K*/ 2 FILLKEY  CHAR(10),              /*FI!  !RESERVE              */        
       2 DATEDEB  DEC FIXED(7),          #################################################        
       2 DATEFIN  DEC FIXED(7),          #################################################        
       2 NOIDEQT  DEC FIXED(7),          #################################################        
       2 NOIDFLA  PIC'9',                #######################################################        
       2 NOIDFLP  PIC'9',                #######################################################        
       2 PRIHTVA  DEC FIXED(9),          #################################################        
       2 PRITVAC  DEC FIXED(9),          #################################################        
       2 TAUXTVA  DEC FIXED(5,2),        ###############################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 FILLER  CHAR(243);              #####################################################        
         
    DCL 1 SSA_A2EUT15,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('15'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(11),        
         2 VALUEF       CHAR (10),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT EQUIPEMENTS                        */        
 /* NRB - TDMKIP - GENERATION LE 21/11/2005 - 16:41        LGTH=00300 */        
 /************************************************************        
 *  CONTENU DES PACKS POUR  VOITURES PARTICULIERS            *        
 *  (MARKET = BE , VEHTYPE = 10)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT16 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (16)  */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),         /*NO!  !NO. ID TYPE (T13)     */        
 /*K*/ 2 NOIDPAC  DEC FIXED(7),         /*NO!  !NO. ID PACK (EQT T14) */        
 /*K*/ 2 NOIDEQT  DEC FIXED(7),         /*NO!  !NO. ID EQT (EQT T17)  */        
 /*K*/ 2 DATEDEB  DEC FIXED(7),         /*DC!  !DATE DEBUT VALIDITE   */        
 /*K*/ 2 FILLKEY  CHAR(4),              /*FI!  !RESERVE               */        
       2 NOIDFLA  PIC'9',               #######################################################        
       2 DATEFIN  DEC FIXED(7),         #################################################        
       2 PRIHTVA  DEC FIXED(9),         #################################################        
       2 PRITVAC  DEC FIXED(9),         #################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 FILLER  CHAR(255);             #####################################################        
         
    DCL 1 SSA_A2EUT16,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('16'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       DEC FIXED(7),        
         2 VALUE4       DEC FIXED(7),        
         2 VALUEF       CHAR (04),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT CONTENU DES PACKS                  */        
 /* NRB - TDMKIP - GENERATION LE 08/06/2007 - 09:33        LGTH=00300 */        
 /************************************************************        
 *  TEXTES EQUIPEMENTS POUR VOITURES PARTICULIERS            *        
 *  (MARKET = BE , VEHTYPE = 10)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT17 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (17)  */        
 /*K*/ 2 NOIDEQT  DEC FIXED(7),         /*NO!  !NO. ID EQT            */        
 /*K*/ 2 FILLKEY  CHAR(16),             /*FI!  !RESERVE               */        
       2 LTTXTEQ(2)  CHAR(80),          ##################################################        
       2 LTTXTST(2)  CHAR(40),          ##################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 TXTESAC  CHAR(8),              ######################################################        
       2 FILLER  CHAR(22);              ######################################################        
         
    DCL 1 SSA_A2EUT17,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('17'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUEF       CHAR (16),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT TEXTES EQUIPEMENTS                 */        
 /* NRB - TDMKIP - GENERATION LE 01/03/2005 - 15:56        LGTH=00300 */        
 /************************************************************        
 *  COTATIONS DES TYPES DE VOITURES PARTICULIERS             *        
 *  (MARKET = BE , VEHTYPE = 10)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT18 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (18)  */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),         /*NO!  !NO. ID TYP (T13)      */        
 /*K*/ 2 PERIMAT  PIC'(6)9',            /*P6!  !IMMATRICUL. AAAAMM    */        
 /*K*/ 2 FILLKEY  CHAR(10),             /*FI!  !RESERVE               */        
 /*       COTATIONS RECALCULeES CHAQUE MOIS (HISTORIQUE SUR 12 MOIS)  */        
       2 COTAREV(12)  DEC FIXED(9),     #############################################        
       2 COTARAC(12)  DEC FIXED(9),     #############################################        
       2 KILOMTH(12)  DEC FIXED(9),     #############################################        
       2 ANNEVAL  PIC'(4)9',            ####################################################        
       2 MOISVAL  PIC'99',              ######################################################        
       2 PRITVAC  DEC FIXED(9),         #################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 FILLER  CHAR(79);              ######################################################        
         
    DCL 1 SSA_A2EUT18,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('18'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       PIC'(6)9',        
         2 VALUEF       CHAR (10),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT COTATIONS                          */        
         
 /*                UTILITAIRES ...                                   */        
 /* NRB - TDMKIP - GENERATION LE 24/01/2007 - 17:03        LGTH=00300 */        
 /****************************************************************        
 *  MARQUES D'UTILIATIRES            (MARKET = BE , VEHTYPE = 20)*        
 ****************************************************************/        
         
 DCL  1 A2EUT21 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT (21) */        
 /*K*/ 2 NOIDMAR  DEC FIXED(7),          /*NO!  !NO. DE LA MARQUE     */        
 /*K*/ 2 FILLKEY  CHAR(16),              /*FI!  !RESERVE              */        
       2 KA2EUT1  CHAR(8),               ######################################################        
       2 LTMARQU  CHAR(40),              #####################################################        
       2 KA2EUT2  DEC FIXED(7),          #################################################        
       2 KA2EUT3  CHAR(16),              #####################################################        
       2 CDTTERR  PIC'9',                #######################################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 DADEBIM  PIC'(6)9',             ####################################################        
       2 DAFINIM  PIC'(6)9',             ####################################################        
       2 TBEGCOD(16)  BIT(1),            ###################################################        
       2 FILLER  CHAR(187);              #####################################################        
         
    DCL 1 SSA_A2EUT21,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('21'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUEF       CHAR (16)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
         
    DCL 1 SSA2_A2EUT21,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTI2'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('21'),        
         2 VALUE1       CHAR (08)      INIT (' '),        
         2 VALUE2       CHAR (40),        
         2 VALUE3       DEC FIXED(7),        
         2 VALUEF       CHAR (16)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
         
     /* SEGMENT MARQUES                            */        
 /* NRB - TDMKIP - GENERATION LE 24/01/2007 - 17:04        LGTH=00300 */        
 /****************************************************************        
 *  MODELES D'UTILITAIRES            (MARKET = BE , VEHTYPE = 20)*        
 ****************************************************************/        
         
 DCL  1 A2EUT22 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT      */        
 /*K*/ 2 NOIDMAR  DEC FIXED(7),          /*NO!  !NO. DE MARQUE (T21)  */        
 /*K*/ 2 NOIDMOD  DEC FIXED(7),          /*NO!  !NO. DE MODELE        */        
 /*K*/ 2 FILLKEY  CHAR(12),              /*FI!  !RESERVE              */        
       2 KA2EUT1  CHAR(4),               ######################################################        
       2 KA2EUT2  DEC FIXED(7),          #################################################        
       2 LTMODEL  CHAR(40),              #####################################################        
       2 KA2EUT3  DEC FIXED(7),          #################################################        
       2 KA2EUT4  CHAR(16),              #####################################################        
       2 CDTTERR  PIC'9',                #######################################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 DADEBIM  PIC'(6)9',             ####################################################        
       2 DAFINIM  PIC'(6)9',             ####################################################        
       2 TBEGCOD(16)  BIT(1),            ###################################################        
       2 FILLER  CHAR(187);              #####################################################        
         
    DCL 1 SSA_A2EUT22,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('22'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUEF       CHAR (12)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
         
    DCL 1 SSA2_A2EUT22,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTI2'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('22'),        
         2 VALUE1       CHAR (04)      INIT (' '),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       CHAR (40),        
         2 VALUE4       DEC FIXED(7),        
         2 VALUEF       CHAR (16)      INIT (' '),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT MODELES                            */        
 /* NRB - TDMGAS - GENERATION LE 01/06/2010 - 10:40        LGTH=00300 */        
 /**************************************************************        
 *  TYPES D'UTILITAIRES            (MARKET = BE , VEHTYPE = 20)*        
 **************************************************************/        
         
 DCL  1 A2EUT23 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (23)  */        
 /*K*/ 2 NOIDMAR  DEC FIXED(7),         /*NO!  !NO ID MARQUE (T21)    */        
 /*K*/ 2 NOIDMOD  DEC FIXED(7),         /*NO!  !NO ID MODELE (T22)    */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),         /*NO!  !NO ID TYPE            */        
 /*K*/ 2 FILLKEY  CHAR(8),              /*FI!  !RESERVE               */        
       2 KA2EUT1  DEC FIXED(7),         #################################################        
       2 KA2EUT2  DEC FIXED(7),         #################################################        
       2 LTTYPEV  CHAR(60),             #####################################################        
       2 DADEBIM  PIC'(6)9',            ####################################################        
       2 DAFINIM  PIC'(6)9',            ####################################################        
       2 TXTCLAS  CHAR(8),              ######################################################        
       2 TXTCATV  CHAR(8),              ######################################################        
       2 TXTCARO  CHAR(8),              ######################################################        
       2 NBRPORT  DEC FIXED(3),         #################################################        
       2 NPLAMIN  DEC FIXED(3),         #################################################        
       2 NPLAMAX  DEC FIXED(3),         #################################################        
       2 NBRTRAN  DEC FIXED(3),         #################################################        
       2 NBSIEGE  CHAR(10),             #####################################################        
       2 NBTYPKW  DEC FIXED(3),         #################################################        
       2 NBCVDIN  DEC FIXED(3),         #################################################        
       2 NBCVFIS  DEC FIXED(5,2),       ###############################################        
       2 TXTBOIT  CHAR(8),              ######################################################        
       2 NBVITES  DEC FIXED(3),         #################################################        
       2 NBRCYLI  DEC FIXED(3),         #################################################        
       2 TYPCYLI  DEC FIXED(5),         #################################################        
       2 POIDVID  DEC FIXED(5),         #################################################        
       2 POIDTRA  DEC FIXED(5),         #################################################        
       2 POIDMAX  DEC FIXED(5),         #################################################        
       2 HAUTEUR  DEC FIXED(5),         #################################################        
       2 LARGEUR  DEC FIXED(5),         #################################################        
       2 LONGUEU  DEC FIXED(5),         #################################################        
       2 CAPRESE  DEC FIXED(5,1),       ###############################################        
       2 TXTCARB  CHAR(8),              ######################################################        
       2 CDSPORT  CHAR(1),              ######################################################        
       2 CDSPOSE  CHAR(1),              ######################################################        
       2 TAXETMC  DEC FIXED(9),         #################################################        
       2 CDVOLSM  CHAR(1),              ######################################################        
       2 CDDMSMA  CHAR(1),              ######################################################        
       2 DERPRIX  DEC FIXED(9),         #################################################        
       2 ANNEPRI  PIC'(4)9',            ####################################################        
       2 MOISPRI  PIC'99',              ######################################################        
       2 CDTTERR  PIC'9',               #######################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 CDOMETH  CHAR(1),              ######################################################        
       2 CDDMETH  CHAR(1),              ######################################################        
       2 TCO2EMI  DEC FIXED(5),         #################################################        
       2 CDTYOP3  CHAR(1),              ######################################################        
       2 CDTYDM3  CHAR(1),              ######################################################        
       2 CDECOV2  CHAR(1),              ######################################################        
       2 TXTMOTE  CHAR(8),              ######################################################        
       2 FILLER  CHAR(60);              ######################################################        
         
    DCL 1 SSA_A2EUT23,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('23'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       DEC FIXED(7),        
         2 VALUEF       CHAR (08),        
         2 FIL4         CHAR (1)       INIT (')');        
         
    DCL 1 SSA2_A2EUT23,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTI2'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02)      INIT ('23'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       CHAR (60),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT TYPES                              */        
 /* NRB - TDMKIP - GENERATION LE 01/03/2005 - 15:56        LGTH=00300 */        
 /************************************************************        
 *  PRIX DES UTILITAIRES                                     *        
 *  (MARKET = BE , VEHTYPE = 20)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT24 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT (24) */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),          /*NO!  !NO. ID TYP (T23)     */        
 /*K*/ 2 DATEDEB  DEC FIXED(7),          /*DC!  !DATE DEBUT VALIDITE  */        
 /*K*/ 2 FILLKEY  CHAR(12),              /*FI!  !RESERVE              */        
       2 PRIHTVA  DEC FIXED(9),          #################################################        
       2 PRITVAC  DEC FIXED(9),          #################################################        
       2 TAUXTVA  DEC FIXED(5,2),        ###############################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 FILLER  CHAR(257);              #####################################################        
         
    DCL 1 SSA_A2EUT24,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('24'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUEF       CHAR (12),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT PRIX                               */        
 /* NRB - TDMKIP - GENERATION LE 25/03/2005 - 15:28        LGTH=00300 */        
 /************************************************************        
 *  EQUIPEMENTS POUR  VEHICULES UTILITAIRES                  *        
 *  (SERIE/OPTIONS/PACKAGES)                                 *        
 *  (MARKET = BE , VEHTYPE = 20)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT25 ,                        ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),               /*CD!  !TYPE DE SEGMENT (25) */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),          /*NO!  !NO. ID TYPE (T23)    */        
 /*K*/ 2 NOIDADD  DEC FIXED(11),         /*NO!  !NO. ID ADDITION      */        
 /*K*/ 2 FILLKEY  CHAR(10),              /*FI!  !RESERVE              */        
       2 DATEDEB  DEC FIXED(7),          #################################################        
       2 DATEFIN  DEC FIXED(7),          #################################################        
       2 NOIDEQT  DEC FIXED(7),          #################################################        
       2 NOIDFLA  PIC'9',                #######################################################        
       2 NOIDFLP  PIC'9',                #######################################################        
       2 PRIHTVA  DEC FIXED(9),          #################################################        
       2 PRITVAC  DEC FIXED(9),          #################################################        
       2 TAUXTVA  DEC FIXED(5,2),        ###############################################        
       2 DATECRE  DEC FIXED(7),          #################################################        
       2 DATEMAJ  DEC FIXED(7),          #################################################        
       2 FILLER  CHAR(243);              #####################################################        
         
    DCL 1 SSA_A2EUT25,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('25'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(11),        
         2 VALUEF       CHAR (10),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT EQUIPEMENTS                        */        
 /* NRB - TDMKIP - GENERATION LE 21/11/2005 - 16:41        LGTH=00300 */        
 /************************************************************        
 *  CONTENU DES PACKS POUR  VEHICULES UTILITAIRES            *        
 *  (MARKET = BE , VEHTYPE = 20)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT26 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (26)  */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),         /*NO!  !NO. ID TYPE (T23)     */        
 /*K*/ 2 NOIDPAC  DEC FIXED(7),         /*NO!  !NO. ID PACK (EQT T24) */        
 /*K*/ 2 NOIDEQT  DEC FIXED(7),         /*NO!  !NO. ID EQT (EQT T27)  */        
 /*K*/ 2 DATEDEB  DEC FIXED(7),         /*DC!  !DATE DEBUT VALIDITE   */        
 /*K*/ 2 FILLKEY  CHAR(4),              /*FI!  !RESERVE               */        
       2 NOIDFLA  PIC'9',               #######################################################        
       2 DATEFIN  DEC FIXED(7),         #################################################        
       2 PRIHTVA  DEC FIXED(9),         #################################################        
       2 PRITVAC  DEC FIXED(9),         #################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 FILLER  CHAR(255);             #####################################################        
         
    DCL 1 SSA_A2EUT26,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('26'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       DEC FIXED(7),        
         2 VALUE3       DEC FIXED(7),        
         2 VALUE4       DEC FIXED(7),        
         2 VALUEF       CHAR (04),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT CONTENU DES PACKS                  */        
 /* NRB - TDMKIP - GENERATION LE 08/06/2007 - 09:35        LGTH=00300 */        
 /************************************************************        
 *  TEXTES EQUIPEMENTS POUR VEHICULES UTILITAIRES            *        
 *  (MARKET = BE , VEHTYPE = 20)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT27 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (27)  */        
 /*K*/ 2 NOIDEQT  DEC FIXED(7),         /*NO!  !NO. ID EQT            */        
 /*K*/ 2 FILLKEY  CHAR(16),             /*FI!  !RESERVE               */        
       2 LTTXTEQ(2)  CHAR(80),          ##################################################        
       2 LTTXTST(2)  CHAR(40),          ##################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 TXTESAC  CHAR(8),              ######################################################        
       2 FILLER  CHAR(22);              ######################################################        
         
    DCL 1 SSA_A2EUT27,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('27'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUEF       CHAR (16),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT TEXTES EQUIPEMENTS                 */        
 /* NRB - TDMKIP - GENERATION LE 01/03/2005 - 15:57        LGTH=00300 */        
 /************************************************************        
 *  COTATIONS DES VEHICULES UTILITAIRES                      *        
 *  (MARKET = BE , VEHTYPE = 20)                             *        
 ************************************************************/        
         
 DCL  1 A2EUT28 ,                       ###############################################################        
 /*K*/ 2 CDTYPTB  CHAR(2),              /*CD!  !TYPE DE SEGMENT (28)  */        
 /*K*/ 2 NOIDTYP  DEC FIXED(7),         /*NO!  !NO. ID TYP (T23)      */        
 /*K*/ 2 PERIMAT  PIC'(6)9',            /*P6!  !IMMATRICUL. AAAAMM    */        
 /*K*/ 2 FILLKEY  CHAR(10),             /*FI!  !RESERVE               */        
 /*       COTATIONS RECALCULeES CHAQUE MOIS (HISTORIQUE SUR 12 MOIS)  */        
       2 COTAREV(12)  DEC FIXED(9),     #############################################        
       2 COTARAC(12)  DEC FIXED(9),     #############################################        
       2 KILOMTH(12)  DEC FIXED(9),     #############################################        
       2 ANNEVAL  PIC'(4)9',            ####################################################        
       2 MOISVAL  PIC'99',              ######################################################        
       2 PRITVAC  DEC FIXED(9),         #################################################        
       2 DATECRE  DEC FIXED(7),         #################################################        
       2 DATEMAJ  DEC FIXED(7),         #################################################        
       2 FILLER  CHAR(79);              ######################################################        
         
    DCL 1 SSA_A2EUT28,        
         2 FIL1         CHAR (8)       INIT ('A2EUTAX'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2EUTAX'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (2)       INIT ('28'),        
         2 VALUE1       DEC FIXED(7),        
         2 VALUE2       PIC'(6)9',        
         2 VALUEF       CHAR (10),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT COTATIONS                          */        
         
 /* NRB - TDMKIP - Generation le 09/02/2001 - 10:22        Lgth=00050 */        
 /************************************************************        
 *  INDEX BASE DE DONNEES EUROTAX                            *        
 ************************************************************/        
         
 DCL  1 A2IXEUT ,                       ###############################################################        
 /*K*/ 2 CDTYIDX  CHAR(2),              /*CD!  !CODE TYPE D'INDEX     */        
 /*K*/ 2 LTIDX01  CHAR(24),             /*RF!  !CLE DE L'INDEX PART 1 */        
 /*K*/ 2 LTIDX02  CHAR(24);             /*RF!  !CLE DE L'INDEX PART 2 */        
         
    DCL 1 SSA_A2IXEUT,        
         2 FIL1         CHAR (8)       INIT ('A2IXEUT'),        
         2 FIL2         CHAR (1)       INIT ('*'),        
         2 CC           CHAR (3)       INIT ('---'),        
         2 PAR          CHAR (1)       INIT ('('),        
         2 FIL3         CHAR (8)       INIT ('KA2IXEUT'),        
         2 OPER         CHAR (2)       INIT ('= '),        
         2 VALUET       CHAR (02),        
         2 VALUE1       CHAR (24),        
         2 VALUE2       CHAR (24),        
         2 FIL4         CHAR (1)       INIT (')');        
     /* SEGMENT GENERAUX DA216                     */        
 /********************************************************************/        
 /*  INTERFACE ET ENTRIES POUR DLI                                   */        
 /********************************************************************/        
 DCL XEU100  ENTRY OPTIONS(FETCHABLE);        
 /*        
 %INCLUDE KXXXXXJ;                       /  SERVICE D'ACCES DB XXXXX        
 DCL KXXXXX     ENTRY;        
 */        
 /********************************************************************/        
 /*  INTERFACE ET ENTRIES NON DLI                                    */        
 /********************************************************************/        
         
 /********************************************************************/        
 /* REDEFINITIONS DES STRUCTURES BASEES                              */        
 /********************************************************************/        
 DCL A2EUTAX_R         CHAR(STG(A2EUTAX)) BASED(ADDR(A2EUTAX));        
 DCL A2IXEUT_R         CHAR(STG(A2IXEUT)) BASED(ADDR(A2IXEUT));        
 DCL A2EUT11_R         CHAR(STG(A2EUT11)) BASED(ADDR(A2EUT11));        
 DCL A2EUT21_R         CHAR(STG(A2EUT21)) BASED(ADDR(A2EUT21));        
 DCL A2EUT12_R         CHAR(STG(A2EUT12)) BASED(ADDR(A2EUT12));        
 DCL A2EUT22_R         CHAR(STG(A2EUT22)) BASED(ADDR(A2EUT22));        
 DCL A2EUT13_R         CHAR(STG(A2EUT13)) BASED(ADDR(A2EUT13));        
 DCL A2EUT23_R         CHAR(STG(A2EUT23)) BASED(ADDR(A2EUT23));        
 DCL A2EUT14_R         CHAR(STG(A2EUT14)) BASED(ADDR(A2EUT14));        
 DCL A2EUT24_R         CHAR(STG(A2EUT24)) BASED(ADDR(A2EUT24));        
 DCL A2EUT15_R         CHAR(STG(A2EUT15)) BASED(ADDR(A2EUT15));        
 DCL A2EUT25_R         CHAR(STG(A2EUT25)) BASED(ADDR(A2EUT25));        
 DCL A2EUT16_R         CHAR(STG(A2EUT16)) BASED(ADDR(A2EUT16));        
 DCL A2EUT26_R         CHAR(STG(A2EUT26)) BASED(ADDR(A2EUT26));        
 DCL A2EUT17_R         CHAR(STG(A2EUT17)) BASED(ADDR(A2EUT17));        
 DCL A2EUT27_R         CHAR(STG(A2EUT27)) BASED(ADDR(A2EUT27));        
 DCL A2EUT18_R         CHAR(STG(A2EUT18)) BASED(ADDR(A2EUT18));        
 DCL A2EUT28_R         CHAR(STG(A2EUT28)) BASED(ADDR(A2EUT28));        
 DCL CDPGTRN_1_1       CHAR (1)           BASED(ADDR(IEU001.CDPGTRN));        
         
 /********************************************************************/        
 /* VARIABLES CONSTANTES                                             */        
 /********************************************************************/        
 DCL     ON            BIT (1)             VALUE ('1'B);        
 DCL     OFF           BIT (1)             VALUE ('0'B);        
 DCL     ITEM_OK       BIT (1)             INIT ('0'B);        
 DCL     TYPE_OK       BIT (1)             INIT ('0'B);        
 DCL     NUM           CHAR (10)           VALUE ('0123456789');        
 /********************************************************************/        
 /*     DECLARATION DES CARACTERES POUR TABLE 274                    */        
 /********************************************************************/        
         
 DCL MINUS274 CHAR (41)        
              VALUE ('abcdefghijklmnopqrstuvwxyzeee');        
         
    /* CARACTERES MINUSCULES EN CODE PAGE 274      */        
 /********************************************************************/        
 /*     DECLARATION DES CARACTERES POUR TABLE 500                    */        
 /********************************************************************/        
         
 DCL MINUS500 CHAR (41)        
              VALUE ('abcdefghijklmnopqrstuvwxyz{}@\');        
         
    /* CARACTERES MINUSCULES EN CODE PAGE 500      */        
 /********************************************************************/        
 /*     DECLARATION DES CARACTERES POUR TABLE 274 ET TABLE 500       */        
 /********************************************************************/        
         
 DCL MINUS CHAR (41);        
 DCL MAJUS CHAR (41)        
           VALUE ('ABCDEFGHIJKLMNOPQRSTUVWXYZEEEEUUUAAAIIOOC');        
         
       /* CARACTERES MAJUSCULES + DECLARATION DE MINUS*/        
         
 /********************************************************************/        
 /* INDICES                                                          */        
 /********************************************************************/        
 DCL (I, J, K ,X, Y)     FIXED BIN (31);        
         
 /********************************************************************/        
 /* DECLARATIONS PROPRES AU PROGRAMME                                */        
 /********************************************************************/        
 DCL A2EUTAX_W        LIKE A2EUTAX;        
 DCL A2EUTAX_W_R      CHAR(STG(A2EUTAX_W)) BASED(ADDR(A2EUTAX_W));        
 DCL A2EUTAX_OLD      LIKE A2EUTAX;        
 DCL A2EUTAX_OLD_R    CHAR(STG(A2EUTAX_OLD)) BASED(ADDR(A2EUTAX_OLD));        
 DCL A2IXEUT_W        LIKE A2IXEUT;        
 DCL A2IXEUT_W_R      CHAR(STG(A2IXEUT_W)) BASED(ADDR(A2IXEUT_W));        
         
 DCL  NOIDMAR_W       PIC'(7)9';        
 DCL  NOIDMOD_W       PIC'(7)9';        
 DCL  NOIDTYP_W       PIC'(7)9';        
 DCL  NOIDADD_W       PIC'(11)9';        
 DCL  NOIDEQT_W       PIC'(7)9';        
 DCL  NOIDPAC_W       PIC'(7)9';        
 DCL  OLDTEXT_W       CHAR(08);        
 DCL  OLDNEQT_W       PIC'(7)9';        
 DCL  OLDDADD_W       PIC'(7)9';        
 DCL  INTER_C6        CHAR(6);        
 DCL  INTER_P6        PIC'(6)9' BASED(ADDR(INTER_C6));        
 DCL  INTER_P7        PIC'(7)9';        
         
 DCL  ANNDEB_W        PIC'(4)9';        
 DCL  ANNFIN_W        PIC'(4)9';        
 DCL  DATEDEB_W       PIC'(7)9';        
 DCL  DATEFIN_W       PIC'(7)9';        
 DCL  ANNDEB_Z        PIC'(3)9' BASED(ADDR(DATEDEB_W));        
 DCL  ANNFIN_Z        PIC'(3)9' BASED(ADDR(DATEFIN_W));        
 DCL  MOIFIN_Z        PIC'(2)9' BASED(PTRADD(ADDR(DATEFIN_W),3));        
 DCL  DAPIVOT_W       PIC'(7)9';        
 DCL  FINEQT_W        PIC'(6)9';        
         
 DCL  LIBEQT_FR       CHAR(80);        
 DCL  LIBEQT_NL       CHAR(80);        
 DCL  LIBEST_FR       CHAR(40);        
 DCL  LIBEST_NL       CHAR(40);        
 DCL  CDGARAN_W       CHAR(01);     #######################        
         
 DCL TROUVE           BIT (1);      #################################################        
 DCL DADEBIM_W        PIC'(6)9';        
 DCL DAFINIM_W        PIC'(6)9';        
 DCL CDOMETH_W           CHAR(01);        
 DCL CDDMETH_W           CHAR(01);        
 DCL CDTYOP3_W           CHAR(01); ###################        
 DCL CDTYDM3_W           CHAR(01); ###################        
 DCL CDSPORT_W           CHAR(01);        
 DCL CDTTERR_W           CHAR(01);        
 DCL TXTCLAS_W           CHAR(08);        
 DCL TXTCARO_W           CHAR(08);        
 DCL TXTCATV_W           CHAR(08);        
 DCL LTMARQU_W           CHAR(40) VARYING;        
 DCL LTMODEL_W           CHAR(40) VARYING;        
 DCL LTMARQU_Z           CHAR(40);        
         
 /********************************************************************/        
 /* CONTROLE FLUX DU PROGRAMME                                       */        
 /********************************************************************/        
 DCL METAPCB_W        PTR;              #####################################################        
         
 /********************************************************************/        
 /* MESSAGE D'ERREUR - TRACE POUR DEBUGGING - REPRISE D'ERREUR       */        
 /********************************************************************/        
 DCL 1   MESS_TRACE  STATIC,                ################################################        
      2  LL_TR              BIN FIXED(15)   INIT(44),        
      2  ZZ_TR              BIN FIXED(15)   INIT(0),        
      2  TRACE              CHAR(40);        
 DCL 1   TB_TRACE(100) STATIC,        
      2  FLAG_TRACE         CHAR(01),        
      2  MSGE_TRACE         CHAR(40);        
 DCL     ITRACE             BIN FIXED (31)  STATIC;        
 DCL     ERR_MSG     STATIC CHAR(79);        
 DCL     PTRMSG             PTR;        
 DCL 1   ERR_DBA            BASED(PTRMSG),        
      2  FILL1              CHAR(12),        
      2  FILL2              CHAR(04),        
      2  DBD_DBA            CHAR(08),        
      2  FILL3              CHAR(08),        
      2  CALL_DBA           CHAR(10),        
      2  FILL4              CHAR(05),        
      2  KEY_DBA            CHAR(24),        
      2  FILL5              CHAR(05),        
      2  ST_DBA             CHAR(02),        
      2  FILL6              CHAR(01);        
 TB_TRACE(*)='';        
 ITRACE=0;        
 PTRMSG=ADDR(ERR_MSG);        
         
         
 /* VARIABLE PERMETTANT D'AFFICHER LA DATE ET L'HEURE DE COMPILATION */        
         
 /* VARIABLE MAX CHECK POINT : NBR MAX. DE LOTS AUTORISE AVANT CHKPT */        
 /*------------------------------------------------------------ DEBUG */        
 PT: PROC;        
 /******************************/        
 /*       MEMO TRACE           */        
 /******************************/        
 JWB001.TBTRACE_I = JWB001.TBTRACE_I+1;        
 IF JWB001.TBTRACE_I > 100        
    THEN DO;        
         JWB001.TBTRACE_I = 1;        
         JWB001.FLAG_TRACE(*) = '';        
         END;        
 JWB001.FLAG_TRACE(JWB001.TBTRACE_I) = '*';        
 JWB001.MSGE_TRACE(JWB001.TBTRACE_I) = TRACE;        
                   IF JWB001.CDTRACE = 6 !        
                      JWB001.CDTRACE = 9 THEN        
      PUT SKIP EDIT(TRACE)(A);        
 $END PT;        
         
 DEBUG: PROC;        
 /**************************************/        
 /*       PRINTING   TRACE             */        
 /**************************************/        
 DCL KT BIN FIXED(31);        
 PUT FILE(SYSPRINT) EDIT('- PROGRAM TRACE: -')        
                        (SKIP(3),A)        
                        ('------------------')        
                        (SKIP,A);        
 DO KT=1 TO 100;        
    IF JWB001.MSGE_TRACE(KT)^=''        
       THEN PUT FILE(SYSPRINT)        
            EDIT(JWB001.FLAG_TRACE(KT),        
                 JWB001.MSGE_TRACE(KT))        
                                   (SKIP,A,A);        
 END;        
 PUT FILE(SYSPRINT) EDIT('------------------')        
                        (SKIP,A);        
 $END DEBUG;        
 /*-------------------------------------------------------- END DEBUG */        
                             /* MEMO TRACE + JWB001 */        
 /*-------------------------------------------------------------------*/        
 ERR_DL1:PROC REORDER;        
 /********************************************************************/        
 /*                                                                  */        
 /*                PROCEDURE DL1 : ERREUR DATA BASE                  */        
 /*                                                                  */        
 /********************************************************************/        
 JWB001.CDRTPGM = 'ERR_DL1';        
 PUT PAGE EDIT('KA2151',  ' - VERSION DU : * 18.AUG.10 14.01.35 * - ',        
         
               'LAST SV CALL = ',JWB001.LSTCALL,        
               'LAST DB CALL = ',JWB001.LSTSERV)        
              (SKIP,A, A,(2) (SKIP,A,A));        
         
         
 CALL DEBUG;        
         
 $END ERR_DL1;        
 /*-------------------------------------------------------------------*/        
                            /* ERREUR DL1 + JWB001 */        
 ON ERROR SNAP        
    BEGIN ;        
          ON ERROR SYSTEM;        
          PUT PAGE EDIT('KA2151', ' - VERSION DU : * 18.AUG.10 14.01.35        
 * - ',        
          ' ON ERROR CONDITION',        
          'ONCODE    = ',ONCODE,        
          'ONLOC     = ',ONLOC,        
          'ONSOURCE  = ',ONSOURCE)        
          (SKIP,A,A,        
           SKIP,A,        
           SKIP,A,F(5),        
           SKIP,A,A(10),        
           SKIP,A,A);        
         
           PUT SKIP EDIT('LAST SERV CALL = ',JWB001.LSTCALL,        
                         'LAST DB2  CALL = ',JWB001.LSTSERV)        
              (SKIP,A,A);        
         
         
          CALL DEBUG;        
          SIGNAL ERROR;        
    END;        
 /*-------------------------------------------------------------------*/        
                            /* ABEND PL1           */        
         
 /********************************************************************/        
 /*  RACINE                                                          */        
 /********************************************************************/        
 IF JWB001.CDTRACE >= 5  THEN        
   DO;        
      PUT SKIP EDIT('KA2151 ===> ','START METHODE : ',JWB001.LTNMMTH)        
         
                   (A,A,A);        
      PUT SKIP LIST('CDPGTRN_1_1=',CDPGTRN_1_1);        
   END;        
         
 IF CDPGTRN_1_1 = '5'  THEN                                  ####################################################        
      MINUS = MINUS500;        
 ELSE MINUS = MINUS274;        
         
 IF JWB001.CDRTPGM ^= ''  THEN        
      RETURN;        
         
 CALL F0;   ################################        
         
 IF JWB001.CDRTPGM = '' THEN        
   SELECT (JWB001.LTNMMTH);        
         
         /* VOITURES ...*/        
         
     WHEN('CREAT_VP_MAK')    CALL F1('VP_MAK'); #################################        
     WHEN('CONSULT_VP_MAK')  CALL F2('VP_MAK'); #################################        
     WHEN('MODIF_VP_MAK')    CALL F3('VP_MAK'); #################################        
     WHEN('SUPPR_VP_MAK')    CALL F4('VP_MAK'); #################################        
     WHEN('EXPLO_1P_VP_MAK') CALL F5('MAK');    ####################################        
     WHEN('EXPLO_PS_VP_MAK') CALL F5('MAK');    ####################################        
     WHEN('EXPLO_PP_VP_MAK') CALL F5('MAK');    ####################################        
         
     WHEN('CREAT_VP_MOD')    CALL F1('VP_MOD'); #################################        
     WHEN('CONSULT_VP_MOD')  CALL F2('VP_MOD'); #################################        
     WHEN('MODIF_VP_MOD')    CALL F3('VP_MOD'); #################################        
     WHEN('SUPPR_VP_MOD')    CALL F4('VP_MOD'); #################################        
     WHEN('EXPLO_1P_VP_MOD') CALL F5('MOD');    ####################################        
     WHEN('EXPLO_PS_VP_MOD') CALL F5('MOD');    ####################################        
     WHEN('EXPLO_PP_VP_MOD') CALL F5('MOD');    ####################################        
         
     WHEN('CREAT_VP_TYP')    CALL F1('VP_TYP'); #################################        
     WHEN('CONSULT_VP_TYP')  CALL F2('VP_TYP'); #################################        
     WHEN('MODIF_VP_TYP')    CALL F3('VP_TYP'); #################################        
     WHEN('SUPPR_VP_TYP')    CALL F4('VP_TYP'); #################################        
     WHEN('EXPLO_1P_VP_TYP') CALL F5('TYP');    ####################################        
     WHEN('EXPLO_PS_VP_TYP') CALL F5('TYP');    ####################################        
     WHEN('EXPLO_PP_VP_TYP') CALL F5('TYP');    ####################################        
         
     WHEN('CREAT_VP_PRI')    CALL F1('VP_PRI'); #################################        
     WHEN('CONSULT_VP_PRI')  CALL F2('VP_PRI'); #################################        
     WHEN('MODIF_VP_PRI')    CALL F3('VP_PRI'); #################################        
     WHEN('SUPPR_VP_PRI')    CALL F4('VP_PRI'); #################################        
         
     WHEN('CREAT_VP_EQT')    CALL F1('VP_EQT'); #################################        
     WHEN('CONSULT_VP_EQT')  CALL F2('VP_EQT'); #################################        
     WHEN('MODIF_VP_EQT')    CALL F3('VP_EQT'); #################################        
     WHEN('SUPPR_VP_EQT')    CALL F4('VP_EQT'); #################################        
     WHEN('EXPLO_1P_VP_EQT') CALL F5('EQT');    ####################################        
     WHEN('EXPLO_PS_VP_EQT') CALL F5('EQT');    ####################################        
     WHEN('EXPLO_PP_VP_EQT') CALL F5('EQT');    ####################################        
         
     WHEN('CREAT_VP_CON')    CALL F1('VP_CON'); #################################        
     WHEN('CONSULT_VP_CON')  CALL F2('VP_CON'); #################################        
     WHEN('MODIF_VP_CON')    CALL F3('VP_CON'); #################################        
     WHEN('SUPPR_VP_CON')    CALL F4('VP_CON'); #################################        
     WHEN('EXPLO_1P_VP_CON') CALL F5('CON');    ####################################        
     WHEN('EXPLO_PS_VP_CON') CALL F5('CON');    ####################################        
     WHEN('EXPLO_PP_VP_CON') CALL F5('CON');    ####################################        
         
     WHEN('CREAT_VP_TXT')    CALL F1('VP_TXT'); #################################        
     WHEN('CONSULT_VP_TXT')  CALL F2('VP_TXT'); #################################        
     WHEN('MODIF_VP_TXT')    CALL F3('VP_TXT'); #################################        
     WHEN('SUPPR_VP_TXT')    CALL F4('VP_TXT'); #################################        
         
     WHEN('CREAT_VP_COT')    CALL F1('VP_COT'); #################################        
     WHEN('CONSULT_VP_COT')  CALL F2('VP_COT'); #################################        
     WHEN('MODIF_VP_COT')    CALL F3('VP_COT'); #################################        
     WHEN('SUPPR_VP_COT')    CALL F4('VP_COT'); #################################        
         
         /* PRIX VEHICULE ..*/        
         
     WHEN('VP_PRIX')         CALL F7('VP');     #####################################        
         
         /* COTATIONS ......*/        
         
     WHEN('VP_COTATION')     CALL F8('VP');     #####################################        
         
         /* UTILITAIRES ... */        
         
     WHEN('CREAT_UT_MAK')    CALL F1('UT_MAK'); #################################        
     WHEN('CONSULT_UT_MAK')  CALL F2('UT_MAK'); #################################        
     WHEN('MODIF_UT_MAK')    CALL F3('UT_MAK'); #################################        
     WHEN('SUPPR_UT_MAK')    CALL F4('UT_MAK'); #################################        
     WHEN('EXPLO_1P_UT_MAK') CALL F5('MAK');    ####################################        
     WHEN('EXPLO_PS_UT_MAK') CALL F5('MAK');    ####################################        
     WHEN('EXPLO_PP_UT_MAK') CALL F5('MAK');    ####################################        
         
     WHEN('CREAT_UT_MOD')    CALL F1('UT_MOD'); #################################        
     WHEN('CONSULT_UT_MOD')  CALL F2('UT_MOD'); #################################        
     WHEN('MODIF_UT_MOD')    CALL F3('UT_MOD'); #################################        
     WHEN('SUPPR_UT_MOD')    CALL F4('UT_MOD'); #################################        
     WHEN('EXPLO_1P_UT_MOD') CALL F5('MOD');    ####################################        
     WHEN('EXPLO_PS_UT_MOD') CALL F5('MOD');    ####################################        
     WHEN('EXPLO_PP_UT_MOD') CALL F5('MOD');    ####################################        
         
     WHEN('CREAT_UT_TYP')    CALL F1('UT_TYP'); #################################        
     WHEN('CONSULT_UT_TYP')  CALL F2('UT_TYP'); #################################        
     WHEN('MODIF_UT_TYP')    CALL F3('UT_TYP'); #################################        
     WHEN('SUPPR_UT_TYP')    CALL F4('UT_TYP'); #################################        
     WHEN('EXPLO_1P_UT_TYP') CALL F5('TYP');    ####################################        
     WHEN('EXPLO_PS_UT_TYP') CALL F5('TYP');    ####################################        
     WHEN('EXPLO_PP_UT_TYP') CALL F5('TYP');    ####################################        
         
     WHEN('CREAT_UT_PRI')    CALL F1('UT_PRI'); #################################        
     WHEN('CONSULT_UT_PRI')  CALL F2('UT_PRI'); #################################        
     WHEN('MODIF_UT_PRI')    CALL F3('UT_PRI'); #################################        
     WHEN('SUPPR_UT_PRI')    CALL F4('UT_PRI'); #################################        
         
     WHEN('CREAT_UT_EQT')    CALL F1('UT_EQT'); #################################        
     WHEN('CONSULT_UT_EQT')  CALL F2('UT_EQT'); #################################        
     WHEN('MODIF_UT_EQT')    CALL F3('UT_EQT'); #################################        
     WHEN('SUPPR_UT_EQT')    CALL F4('UT_EQT'); #################################        
     WHEN('EXPLO_1P_UT_EQT') CALL F5('EQT');    ####################################        
     WHEN('EXPLO_PS_UT_EQT') CALL F5('EQT');    ####################################        
     WHEN('EXPLO_PP_UT_EQT') CALL F5('EQT');    ####################################        
         
     WHEN('CREAT_UT_CON')    CALL F1('UT_CON'); #################################        
     WHEN('CONSULT_UT_CON')  CALL F2('UT_CON'); #################################        
     WHEN('MODIF_UT_CON')    CALL F3('UT_CON'); #################################        
     WHEN('SUPPR_UT_CON')    CALL F4('UT_CON'); #################################        
     WHEN('EXPLO_1P_UT_CON') CALL F5('CON');    ####################################        
     WHEN('EXPLO_PS_UT_CON') CALL F5('CON');    ####################################        
     WHEN('EXPLO_PP_UT_CON') CALL F5('CON');    ####################################        
         
     WHEN('CREAT_UT_TXT')    CALL F1('UT_TXT'); #################################        
     WHEN('CONSULT_UT_TXT')  CALL F2('UT_TXT'); #################################        
     WHEN('MODIF_UT_TXT')    CALL F3('UT_TXT'); #################################        
     WHEN('SUPPR_UT_TXT')    CALL F4('UT_TXT'); #################################        
         
     WHEN('CREAT_UT_COT')    CALL F1('UT_COT'); #################################        
     WHEN('CONSULT_UT_COT')  CALL F2('UT_COT'); #################################        
     WHEN('MODIF_UT_COT')    CALL F3('UT_COT'); #################################        
     WHEN('SUPPR_UT_COT')    CALL F4('UT_COT'); #################################        
         
         /* PRIX VEHICULE ..*/        
         
     WHEN('UT_PRIX')         CALL F7('UT');     #####################################        
         
         /* COTATIONS ......*/        
         
     WHEN('UT_COTATION')     CALL F8('UT');     #####################################        
         
         /* INDEX ......*/        
         
     WHEN('MAR_MOD_VP_TYP')  CALL F6('10');     #####################################        
     WHEN('MAR_MOD_UT_TYP')  CALL F6('20');     #####################################        
         
         /* INDEX (sert uniquement au BMP de chargement AA2243) ......*/        
     WHEN('EQT_ADD_VP')      CALL F6('12');     #####################################        
     WHEN('EQT_ADD_UT')      CALL F6('22');     #####################################        
     WHEN('EQT_CON_VP')      CALL F6('13');     #####################################        
     WHEN('EQT_CON_UT')      CALL F6('23');     #####################################        
     WHEN('VP_TMC')          CALL F9('VP');     #####################################        
     WHEN('UT_TMC')          CALL F9('UT');     #####################################        
     OTHER                         ##############################################################        
       DO;        
       JWB001.CDRTPGM = 'KA2151' !! '001';        
       PUT SKIP LIST('!!! NOM DE METHODE NON REPERTORIE !!!');        
       PUT SKIP LIST('CONTENU DE L''INTERFACE KA2151:');        
       PUT SKIP EDIT('METHODE =',JWB001.LTNMMTH) (A,A);        
       END;        
   END;        
         
 /* RESTAURATION DU METAPCB D'ORIGINE DANS IEU001 */        
         
 IEU001.METAPCB = METAPCB_W;        
         
 IF JWB001.CDTRACE >= 5  THEN        
      PUT SKIP EDIT('KA2151 ===> ','END   CDRTPGM : ',JWB001.CDRTPGM)        
         
                   (A,A,A);        
 /*-------------------------------------------------------------------*/        
         
 F0: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F0';        
         
 CALL PT;        
 /*********************************************************************/        
 /* INITIALISATION                                                    */        
 /*********************************************************************/        
         
 /* SAUVEGARDE DU METAPCB D'ORIGINE DE IEU001 */        
         
 METAPCB_W = IEU001.METAPCB;        
         
 /* INITIALISATION DU METAPCB PASSE AU SERVICE */        
         
 IEU001.METAPCB = KA2151J_P.DEU02PCB;        
         
 /* VERIFICATION DE LA TAILLE DE LA REDEFINITION */        
 IF (STG(KA2151J_A2EUTAX_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '002';        
   RETURN;        
   END;        
 IF (STG(KA2151J_A2EUTAX_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '010';        
   RETURN;        
   END;        
         
 IF (STG(KA2151J_EXPMAK_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '005';        
   RETURN;        
   END;        
 IF (STG(KA2151J_EXPMAK_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '006';        
   RETURN;        
   END;        
         
 IF (STG(KA2151J_EXPMOD_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '005';        
   RETURN;        
   END;        
 IF (STG(KA2151J_EXPMOD_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '006';        
   RETURN;        
   END;        
         
 IF (STG(KA2151J_EXPTYP_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '005';        
   RETURN;        
   END;        
 IF (STG(KA2151J_EXPTYP_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '006';        
   RETURN;        
   END;        
         
 IF (STG(KA2151J_EXPEQT_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '005';        
   RETURN;        
   END;        
 IF (STG(KA2151J_EXPEQT_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '006';        
   RETURN;        
   END;        
         
 IF (STG(KA2151J_EXPCON_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '005';        
   RETURN;        
   END;        
 IF (STG(KA2151J_EXPCON_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '006';        
   RETURN;        
   END;        
         
 IF (STG(KA2151J_PRIX_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '012';        
   RETURN;        
   END;        
 IF (STG(KA2151J_PRIX_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '013';        
   RETURN;        
   END;        
         
 IF (STG(KA2151J_COTAT_I)) > (STG(KA2151J.INPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '014';        
   RETURN;        
   END;        
 IF (STG(KA2151J_COTAT_O)) > (STG(KA2151J.OUTPUT)) THEN        
   DO;        
   JWB001.CDRTPGM = 'KA2151' !! '015';        
   RETURN;        
   END;        
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F0';        
         
 CALL PT;        
 $END F0;        
 /*-------------------------------------------------------------------*/        
         
 F1: PROC(METHODE) REORDER ;        
 TRACE = 'KA2151 ===> ' !! 'F1';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE CREAT_YY_XXX - CREATION                                   */        
 /*     YY = VP         CREATION VOITURE PARTICULIERE                 */        
 /*     YY = UT         CREATION UTILITAIRES                          */        
 /*    XXX = MAK        CREATION MARQUE .............(T11,T21,T41)    */        
 /*    XXX = MOD        CREATION MODELE .............(T12,T22,T42)    */        
 /*    XXX = TYP        CREATION TYPE ...............(T13,T23,T43)    */        
 /*    XXX = PRI        CREATION PRIX ...............(T14,T24,T44)    */        
 /*    XXX = EQT        CREATION EQUIPEMENTS ........(T15,T25,T45)    */        
 /*    XXX = CON        CREATION CONTENU DES PACKS ..(T16,T26,T46)    */        
 /*    XXX = TXT        CREATION TEXTES EQUIPEMENTS .(T17,T27,T47)    */        
 /*    XXX = COT        CREATION COTATIONS ..........(T18,T28,T48)    */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(06);        
         
 A2EUTAX_W_R = KA2151J_A2EUTAX_I;        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP DATA(A2EUTAX_W);        
   END;        
         
 /* CHECKER LES DATA EN INPUT */        
         
 SELECT;        
   WHEN(METHODE = 'VP_MAK' & A2EUTAX_W.CDTYPTB = '11');        
   WHEN(METHODE = 'VP_MOD' & A2EUTAX_W.CDTYPTB = '12');        
   WHEN(METHODE = 'VP_TYP' & A2EUTAX_W.CDTYPTB = '13');        
   WHEN(METHODE = 'VP_PRI' & A2EUTAX_W.CDTYPTB = '14');        
   WHEN(METHODE = 'VP_EQT' & A2EUTAX_W.CDTYPTB = '15');        
   WHEN(METHODE = 'VP_CON' & A2EUTAX_W.CDTYPTB = '16');        
   WHEN(METHODE = 'VP_TXT' & A2EUTAX_W.CDTYPTB = '17');        
   WHEN(METHODE = 'VP_COT' & A2EUTAX_W.CDTYPTB = '18');        
   WHEN(METHODE = 'UT_MAK' & A2EUTAX_W.CDTYPTB = '21');        
   WHEN(METHODE = 'UT_MOD' & A2EUTAX_W.CDTYPTB = '22');        
   WHEN(METHODE = 'UT_TYP' & A2EUTAX_W.CDTYPTB = '23');        
   WHEN(METHODE = 'UT_PRI' & A2EUTAX_W.CDTYPTB = '24');        
   WHEN(METHODE = 'UT_EQT' & A2EUTAX_W.CDTYPTB = '25');        
   WHEN(METHODE = 'UT_CON' & A2EUTAX_W.CDTYPTB = '26');        
   WHEN(METHODE = 'UT_TXT' & A2EUTAX_W.CDTYPTB = '27');        
   WHEN(METHODE = 'UT_COT' & A2EUTAX_W.CDTYPTB = '28');        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
         
 KA2151J_A2EUTAX_O = '';        
         
 /* INSERER LES DATA */        
 /* Cki le 21.06.05 = A2EUTAX est en T274 et les nouveaux segments        
    sont en T500 !!!!        
 */        
         
 SELECT;        
   WHEN(METHODE = 'VP_MAK') DO;        
       IEU001.CDDFSEG = 'CA2EUT11';        
       A2EUT11_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT11.PAR = ' ';        
       JWB001.LSTSERV = 'F1.1';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT11,SSA_A2EUT11);        
       SSA_A2EUT11.PAR = '(';        
       A2EUTAX_R = A2EUT11_R;        
     END;        
   WHEN(METHODE = 'VP_MOD') DO;        
       IEU001.CDDFSEG = 'CA2EUT12';        
       A2EUT12_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT12.PAR = ' ';        
       JWB001.LSTSERV = 'F1.2';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT12,SSA_A2EUT12);        
       SSA_A2EUT12.PAR = '(';        
       A2EUTAX_R = A2EUT12_R;        
     END;        
   WHEN(METHODE = 'VP_TYP') DO;        
       IEU001.CDDFSEG = 'CA2EUT13';        
       A2EUT13_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT13.PAR = ' ';        
       JWB001.LSTSERV = 'F1.3';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT13,SSA_A2EUT13);        
       SSA_A2EUT13.PAR = '(';        
       A2EUTAX_R = A2EUT13_R;        
     END;        
   WHEN(METHODE = 'VP_PRI') DO;        
       IEU001.CDDFSEG = 'CA2EUT14';        
       A2EUT14_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT14.PAR = ' ';        
       JWB001.LSTSERV = 'F1.4';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT14,SSA_A2EUT14);        
       SSA_A2EUT14.PAR = '(';        
       A2EUTAX_R = A2EUT14_R;        
     END;        
   WHEN(METHODE = 'VP_EQT') DO;        
       IEU001.CDDFSEG = 'CA2EUT15';        
       A2EUT15_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT15.PAR = ' ';        
       JWB001.LSTSERV = 'F1.5';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT15,SSA_A2EUT15);        
       SSA_A2EUT15.PAR = '(';        
       A2EUTAX_R = A2EUT15_R;        
     END;        
   WHEN(METHODE = 'VP_CON') DO;        
       IEU001.CDDFSEG = 'CA2EUT16';        
       A2EUT16_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT16.PAR = ' ';        
       JWB001.LSTSERV = 'F1.6';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT16,SSA_A2EUT16);        
       SSA_A2EUT16.PAR = '(';        
       A2EUTAX_R = A2EUT16_R;        
     END;        
   WHEN(METHODE = 'VP_TXT') DO;        
       IEU001.CDDFSEG = 'CA2EUT17';        
       A2EUT17_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT17.PAR = ' ';        
       JWB001.LSTSERV = 'F1.7';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT17,SSA_A2EUT17);        
       SSA_A2EUT17.PAR = '(';        
       A2EUTAX_R = A2EUT17_R;        
     END;        
   WHEN(METHODE = 'VP_COT') DO;        
       IEU001.CDDFSEG = 'CA2EUT18';        
       A2EUT18_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT18.PAR = ' ';        
       JWB001.LSTSERV = 'F1.8';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT18,SSA_A2EUT18);        
       SSA_A2EUT18.PAR = '(';        
       A2EUTAX_R = A2EUT18_R;        
     END;        
   WHEN(METHODE = 'UT_MAK') DO;        
       IEU001.CDDFSEG = 'CA2EUT21';        
       A2EUT21_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT21.PAR = ' ';        
       JWB001.LSTSERV = 'F1.9';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT21,SSA_A2EUT21);        
       SSA_A2EUT21.PAR = '(';        
       A2EUTAX_R = A2EUT21_R;        
     END;        
   WHEN(METHODE = 'UT_MOD') DO;        
       IEU001.CDDFSEG = 'CA2EUT22';        
       A2EUT22_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT22.PAR = ' ';        
       JWB001.LSTSERV = 'F1.10';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT22,SSA_A2EUT22);        
       SSA_A2EUT22.PAR = '(';        
       A2EUTAX_R = A2EUT22_R;        
     END;        
   WHEN(METHODE = 'UT_TYP') DO;        
       IEU001.CDDFSEG = 'CA2EUT23';        
       A2EUT23_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT23.PAR = ' ';        
       JWB001.LSTSERV = 'F1.11';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT23,SSA_A2EUT23);        
       SSA_A2EUT23.PAR = '(';        
       A2EUTAX_R = A2EUT23_R;        
     END;        
   WHEN(METHODE = 'UT_PRI') DO;        
       IEU001.CDDFSEG = 'CA2EUT24';        
       A2EUT24_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT24.PAR = ' ';        
       JWB001.LSTSERV = 'F1.12';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT24,SSA_A2EUT24);        
       SSA_A2EUT24.PAR = '(';        
       A2EUTAX_R = A2EUT24_R;        
     END;        
   WHEN(METHODE = 'UT_EQT') DO;        
       IEU001.CDDFSEG = 'CA2EUT25';        
       A2EUT25_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT25.PAR = ' ';        
       JWB001.LSTSERV = 'F1.13';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT25,SSA_A2EUT25);        
       SSA_A2EUT25.PAR = '(';        
       A2EUTAX_R = A2EUT25_R;        
     END;        
   WHEN(METHODE = 'UT_CON') DO;        
       IEU001.CDDFSEG = 'CA2EUT26';        
       A2EUT26_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT26.PAR = ' ';        
       JWB001.LSTSERV = 'F1.14';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT26,SSA_A2EUT26);        
       SSA_A2EUT26.PAR = '(';        
       A2EUTAX_R = A2EUT26_R;        
     END;        
   WHEN(METHODE = 'UT_TXT') DO;        
       IEU001.CDDFSEG = 'CA2EUT27';        
       A2EUT27_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT27.PAR = ' ';        
       JWB001.LSTSERV = 'F1.15';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT27,SSA_A2EUT27);        
       SSA_A2EUT27.PAR = '(';        
       A2EUTAX_R = A2EUT27_R;        
     END;        
   WHEN(METHODE = 'UT_COT') DO;        
       IEU001.CDDFSEG = 'CA2EUT28';        
       A2EUT28_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT28.PAR = ' ';        
       JWB001.LSTSERV = 'F1.16';        
       CALL XEU100(IEU001,FOUR,ISRT,DA215,A2EUT28,SSA_A2EUT28);        
       SSA_A2EUT28.PAR = '(';        
       A2EUTAX_R = A2EUT28_R;        
     END;        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
 IF DA215.STATUS ^= ''  THEN        
   DO;        
     CALL ERR_DL1;        
     RETURN;        
   END;        
         
 IF JWB001.CDTRACE = 9        
  & JWB001.CDRTPGM = '' THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => SEGMENT CREE =');        
     PUT SKIP DATA(A2EUTAX);        
   END;        
         
 /* MAJ DB INDEX DA216 => SI CREATION TYPE */        
 /* -------------------------------------- */        
         
 SELECT (METHODE);        
         
   WHEN('VP_TYP') DO;   #####################################        
         
     NOIDMAR_W = A2EUT13.NOIDMAR;        
     NOIDMOD_W = A2EUT13.NOIDMOD;        
     NOIDTYP_W = A2EUT13.NOIDTYP;        
     A2IXEUT_W = '';        
     A2IXEUT_W.CDTYIDX = '10';        
     A2IXEUT_W.LTIDX01 = NOIDTYP_W !! NOIDMOD_W !! NOIDMAR_W;        
     A2IXEUT_W.LTIDX02 = '';        
     CALL F1_INDEX;        
                        /* INDEX 11 => TEXTES VOITURES */        
         
     IF A2EUT13.TXTCLAS ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCLAS;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT13.TXTCATV ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCATV;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT13.TXTCARO ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCARO;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT13.TXTCARB ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCARB;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT13.TXTMOTE ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTMOTE;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
         
   END;        
         
   WHEN('UT_TYP') DO;   ########################################        
         
     NOIDMAR_W = A2EUT23.NOIDMAR;        
     NOIDMOD_W = A2EUT23.NOIDMOD;        
     NOIDTYP_W = A2EUT23.NOIDTYP;        
     A2IXEUT_W = '';        
     A2IXEUT_W.CDTYIDX = '20';        
     A2IXEUT_W.LTIDX01 = NOIDTYP_W !! NOIDMOD_W !! NOIDMAR_W;        
     A2IXEUT_W.LTIDX02 = '';        
         
     CALL F1_INDEX;        
                        /* INDEX 21 => TEXTES UTILITAIRES */        
         
     IF A2EUT23.TXTCLAS ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCLAS;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT23.TXTCATV ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCATV;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT23.TXTCARO ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCARO;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT23.TXTCARB ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCARB;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
     IF A2EUT23.TXTMOTE ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTMOTE;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F1_INDEX;        
       END;        
         
   END;        
   WHEN('VP_EQT') DO;   #####################################        
         
     NOIDADD_W = A2EUT15.NOIDADD;        
     NOIDEQT_W = A2EUT15.NOIDEQT;        
     NOIDTYP_W = A2EUT15.NOIDTYP;        
     A2IXEUT_W = '';        
     A2IXEUT_W.CDTYIDX = '12';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDADD_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F1_INDEX;        
   END;        
   WHEN('UT_EQT') DO;   ########################################        
         
     NOIDADD_W = A2EUT25.NOIDADD;        
     NOIDEQT_W = A2EUT25.NOIDEQT;        
     NOIDTYP_W = A2EUT25.NOIDTYP;        
     A2IXEUT_W = '';        
     A2IXEUT_W.CDTYIDX = '22';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDADD_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F1_INDEX;        
   END;        
   WHEN('VP_CON') DO;   #####################################        
         
     NOIDPAC_W = A2EUT16.NOIDPAC;        
     NOIDEQT_W = A2EUT16.NOIDEQT;        
     NOIDTYP_W = A2EUT16.NOIDTYP;        
     A2IXEUT_W = '';        
     A2IXEUT_W.CDTYIDX = '13';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDPAC_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F1_INDEX;        
   END;        
   WHEN('UT_CON') DO;   ########################################        
         
     NOIDPAC_W = A2EUT26.NOIDPAC;        
     NOIDEQT_W = A2EUT26.NOIDEQT;        
     NOIDTYP_W = A2EUT26.NOIDTYP;        
     A2IXEUT_W = '';        
     A2IXEUT_W.CDTYIDX = '23';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDPAC_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F1_INDEX;        
   END;        
   OTHER;        
 END;        
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F1';        
         
 CALL PT;        
 $END F1;        
         
 /*-------------------------------------------------------------------*/        
         
 F1_INDEX: PROC REORDER ;        
 TRACE = 'KA2151 ===> ' !! 'F1_INDEX';        
         
 CALL PT;        
 /*********************************************************************/        
 /* CREATION INDEX DA216                                              */        
 /*********************************************************************/        
         
 IEU001.CDDFSEG = 'CA2IXEUT';        
 A2IXEUT_R = A2IXEUT_W_R;        
 SSA_A2IXEUT.PAR = ' ';        
 JWB001.LSTSERV = 'F1_INDEX.1';        
 CALL XEU100(IEU001,FOUR,ISRT,DA216,A2IXEUT,SSA_A2IXEUT);        
         
 SSA_A2IXEUT.PAR = '(';        
         
 IF DA216.STATUS ^= '' THEN        
   DO;        
     IF A2IXEUT.CDTYIDX = '13'        
      ! A2IXEUT.CDTYIDX = '23'        
       THEN; ###########################################################        
       ELSE DO;        
         IF DA216.STATUS = 'II' THEN        
         DO;        
           IF JWB001.CDTRACE >= 5  THEN        
              PUT SKIP DATA(A2IXEUT,A2EUT13);        
         END;        
         ELSE DO;        
              CALL ERR_DL1;        
              RETURN;        
              END;        
            END;        
   END;        
         
 IF JWB001.CDTRACE = 9        
  & JWB001.CDRTPGM = '' THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => SEGMENT CREE =');        
     PUT SKIP DATA(A2IXEUT);        
   END;        
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F1_INDEX';        
         
 CALL PT;        
 $END F1_INDEX;        
         
 /*-------------------------------------------------------------------*/        
 /*-------------------------------------------------------------------*/        
         
 F2: PROC (METHODE) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F2';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE CONSULT_YY_XXX                                            */        
 /*     YY = VP         CONSULTER VOITURE PARTICULIERE                */        
 /*     YY = UT         CONSULTER UTILITAIRES                         */        
 /*    XXX = MAK        CONSULTER MARQUE              (T11,T21,T41)   */        
 /*    XXX = MOD        CONSULTER MODELE              (T12,T22,T42)   */        
 /*    XXX = TYP        CONSULTER TYPE                (T13,T23,T43)   */        
 /*    XXX = PRI        CONSULTER PRIX                (T14,T24,T44)   */        
 /*    XXX = EQT        CONSULTER EQUIPEMENTS         (T15,T25,T45)   */        
 /*    XXX = CON        CONSULTER CONTENU DES PACKS   (T16,T26,T46)   */        
 /*    XXX = TXT        CONSULTER TEXTES EQUIPEMENTS  (T17,T27,T47)   */        
 /*    XXX = COT        CONSULTER COTATIONS           (T18,T28,T48)   */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(06);        
 A2EUTAX_W_R = KA2151J_A2EUTAX_I; #########################        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP DATA(A2EUTAX_W);        
   END;        
         
 /* CHECKER LES DATA EN INPUT */        
         
 SELECT;        
   WHEN(METHODE = 'VP_MAK' & A2EUTAX_W.CDTYPTB = '11') DO;        
     IF JWB001.CDTRACE = 9  THEN        
       DO;        
         A2EUT11_R = KA2151J_A2EUTAX_I;        
         PUT SKIP LIST('A2EUT11.NOIDMAR=',A2EUT11.NOIDMAR);        
       END;        
     END;        
   WHEN(METHODE = 'VP_MOD' & A2EUTAX_W.CDTYPTB = '12');        
   WHEN(METHODE = 'VP_TYP' & A2EUTAX_W.CDTYPTB = '13');        
   WHEN(METHODE = 'VP_PRI' & A2EUTAX_W.CDTYPTB = '14');        
   WHEN(METHODE = 'VP_EQT' & A2EUTAX_W.CDTYPTB = '15');        
   WHEN(METHODE = 'VP_CON' & A2EUTAX_W.CDTYPTB = '16');        
   WHEN(METHODE = 'VP_TXT' & A2EUTAX_W.CDTYPTB = '17');        
   WHEN(METHODE = 'VP_COT' & A2EUTAX_W.CDTYPTB = '18');        
   WHEN(METHODE = 'UT_MAK' & A2EUTAX_W.CDTYPTB = '21');        
   WHEN(METHODE = 'UT_MOD' & A2EUTAX_W.CDTYPTB = '22');        
   WHEN(METHODE = 'UT_TYP' & A2EUTAX_W.CDTYPTB = '23');        
   WHEN(METHODE = 'UT_PRI' & A2EUTAX_W.CDTYPTB = '24');        
   WHEN(METHODE = 'UT_EQT' & A2EUTAX_W.CDTYPTB = '25');        
   WHEN(METHODE = 'UT_CON' & A2EUTAX_W.CDTYPTB = '26');        
   WHEN(METHODE = 'UT_TXT' & A2EUTAX_W.CDTYPTB = '27');        
   WHEN(METHODE = 'UT_COT' & A2EUTAX_W.CDTYPTB = '28');        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
         
 /* Cki le 21.06.05 = A2EUTAX est en T274 et les nouveaux segments        
    sont en T500 !!!!        
 */        
         
 SELECT;        
   WHEN(METHODE = 'VP_MAK') DO;        
       IEU001.CDDFSEG = 'CA2EUT11';        
       A2EUT11_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT11.VALUE1 = A2EUT11.NOIDMAR;        
       SSA_A2EUT11.VALUEF = '';        
       JWB001.LSTSERV = 'F2.1';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT11,SSA_A2EUT11);        
       A2EUTAX_R = A2EUT11_R;        
     END;        
   WHEN(METHODE = 'VP_MOD') DO;        
       IEU001.CDDFSEG = 'CA2EUT12';        
       A2EUT12_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT12.VALUE1 = A2EUT12.NOIDMAR;        
       SSA_A2EUT12.VALUE2 = A2EUT12.NOIDMOD;        
       SSA_A2EUT12.VALUEF = '';        
       JWB001.LSTSERV = 'F2.2';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT12,SSA_A2EUT12);        
       A2EUTAX_R = A2EUT12_R;        
     END;        
   WHEN(METHODE = 'VP_TYP') DO;        
       IEU001.CDDFSEG = 'CA2EUT13';        
       A2EUT13_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT13.VALUE1 = A2EUT13.NOIDMAR;        
       SSA_A2EUT13.VALUE2 = A2EUT13.NOIDMOD;        
       SSA_A2EUT13.VALUE3 = A2EUT13.NOIDTYP;        
       SSA_A2EUT13.VALUEF = '';        
       JWB001.LSTSERV = 'F2.3';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT13,SSA_A2EUT13);        
       IF DA215.STATUS = '' THEN        
         DO;        
       /*        
           IF A2EUT13.CDOMETH = ''        
            ! A2EUT13.CDDMETH = ''        
             THEN DO;        
                  END;        
       */        
           CALL INIT_CDETHIAS;        
         END;        
       A2EUTAX_R = A2EUT13_R;        
     END;        
   WHEN(METHODE = 'VP_PRI') DO;        
       IEU001.CDDFSEG = 'CA2EUT14';        
       A2EUT14_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT14.VALUE1 = A2EUT14.NOIDTYP;        
       SSA_A2EUT14.VALUE2 = A2EUT14.DATEDEB;        
       SSA_A2EUT14.VALUEF = '';        
       JWB001.LSTSERV = 'F2.4';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT14,SSA_A2EUT14);        
       A2EUTAX_R = A2EUT14_R;        
     END;        
   WHEN(METHODE = 'VP_EQT') DO;        
       IEU001.CDDFSEG = 'CA2EUT15';        
       A2EUT15_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT15.VALUE1 = A2EUT15.NOIDTYP;        
       SSA_A2EUT15.VALUE2 = A2EUT15.NOIDADD;        
       SSA_A2EUT15.VALUEF = '';        
       JWB001.LSTSERV = 'F2.5';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT15,SSA_A2EUT15);        
       A2EUTAX_R = A2EUT15_R;        
     END;        
   WHEN(METHODE = 'VP_CON') DO;        
       IEU001.CDDFSEG = 'CA2EUT16';        
       A2EUT16_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT16.VALUE1 = A2EUT16.NOIDTYP;        
       SSA_A2EUT16.VALUE2 = A2EUT16.NOIDPAC;        
       SSA_A2EUT16.VALUE3 = A2EUT16.NOIDEQT;        
       SSA_A2EUT16.VALUE4 = A2EUT16.DATEDEB;        
       SSA_A2EUT16.VALUEF = '';        
       JWB001.LSTSERV = 'F2.6';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT16,SSA_A2EUT16);        
       A2EUTAX_R = A2EUT16_R;        
     END;        
   WHEN(METHODE = 'VP_TXT') DO;        
       IEU001.CDDFSEG = 'CA2EUT17';        
       A2EUT17_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT17.VALUE1 = A2EUT17.NOIDEQT;        
       SSA_A2EUT17.VALUEF = '';        
       JWB001.LSTSERV = 'F2.7';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT17,SSA_A2EUT17);        
       A2EUTAX_R = A2EUT17_R;        
     END;        
   WHEN(METHODE = 'VP_COT') DO;        
       IEU001.CDDFSEG = 'CA2EUT18';        
       A2EUT18_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT18.VALUE1 = A2EUT18.NOIDTYP;        
       SSA_A2EUT18.VALUE2 = A2EUT18.PERIMAT;        
       SSA_A2EUT18.VALUEF = '';        
       JWB001.LSTSERV = 'F2.8';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT18,SSA_A2EUT18);        
       A2EUTAX_R = A2EUT18_R;        
     END;        
   WHEN(METHODE = 'UT_MAK') DO;        
       IEU001.CDDFSEG = 'CA2EUT21';        
       A2EUT21_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT21.VALUE1 = A2EUT21.NOIDMAR;        
       SSA_A2EUT21.VALUEF = '';        
       JWB001.LSTSERV = 'F2.9';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT21,SSA_A2EUT21);        
       A2EUTAX_R = A2EUT21_R;        
     END;        
   WHEN(METHODE = 'UT_MOD') DO;        
       IEU001.CDDFSEG = 'CA2EUT22';        
       A2EUT22_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT22.VALUE1 = A2EUT22.NOIDMAR;        
       SSA_A2EUT22.VALUE2 = A2EUT22.NOIDMOD;        
       SSA_A2EUT22.VALUEF = '';        
       JWB001.LSTSERV = 'F2.10';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT22,SSA_A2EUT22);        
       A2EUTAX_R = A2EUT22_R;        
     END;        
   WHEN(METHODE = 'UT_TYP') DO;        
       IEU001.CDDFSEG = 'CA2EUT23';        
       A2EUT23_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT23.VALUE1 = A2EUT23.NOIDMAR;        
       SSA_A2EUT23.VALUE2 = A2EUT23.NOIDMOD;        
       SSA_A2EUT23.VALUE3 = A2EUT23.NOIDTYP;        
       SSA_A2EUT23.VALUEF = '';        
       JWB001.LSTSERV = 'F2.11';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT23,SSA_A2EUT23);        
       A2EUTAX_R = A2EUT23_R;        
     END;        
   WHEN(METHODE = 'UT_PRI') DO;        
       IEU001.CDDFSEG = 'CA2EUT24';        
       A2EUT24_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT24.VALUE1 = A2EUT24.NOIDTYP;        
       SSA_A2EUT24.VALUE2 = A2EUT24.DATEDEB;        
       SSA_A2EUT24.VALUEF = '';        
       JWB001.LSTSERV = 'F2.12';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT24,SSA_A2EUT24);        
       A2EUTAX_R = A2EUT24_R;        
     END;        
   WHEN(METHODE = 'UT_EQT') DO;        
       IEU001.CDDFSEG = 'CA2EUT25';        
       A2EUT25_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT25.VALUE1 = A2EUT25.NOIDTYP;        
       SSA_A2EUT25.VALUE2 = A2EUT25.NOIDADD;        
       SSA_A2EUT25.VALUEF = '';        
       JWB001.LSTSERV = 'F2.13';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT25,SSA_A2EUT25);        
       A2EUTAX_R = A2EUT25_R;        
     END;        
   WHEN(METHODE = 'UT_CON') DO;        
       IEU001.CDDFSEG = 'CA2EUT26';        
       A2EUT26_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT26.VALUE1 = A2EUT26.NOIDTYP;        
       SSA_A2EUT26.VALUE2 = A2EUT26.NOIDPAC;        
       SSA_A2EUT26.VALUE3 = A2EUT26.NOIDEQT;        
       SSA_A2EUT26.VALUE4 = A2EUT26.DATEDEB;        
       SSA_A2EUT26.VALUEF = '';        
       JWB001.LSTSERV = 'F2.14';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT26,SSA_A2EUT26);        
       A2EUTAX_R = A2EUT26_R;        
     END;        
   WHEN(METHODE = 'UT_TXT') DO;        
       IEU001.CDDFSEG = 'CA2EUT27';        
       A2EUT27_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT27.VALUE1 = A2EUT27.NOIDEQT;        
       SSA_A2EUT27.VALUEF = '';        
       JWB001.LSTSERV = 'F2.15';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT27,SSA_A2EUT27);        
       A2EUTAX_R = A2EUT27_R;        
     END;        
   WHEN(METHODE = 'UT_COT') DO;        
       IEU001.CDDFSEG = 'CA2EUT28';        
       A2EUT28_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT28.VALUE1 = A2EUT28.NOIDTYP;        
       SSA_A2EUT28.VALUE2 = A2EUT28.PERIMAT;        
       SSA_A2EUT28.VALUEF = '';        
       JWB001.LSTSERV = 'F2.16';        
       CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT28,SSA_A2EUT28);        
       A2EUTAX_R = A2EUT28_R;        
     END;        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
 SELECT(DA215.STATUS);        
    WHEN ('')        
      KA2151J_A2EUTAX_O = A2EUTAX_R;        
    WHEN ('GE')        
      JWB001.CDRTPGM = 'NOTFOUND';        
    OTHER DO;        
      CALL ERR_DL1;        
      RETURN;        
    END;        
 END;        
         
 IF JWB001.CDTRACE = 9        
  & JWB001.CDRTPGM = '' THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => SEGMENT OUTPUT =');        
     PUT SKIP DATA(A2EUTAX);        
   END;        
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F2';        
         
 CALL PT;        
 $END F2;        
         
 /*-------------------------------------------------------------------*/        
 /*-------------------------------------------------------------------*/        
 /*-------------------------------------------------------------------*/        
         
 F3: PROC (METHODE) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F3';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE MODIF_YY_XXX                                              */        
 /*     YY = VP         MODIFIER VOITURE PARTICULIERE                 */        
 /*     YY = UT         MODIFIER UTILITAIRES                          */        
 /*    XXX = MAK        MODIFICATION MARQUE             (T11,T21,T41) */        
 /*    XXX = MOD        MODIFICATION MODELE             (T12,T22,T42) */        
 /*    XXX = TYP        MODIFICATION TYPE               (T13,T23,T43) */        
 /*    XXX = PRI        MODIFICATION PRIX               (T14,T24,T44) */        
 /*    XXX = EQT        MODIFICATION EQUIPEMENTS        (T15,T25,T45) */        
 /*    XXX = CON        MODIFICATION CONTENU DES PACKS  (T16,T26,T46) */        
 /*    XXX = TXT        MODIFICATION TEXTES EQUIPEMENTS (T17,T27,T47) */        
 /*    XXX = COT        MODIFICATION COTATIONS          (T18,T28,T48) */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(06);        
 A2EUTAX_W_R = KA2151J_A2EUTAX_I;        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP DATA(A2EUTAX_W);        
   END;        
         
 /* CHECKER LES DATA EN INPUT */        
         
 SELECT;        
   WHEN(METHODE = 'VP_MAK' & A2EUTAX_W.CDTYPTB = '11');        
   WHEN(METHODE = 'VP_MOD' & A2EUTAX_W.CDTYPTB = '12');        
   WHEN(METHODE = 'VP_TYP' & A2EUTAX_W.CDTYPTB = '13');        
   WHEN(METHODE = 'VP_PRI' & A2EUTAX_W.CDTYPTB = '14');        
   WHEN(METHODE = 'VP_EQT' & A2EUTAX_W.CDTYPTB = '15');        
   WHEN(METHODE = 'VP_CON' & A2EUTAX_W.CDTYPTB = '16');        
   WHEN(METHODE = 'VP_TXT' & A2EUTAX_W.CDTYPTB = '17');        
   WHEN(METHODE = 'VP_COT' & A2EUTAX_W.CDTYPTB = '18');        
   WHEN(METHODE = 'UT_MAK' & A2EUTAX_W.CDTYPTB = '21');        
   WHEN(METHODE = 'UT_MOD' & A2EUTAX_W.CDTYPTB = '22');        
   WHEN(METHODE = 'UT_TYP' & A2EUTAX_W.CDTYPTB = '23');        
   WHEN(METHODE = 'UT_PRI' & A2EUTAX_W.CDTYPTB = '24');        
   WHEN(METHODE = 'UT_EQT' & A2EUTAX_W.CDTYPTB = '25') DO;        
       IF JWB001.CDTRACE = 9  THEN        
         DO;        
           A2EUT25_R = KA2151J_A2EUTAX_I;        
           PUT SKIP LIST('Les donnees e mettre e jour en DB...');        
           PUT SKIP LIST('A2EUT25.CDTYPTB=',A2EUT25.CDTYPTB);        
           PUT SKIP LIST('A2EUT25.NOIDADD=',A2EUT25.NOIDADD);        
           PUT SKIP LIST('A2EUT25.NOIDEQT=',A2EUT25.NOIDEQT);        
         END;        
     END;        
   WHEN(METHODE = 'UT_CON' & A2EUTAX_W.CDTYPTB = '26');        
   WHEN(METHODE = 'UT_TXT' & A2EUTAX_W.CDTYPTB = '27');        
   WHEN(METHODE = 'UT_COT' & A2EUTAX_W.CDTYPTB = '28');        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
         
 KA2151J_A2EUTAX_O = '';        
         
 /* Cki le 21.06.05 = A2EUTAX est en T274 et les nouveaux segments        
    sont en T500 !!!!        
 */        
         
 SELECT;        
   WHEN(METHODE = 'VP_MAK') DO;        
       IEU001.CDDFSEG = 'CA2EUT11';        
       A2EUT11_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT11.VALUE1 = A2EUT11.NOIDMAR;        
       SSA_A2EUT11.VALUEF = '';        
       JWB001.LSTSERV = 'F3.1';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT11,SSA_A2EUT11);        
       A2EUTAX_R = A2EUT11_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT11';        
               A2EUT11_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.11';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT11);        
               KA2151J_A2EUTAX_O = A2EUT11_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'VP_MOD') DO;        
       IEU001.CDDFSEG = 'CA2EUT12';        
       A2EUT12_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT12.VALUE1 = A2EUT12.NOIDMAR;        
       SSA_A2EUT12.VALUE2 = A2EUT12.NOIDMOD;        
       SSA_A2EUT12.VALUEF = '';        
       JWB001.LSTSERV = 'F3.2';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT12,SSA_A2EUT12);        
       A2EUTAX_R = A2EUT12_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT12';        
               A2EUT12_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.21';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT12);        
               KA2151J_A2EUTAX_O = A2EUT12_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'VP_TYP') DO;        
       IEU001.CDDFSEG = 'CA2EUT13';        
       A2EUT13_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT13.VALUE1 = A2EUT13.NOIDMAR;        
       SSA_A2EUT13.VALUE2 = A2EUT13.NOIDMOD;        
       SSA_A2EUT13.VALUE3 = A2EUT13.NOIDTYP;        
       SSA_A2EUT13.VALUEF = '';        
       JWB001.LSTSERV = 'F3.3';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT13,SSA_A2EUT13);        
       A2EUTAX_R = A2EUT13_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT13';        
               A2EUT13_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.31';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT13);        
               KA2151J_A2EUTAX_O = A2EUT13_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'VP_PRI') DO;        
       IEU001.CDDFSEG = 'CA2EUT14';        
       A2EUT14_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT14.VALUE1 = A2EUT14.NOIDTYP;        
       SSA_A2EUT14.VALUE2 = A2EUT14.DATEDEB;        
       SSA_A2EUT14.VALUEF = '';        
       JWB001.LSTSERV = 'F3.4';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT14,SSA_A2EUT14);        
       A2EUTAX_R = A2EUT14_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT14';        
               A2EUT14_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.41';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT14);        
               KA2151J_A2EUTAX_O = A2EUT14_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'VP_EQT') DO;        
       IEU001.CDDFSEG = 'CA2EUT15';        
       A2EUT15_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT15.VALUE1 = A2EUT15.NOIDTYP;        
       SSA_A2EUT15.VALUE2 = A2EUT15.NOIDADD;        
       SSA_A2EUT15.VALUEF = '';        
       JWB001.LSTSERV = 'F3.5';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT15,SSA_A2EUT15);        
       A2EUTAX_R = A2EUT15_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT15';        
               A2EUT15_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.51';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT15);        
               KA2151J_A2EUTAX_O = A2EUT15_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'VP_CON') DO;        
       IEU001.CDDFSEG = 'CA2EUT16';        
       A2EUT16_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT16.VALUE1 = A2EUT16.NOIDTYP;        
       SSA_A2EUT16.VALUE2 = A2EUT16.NOIDPAC;        
       SSA_A2EUT16.VALUE3 = A2EUT16.NOIDEQT;        
       SSA_A2EUT16.VALUE4 = A2EUT16.DATEDEB;        
       SSA_A2EUT16.VALUEF = '';        
       JWB001.LSTSERV = 'F3.6';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT16,SSA_A2EUT16);        
       A2EUTAX_R = A2EUT16_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT16';        
               A2EUT16_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.61';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT16);        
               KA2151J_A2EUTAX_O = A2EUT16_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'VP_TXT') DO;        
       IEU001.CDDFSEG = 'CA2EUT17';        
       A2EUT17_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT17.VALUE1 = A2EUT17.NOIDEQT;        
       SSA_A2EUT17.VALUEF = '';        
       JWB001.LSTSERV = 'F3.7';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT17,SSA_A2EUT17);        
       A2EUTAX_R = A2EUT17_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT17';        
               A2EUT17_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.71';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT17);        
               KA2151J_A2EUTAX_O = A2EUT17_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'VP_COT') DO;        
       IEU001.CDDFSEG = 'CA2EUT18';        
       A2EUT18_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT18.VALUE1 = A2EUT18.NOIDTYP;        
       SSA_A2EUT18.VALUE2 = A2EUT18.PERIMAT;        
       SSA_A2EUT18.VALUEF = '';        
       JWB001.LSTSERV = 'F3.8';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT18,SSA_A2EUT18);        
       A2EUTAX_R = A2EUT18_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT18';        
               A2EUT18_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.81';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT18);        
               KA2151J_A2EUTAX_O = A2EUT18_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_MAK') DO;        
       IEU001.CDDFSEG = 'CA2EUT21';        
       A2EUT21_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT21.VALUE1 = A2EUT21.NOIDMAR;        
       SSA_A2EUT21.VALUEF = '';        
       JWB001.LSTSERV = 'F3.9';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT21,SSA_A2EUT21);        
       A2EUTAX_R = A2EUT21_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT21';        
               A2EUT21_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.91';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT21);        
               KA2151J_A2EUTAX_O = A2EUT21_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_MOD') DO;        
       IEU001.CDDFSEG = 'CA2EUT22';        
       A2EUT22_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT22.VALUE1 = A2EUT22.NOIDMAR;        
       SSA_A2EUT22.VALUE2 = A2EUT22.NOIDMOD;        
       SSA_A2EUT22.VALUEF = '';        
       JWB001.LSTSERV = 'F3.10';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT22,SSA_A2EUT22);        
       A2EUTAX_R = A2EUT22_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT22';        
               A2EUT22_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.101';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT22);        
               KA2151J_A2EUTAX_O = A2EUT22_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_TYP') DO;        
       IEU001.CDDFSEG = 'CA2EUT23';        
       A2EUT23_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT23.VALUE1 = A2EUT23.NOIDMAR;        
       SSA_A2EUT23.VALUE2 = A2EUT23.NOIDMOD;        
       SSA_A2EUT23.VALUE3 = A2EUT23.NOIDTYP;        
       SSA_A2EUT23.VALUEF = '';        
       JWB001.LSTSERV = 'F3.11';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT23,SSA_A2EUT23);        
       A2EUTAX_R = A2EUT23_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT23';        
               A2EUT23_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.111';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT23);        
               KA2151J_A2EUTAX_O = A2EUT23_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_PRI') DO;        
       IEU001.CDDFSEG = 'CA2EUT24';        
       A2EUT24_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT24.VALUE1 = A2EUT24.NOIDTYP;        
       SSA_A2EUT24.VALUE2 = A2EUT24.DATEDEB;        
       SSA_A2EUT24.VALUEF = '';        
       JWB001.LSTSERV = 'F3.12';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT24,SSA_A2EUT24);        
       A2EUTAX_R = A2EUT24_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT24';        
               A2EUT24_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.121';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT24);        
               KA2151J_A2EUTAX_O = A2EUT24_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_EQT') DO;        
       IEU001.CDDFSEG = 'CA2EUT25';        
       A2EUT25_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT25.VALUE1 = A2EUT25.NOIDTYP;        
       SSA_A2EUT25.VALUE2 = A2EUT25.NOIDADD;        
       SSA_A2EUT25.VALUEF = '';        
       JWB001.LSTSERV = 'F3.13';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT25,SSA_A2EUT25);        
       A2EUTAX_R = A2EUT25_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT25';        
               A2EUT25_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.131';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT25);        
               KA2151J_A2EUTAX_O = A2EUT25_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_CON') DO;        
       IEU001.CDDFSEG = 'CA2EUT26';        
       A2EUT26_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT26.VALUE1 = A2EUT26.NOIDTYP;        
       SSA_A2EUT26.VALUE2 = A2EUT26.NOIDPAC;        
       SSA_A2EUT26.VALUE3 = A2EUT26.NOIDEQT;        
       SSA_A2EUT26.VALUE4 = A2EUT26.DATEDEB;        
       SSA_A2EUT26.VALUEF = '';        
       JWB001.LSTSERV = 'F3.14';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT26,SSA_A2EUT26);        
       A2EUTAX_R = A2EUT26_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT26';        
               A2EUT26_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.141';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT26);        
               KA2151J_A2EUTAX_O = A2EUT26_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_TXT') DO;        
       IEU001.CDDFSEG = 'CA2EUT27';        
       A2EUT27_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT27.VALUE1 = A2EUT27.NOIDEQT;        
       SSA_A2EUT27.VALUEF = '';        
       JWB001.LSTSERV = 'F3.15';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT27,SSA_A2EUT27);        
       A2EUTAX_R = A2EUT27_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT27';        
               A2EUT27_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.151';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT27);        
               KA2151J_A2EUTAX_O = A2EUT27_R;        
             END;        
         END;        
     END;        
   WHEN(METHODE = 'UT_COT') DO;        
       IEU001.CDDFSEG = 'CA2EUT28';        
       A2EUT28_R = KA2151J_A2EUTAX_I;        
       SSA_A2EUT28.VALUE1 = A2EUT28.NOIDTYP;        
       SSA_A2EUT28.VALUE2 = A2EUT28.PERIMAT;        
       SSA_A2EUT28.VALUEF = '';        
       JWB001.LSTSERV = 'F3.16';        
       CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUT28,SSA_A2EUT28);        
       A2EUTAX_R = A2EUT28_R;        
       IF DA215.STATUS = ''  THEN        
         DO;        
           A2EUTAX_OLD_R = A2EUTAX_R; ########################################        
           IF A2EUTAX_R ^= A2EUTAX_W_R  THEN        
             DO;        
               IEU001.CDDFSEG = 'CA2EUT28';        
               A2EUT28_R = A2EUTAX_W_R;        
               JWB001.LSTSERV = 'F3.161';        
               CALL XEU100(IEU001,THREE,REPL,DA215,A2EUT28);        
               KA2151J_A2EUTAX_O = A2EUT28_R;        
             END;        
         END;        
     END;        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
 IF DA215.STATUS ^= ''  THEN        
   DO;        
     CALL ERR_DL1;        
     RETURN;        
   END;        
         
 IF JWB001.CDTRACE = 9        
  & JWB001.CDRTPGM = '' THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => SEGMENT OUTPUT =');        
     PUT SKIP DATA(A2EUTAX);        
   END;        
         
 /* MAJ DB INDEX DA216 => SI MODIFICATION TYPE */        
 /* -------------------------------------------*/        
         
 SELECT (METHODE);        
         
   WHEN('VP_TYP') DO;        
         
     A2EUT13_R = A2EUTAX_OLD_R;   #######################################        
         
     NOIDMAR_W = A2EUT13.NOIDMAR;        
     NOIDMOD_W = A2EUT13.NOIDMOD;        
     NOIDTYP_W = A2EUT13.NOIDTYP;        
         
     OLDTEXT_W = A2EUT13.TXTCLAS; ######################        
     A2EUT13_R = A2EUTAX_W_R;       ############################        
                        /* INDEX 11 => TEXTES VOITURES */        
         
     IF A2EUT13.TXTCLAS ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCLAS;        
         CALL F1_INDEX;        
       END;        
     A2EUT13_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT13.TXTCATV; ######################        
     A2EUT13_R = A2EUTAX_W_R;       ############################        
     IF A2EUT13.TXTCATV ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCATV;        
         CALL F1_INDEX;        
       END;        
     A2EUT13_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT13.TXTCARO; ######################        
     A2EUT13_R = A2EUTAX_W_R;       ############################        
     IF A2EUT13.TXTCARO ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCARO;        
         CALL F1_INDEX;        
       END;        
     A2EUT13_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT13.TXTCARB; ######################        
     A2EUT13_R = A2EUTAX_W_R;       ############################        
     IF A2EUT13.TXTCARB ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCARB;        
         CALL F1_INDEX;        
       END;        
     A2EUT13_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT13.TXTMOTE; ######################        
     A2EUT13_R = A2EUTAX_W_R;       ############################        
     IF A2EUT13.TXTMOTE ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTMOTE;        
         CALL F1_INDEX;        
       END;        
   END;        
         
   WHEN('UT_TYP') DO;        
         
     A2EUT23_R = A2EUTAX_OLD_R;   #######################################        
         
     NOIDMAR_W = A2EUT23.NOIDMAR;        
     NOIDMOD_W = A2EUT23.NOIDMOD;        
     NOIDTYP_W = A2EUT23.NOIDTYP;        
         
     OLDTEXT_W = A2EUT23.TXTCLAS; ######################        
     A2EUT23_R = A2EUTAX_W_R;       ############################        
                        /* INDEX 21 => TEXTES UTILITAIRES */        
         
     IF A2EUT23.TXTCLAS ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCLAS;        
         CALL F1_INDEX;        
       END;        
     A2EUT23_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT23.TXTCATV; ######################        
     A2EUT23_R = A2EUTAX_W_R;       ############################        
     IF A2EUT23.TXTCATV ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCATV;        
         CALL F1_INDEX;        
       END;        
     A2EUT23_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT23.TXTCARO; ######################        
     A2EUT23_R = A2EUTAX_W_R;       ############################        
     IF A2EUT23.TXTCARO ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCARO;        
         CALL F1_INDEX;        
       END;        
     A2EUT23_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT23.TXTCARB; ######################        
     A2EUT23_R = A2EUTAX_W_R;       ############################        
     IF A2EUT23.TXTCARB ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCARB;        
         CALL F1_INDEX;        
       END;        
     A2EUT23_R = A2EUTAX_OLD_R;   #######################################        
     OLDTEXT_W = A2EUT23.TXTMOTE; ######################        
     A2EUT23_R = A2EUTAX_W_R;       ############################        
     IF A2EUT23.TXTMOTE ^= OLDTEXT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = OLDTEXT_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTMOTE;        
         CALL F1_INDEX;        
       END;        
   END;        
         
   WHEN('VP_EQT') DO;   #####################################        
         
     A2EUT15_R = A2EUTAX_OLD_R;####################################        
     NOIDADD_W = A2EUT15.NOIDADD;        
     NOIDTYP_W = A2EUT15.NOIDTYP;        
         
     OLDNEQT_W = A2EUT15.NOIDEQT;        
     A2EUT15_R = A2EUTAX_W_R;       ############################        
     NOIDEQT_W = A2EUT15.NOIDEQT;        
     IF NOIDEQT_W ^= OLDNEQT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '12';        
         A2IXEUT_W.LTIDX01 = OLDNEQT_W !! NOIDADD_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDADD_W;        
         CALL F1_INDEX;        
       END;        
   END;        
         
   WHEN('UT_EQT') DO;   ########################################        
         
     A2EUT25_R = A2EUTAX_OLD_R;####################################        
     NOIDADD_W = A2EUT25.NOIDADD;        
     NOIDTYP_W = A2EUT25.NOIDTYP;        
     OLDNEQT_W = A2EUT25.NOIDEQT;        
     A2EUT25_R = A2EUTAX_W_R;       ############################        
     NOIDEQT_W = A2EUT25.NOIDEQT;        
     IF NOIDEQT_W ^= OLDNEQT_W THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '22';        
         A2IXEUT_W.LTIDX01 = OLDNEQT_W !! NOIDADD_W;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
         A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDADD_W;        
         CALL F1_INDEX;        
       END;        
         
   END;        
   /* 'VP_CON' et 'UT_CON' NE SE MODIFIENT PAS .... */        
   OTHER;        
 END;        
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F3';        
         
 CALL PT;        
 $END F3;        
         
 /*-------------------------------------------------------------------*/        
 /*-------------------------------------------------------------------*/        
         
 F4: PROC (METHODE) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F4';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE SUPPR_YY_XXX                                              */        
 /*     YY = VP         SUPPRIMER VOITURE PARTICULIERE                */        
 /*     YY = UT         SUPPRIMER UTILITAIRES                         */        
 /*    XXX = MAK        SUPPRESSION MARQUE             (T11,T21,T41)  */        
 /*    XXX = MOD        SUPPRESSION MODELE             (T12,T22,T42)  */        
 /*    XXX = TYP        SUPPRESSION TYPE               (T13,T23,T43)  */        
 /*    XXX = PRI        SUPPRESSION PRIX               (T14,T24,T44)  */        
 /*    XXX = EQT        SUPPRESSION EQUIPEMENTS        (T15,T25,T45)  */        
 /*    XXX = CON        SUPPRESSION CONTENU DES PACKS  (T16,T26,T46)  */        
 /*    XXX = TXT        SUPPRESSION TEXTES EQUIPEMENTS (T17,T27,T47)  */        
 /*    XXX = COT        SUPPRESSION COTATIONS          (T18,T28,T48)  */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(06);        
 A2EUTAX_W_R = KA2151J_A2EUTAX_I;        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP DATA(A2EUTAX_W);        
   END;        
         
 /* CHECKER LES DATA EN INPUT */        
         
 SELECT;        
   WHEN(METHODE = 'VP_MAK' & A2EUTAX_W.CDTYPTB = '11');        
   WHEN(METHODE = 'VP_MOD' & A2EUTAX_W.CDTYPTB = '12');        
   WHEN(METHODE = 'VP_TYP' & A2EUTAX_W.CDTYPTB = '13');        
   WHEN(METHODE = 'VP_PRI' & A2EUTAX_W.CDTYPTB = '14');        
   WHEN(METHODE = 'VP_EQT' & A2EUTAX_W.CDTYPTB = '15');        
   WHEN(METHODE = 'VP_CON' & A2EUTAX_W.CDTYPTB = '16');        
   WHEN(METHODE = 'VP_TXT' & A2EUTAX_W.CDTYPTB = '17');        
   WHEN(METHODE = 'VP_COT' & A2EUTAX_W.CDTYPTB = '18');        
   WHEN(METHODE = 'UT_MAK' & A2EUTAX_W.CDTYPTB = '21');        
   WHEN(METHODE = 'UT_MOD' & A2EUTAX_W.CDTYPTB = '22');        
   WHEN(METHODE = 'UT_TYP' & A2EUTAX_W.CDTYPTB = '23');        
   WHEN(METHODE = 'UT_PRI' & A2EUTAX_W.CDTYPTB = '24');        
   WHEN(METHODE = 'UT_EQT' & A2EUTAX_W.CDTYPTB = '25');        
   WHEN(METHODE = 'UT_CON' & A2EUTAX_W.CDTYPTB = '26');        
   WHEN(METHODE = 'UT_TXT' & A2EUTAX_W.CDTYPTB = '27');        
   WHEN(METHODE = 'UT_COT' & A2EUTAX_W.CDTYPTB = '28');        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
         
 KA2151J_A2EUTAX_O = '';        
         
 IEU001.CDDFSEG = 'CA2EUTAX';        
 SSA_A2EUTAX.VALUET = A2EUTAX_W.CDTYPTB;        
 SSA_A2EUTAX.VALUE1 = A2EUTAX_W.CDCLETB;        
         
 JWB001.LSTSERV = 'F4.1';        
 CALL XEU100(IEU001,FOUR,GHU,DA215,A2EUTAX,SSA_A2EUTAX);        
         
 IF DA215.STATUS = ''  THEN        
   DO;        
     A2EUTAX_OLD_R = A2EUTAX_R; #########################################        
     JWB001.LSTSERV = 'F4.2';        
     CALL XEU100(IEU001,THREE,DLET,DA215,A2EUTAX);        
   END;        
         
 IF DA215.STATUS ^= ''  THEN        
   DO;        
     CALL ERR_DL1;        
     RETURN;        
   END;        
         
 /* MAJ DB INDEX DA216 => SI SUPPRESSION TYPE */        
 /* ------------------------------------------*/        
         
 SELECT (METHODE);        
         
   WHEN('VP_TYP') DO;   #####################################        
         
     A2EUT13_R = A2EUTAX_OLD_R;#####################################        
         
     NOIDMAR_W = A2EUT13.NOIDMAR;        
     NOIDMOD_W = A2EUT13.NOIDMOD;        
     NOIDTYP_W = A2EUT13.NOIDTYP;        
         
     A2IXEUT_W.CDTYIDX= '10';        
     A2IXEUT_W.LTIDX01= NOIDTYP_W !! NOIDMOD_W !! NOIDMAR_W;        
     A2IXEUT_W.LTIDX02= '';        
     CALL F4_INDEX;        
                        /* INDEX 11 => TEXTES VOITURES */        
         
     IF A2EUT13.TXTCLAS ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCLAS;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT13.TXTCATV ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCATV;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT13.TXTCARO ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCARO;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT13.TXTCARB ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTCARB;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT13.TXTMOTE ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT13.TXTMOTE;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
   END;        
         
   WHEN('UT_TYP') DO;   ########################################        
         
     A2EUT23_R = A2EUTAX_OLD_R;#####################################        
         
     NOIDMAR_W = A2EUT23.NOIDMAR;        
     NOIDMOD_W = A2EUT23.NOIDMOD;        
     NOIDTYP_W = A2EUT23.NOIDTYP;        
         
     A2IXEUT_W.CDTYIDX= '20';        
     A2IXEUT_W.LTIDX01 = NOIDTYP_W !! NOIDMOD_W !! NOIDMAR_W;        
     A2IXEUT_W.LTIDX02 = '';        
     CALL F4_INDEX;        
                        /* INDEX 21 => TEXTES UTILITAIRES */        
         
     IF A2EUT23.TXTCLAS ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCLAS;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT23.TXTCATV ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCATV;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT23.TXTCARO ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCARO;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT23.TXTCARB ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '21';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTCARB;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
     IF A2EUT23.TXTMOTE ^= '' THEN        
       DO;        
         A2IXEUT_W = '';        
         A2IXEUT_W.CDTYIDX = '11';        
         A2IXEUT_W.LTIDX01 = A2EUT23.TXTMOTE;        
         A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
         CALL F4_INDEX;        
       END;        
         
   END;        
         
   WHEN('VP_EQT') DO;   #####################################        
         
     A2EUT15_R = A2EUTAX_OLD_R;#####################################        
     NOIDADD_W = A2EUT15.NOIDADD;        
     NOIDEQT_W = A2EUT15.NOIDEQT;        
     NOIDTYP_W = A2EUT15.NOIDTYP;        
         
     A2IXEUT_W.CDTYIDX = '12';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDADD_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F4_INDEX;        
   END;        
         
   WHEN('UT_EQT') DO;   ########################################        
         
     A2EUT25_R = A2EUTAX_OLD_R;#####################################        
         
     NOIDADD_W = A2EUT25.NOIDADD;        
     NOIDEQT_W = A2EUT25.NOIDEQT;        
     NOIDTYP_W = A2EUT25.NOIDTYP;        
         
     A2IXEUT_W.CDTYIDX = '22';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDADD_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F4_INDEX;        
   END;        
         
   WHEN('VP_CON') DO;   #####################################        
         
     A2EUT16_R = A2EUTAX_OLD_R;#####################################        
     NOIDPAC_W = A2EUT16.NOIDPAC;        
     NOIDEQT_W = A2EUT16.NOIDEQT;        
     NOIDTYP_W = A2EUT16.NOIDTYP;        
         
     A2IXEUT_W.CDTYIDX = '13';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDPAC_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F4_INDEX;        
   END;        
         
   WHEN('UT_CON') DO;   ########################################        
         
     A2EUT26_R = A2EUTAX_OLD_R;#####################################        
         
     NOIDPAC_W = A2EUT26.NOIDPAC;        
     NOIDEQT_W = A2EUT26.NOIDEQT;        
     NOIDTYP_W = A2EUT26.NOIDTYP;        
         
     A2IXEUT_W.CDTYIDX = '23';        
     A2IXEUT_W.LTIDX01 = NOIDEQT_W !! NOIDPAC_W;        
     A2IXEUT_W.LTIDX02 = NOIDTYP_W;        
     CALL F4_INDEX;        
   END;        
   OTHER;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F4';        
         
 CALL PT;        
 $END F4;        
         
 /*-------------------------------------------------------------------*/        
 F4_INDEX: PROC REORDER ;        
 TRACE = 'KA2151 ===> ' !! 'F4_INDEX';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE SUPPR_YY_TYP                                              */        
 /*     YY = VP     CONSULTATION INDEX VOITURES                       */        
 /*     YY = UT     CONSULTATION INDEX UTILITAIRES                    */        
 /*********************************************************************/        
 IEU001.CDDFSEG = 'CA2IXEUT';        
 SSA_A2IXEUT.VALUET = A2IXEUT_W.CDTYIDX;        
 SSA_A2IXEUT.VALUE1 = A2IXEUT_W.LTIDX01;        
 SSA_A2IXEUT.VALUE2 = A2IXEUT_W.LTIDX02;        
         
 JWB001.LSTSERV = 'F4_INDEX.1';        
 CALL XEU100(IEU001,FOUR,GHU,DA216,A2IXEUT,SSA_A2IXEUT);        
         
 IF DA216.STATUS = ''  THEN        
   DO;        
     JWB001.LSTSERV = 'F4_INDEX.2';        
     CALL XEU100(IEU001,THREE,DLET,DA216,A2IXEUT);        
     IF DA216.STATUS ^= ''  THEN        
       DO;        
         CALL ERR_DL1;        
         RETURN;        
       END;        
   END;        
 ELSE        
   IF JWB001.CDTRACE >= 5  THEN        
      PUT SKIP LIST('Erreur delete index : cle pas le !',SSA_A2IXEUT);        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F4_INDEX';        
         
 CALL PT;        
 $END F4_INDEX;        
         
 /*-------------------------------------------------------------------*/        
 /*-------------------------------------------------------------------*/        
         
 F5: PROC (METHODE) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F5';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE EXPLO_1P_YY_XXX                                           */        
 /*         EXPLO_PS_YY_XXX                                           */        
 /*         EXPLO_PP_YY_XXX                                           */        
 /*     YY = VP         EXPLO VOITURE PARTICULIERE                    */        
 /*     YY = UT         EXPLO UTILITAIRES                             */        
 /*    XXX = MAK        EXPLO MARQUE                                  */        
 /*    XXX = MOD        EXPLO MODELE                                  */        
 /*    XXX = TYP        EXPLO TYPE                                    */        
 /*    XXX = EQT        EXPLO EQUIPEMENTS                             */        
 /*    XXX = CON        EXPLO CONTENU DES PACKS                       */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(03);        
         
 SELECT(METHODE);        
   WHEN('MAK') CALL F5_MAK;        
   WHEN('MOD') CALL F5_MOD;        
   WHEN('TYP') CALL F5_TYP;        
   WHEN('EQT') CALL F5_EQT;        
   WHEN('CON') CALL F5_CON;        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '001';        
       RETURN;        
     END;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F5';        
         
 CALL PT;        
 $END F5;        
         
 /*-------------------------------------------------------------------*/        
         
 F5_MAK: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F5_MAK';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE EXPLO_1P_XX_MAK  EXPLORATION PREMIERE PAGE MARQUE         */        
 /*         EXPLO_PS_XX_MAK  EXPLORATION MARQUE PAGE SUIVANTE         */        
 /*         EXPLO_PP_XX_MAK  EXPLORATION MARQUE PAGE PRECEDENTE       */        
 /* YY  =  VP => VOITURES PARTICULIERES                               */        
 /* YY  =  UT => UTILITAIRES                                          */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(02);        
 DCL  LIBMARQ_W         CHAR(40);        
 DCL  TESTLIB_W         CHAR(40) VAR;        
 DCL  TBEGCOD_W(16)     BIT(1);        
 DCL  CDSPOSE_W         CHAR(1);        
         
 METHODE = SUBSTR(JWB001.LTNMMTH,10,2);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP LIST('CDTYPTB=',KA2151J_EXPMAK_I.CDTYPTB);        
     PUT SKIP LIST('NBITEXP=',KA2151J_EXPMAK_I.NBITEXP);        
     PUT SKIP LIST('NOIDMAR=',KA2151J_EXPMAK_I.NOIDMAR);        
     PUT SKIP LIST('LTMARQU=',KA2151J_EXPMAK_I.LTMARQU);        
     PUT SKIP LIST('ANNECTR=',KA2151J_EXPMAK_I.ANNECTR);        
     PUT SKIP LIST('CDTTERR=',KA2151J_EXPMAK_I.CDTTERR);        
     PUT SKIP LIST('CDSPORT=',KA2151J_EXPMAK_I.CDSPORT);        
     PUT SKIP LIST('CDSPOSE=',KA2151J_EXPMAK_I.CDSPOSE);        
     PUT SKIP LIST('TXTCLAS=',KA2151J_EXPMAK_I.TXTCLAS);        
     PUT SKIP LIST('TXTCATV=',KA2151J_EXPMAK_I.TXTCATV);        
     PUT SKIP LIST('TXTCARO=',KA2151J_EXPMAK_I.TXTCARO);        
     PUT SKIP LIST('TXTCARB=',KA2151J_EXPMAK_I.TXTCARB);        
     PUT SKIP LIST('LIBMARQ=',KA2151J_EXPMAK_I.LIBMARQ);        
     PUT SKIP LIST('NOUVEAU=',KA2151J_EXPMAK_I.NOUVEAU);        
   END;        
         
 IF KA2151J_EXPMAK_I.NBITEXP = 0  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '007';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPMAK_I.NBITEXP > 50  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '008';        
     RETURN;        
   END;        
         
 IF ( METHODE = 'VP' & KA2151J_EXPMAK_I.CDTYPTB ^= '11' )        
  ! ( METHODE = 'UT' & KA2151J_EXPMAK_I.CDTYPTB ^= '21' ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF SUBSTR(JWB001.LTNMMTH,1,8) ^= 'EXPLO_1P'        
  & ( KA2151J_EXPMAK_I.NOIDMAR = 0        
  !   KA2151J_EXPMAK_I.LTMARQU = '') THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '009';        
     RETURN;        
   END;        
         
 KA2151J_EXPMAK_O = '';        
         
 /* PREMIERE LECTURE AVANT BOUCLE : SUR INDEX 2 */        
 /* ------------------------------------------- */        
 IEU001.CDDFSEG = 'CA2EUTAX';        
 JWB001.LSTSERV = 'F5_MAK.1';        
 IF METHODE = 'VP' THEN        
   DO;        
     SSA2_A2EUT11.VALUE1 = '';        
     SSA2_A2EUT11.VALUE2 = KA2151J_EXPMAK_I.LTMARQU;        
     SSA2_A2EUT11.VALUE3 = KA2151J_EXPMAK_I.NOIDMAR;        
     SSA2_A2EUT11.VALUEF = '';        
     SSA2_A2EUT11.OPER   = '> ';        
     IF JWB001.CDTRACE = 9 THEN        
       PUT SKIP LIST('Premiere lecture =',SSA2_A2EUT11);        
     CALL XEU100(IEU001,FOUR,GU,DA2152,A2EUTAX,SSA2_A2EUT11);        
     SSA2_A2EUT11.OPER  = '= ';        
   END;        
 IF METHODE = 'UT' THEN        
   DO;        
     SSA2_A2EUT21.VALUE1 = '';        
     SSA2_A2EUT21.VALUE2 = KA2151J_EXPMAK_I.LTMARQU;        
     SSA2_A2EUT21.VALUE3 = KA2151J_EXPMAK_I.NOIDMAR;        
     SSA2_A2EUT21.VALUEF = '';        
     SSA2_A2EUT21.OPER   = '> ';        
     IF JWB001.CDTRACE = 9 THEN        
       PUT SKIP LIST('Premiere lecture =',SSA2_A2EUT21);        
     CALL XEU100(IEU001,FOUR,GU,DA2152,A2EUTAX,SSA2_A2EUT21);        
     SSA2_A2EUT21.OPER  = '= ';        
   END;        
 IF JWB001.CDTRACE = 9 THEN        
   DO;        
     PUT SKIP LIST('Resultat lecture ,DA2152.STATUS=',DA2152.STATUS);        
     IF DA2152.STATUS = '' THEN        
       PUT SKIP LIST('A2EUTAX=',A2EUTAX);        
   END;        
 KA2151J_EXPMAK_O.NBELMTB = 0;        
         
 DO WHILE (DA2152.STATUS = ''        
         & A2EUTAX.CDTYPTB = KA2151J_EXPMAK_I.CDTYPTB        
         & ( KA2151J_EXPMAK_O.NBELMTB        
         <   KA2151J_EXPMAK_I.NBITEXP)        
         & JWB001.CDRTPGM = '') ;        
         
   SELECT(METHODE);        
     WHEN('VP') DO;        
       A2EUT11_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT11';        
       JWB001.LSTSERV = 'F5_MAK.2';        
       CALL XEU100(IEU001,THREE,GCV,DA2152,A2EUT11);        
       IF DA2152.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDMAR_W = A2EUT11.NOIDMAR;        
       LTMARQU_Z = A2EUT11.LTMARQU;        
       CDTTERR_W = A2EUT11.CDTTERR;        
       DADEBIM_W = A2EUT11.DADEBIM;        
       DAFINIM_W = A2EUT11.DAFINIM;        
       TBEGCOD_W(*) = A2EUT11.TBEGCOD(*);        
         
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('A2EUT11.CDTYPTB=',A2EUT11.CDTYPTB);        
           PUT SKIP LIST('A2EUT11.NOIDMAR=',A2EUT11.NOIDMAR);        
           PUT SKIP LIST('A2EUT11.LTMARQU=',A2EUT11.LTMARQU);        
           PUT SKIP LIST('A2EUT11.DADEBIM=',A2EUT11.DADEBIM);        
           PUT SKIP LIST('A2EUT11.DAFINIM=',A2EUT11.DAFINIM);        
           PUT SKIP LIST('A2EUT11.CDTTERR=',A2EUT11.CDTTERR);        
           PUT SKIP LIST('A2EUT11.TBEGCOD(*)=',A2EUT11.TBEGCOD(*));        
         END;        
     END;        
     WHEN('UT') DO;        
       A2EUT21_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT21';        
       JWB001.LSTSERV = 'F5_MAK.3';        
       CALL XEU100(IEU001,THREE,GCV,DA2152,A2EUT21);        
       IF DA2152.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDMAR_W = A2EUT21.NOIDMAR;        
       LTMARQU_Z = A2EUT21.LTMARQU;        
       CDTTERR_W = A2EUT21.CDTTERR;        
       DADEBIM_W = A2EUT21.DADEBIM;        
       DAFINIM_W = A2EUT21.DAFINIM;        
       TBEGCOD_W(*) = A2EUT21.TBEGCOD(*);        
         
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('A2EUT21.CDTYPTB=',A2EUT21.CDTYPTB);        
           PUT SKIP LIST('A2EUT21.NOIDMAR=',A2EUT21.NOIDMAR);        
           PUT SKIP LIST('A2EUT21.LTMARQU=',A2EUT21.LTMARQU);        
           PUT SKIP LIST('A2EUT21.DADEBIM=',A2EUT21.DADEBIM);        
           PUT SKIP LIST('A2EUT21.DAFINIM=',A2EUT21.DAFINIM);        
           PUT SKIP LIST('A2EUT21.CDTTERR=',A2EUT21.CDTTERR);        
           PUT SKIP LIST('A2EUT21.TBEGCOD(*)=',A2EUT21.TBEGCOD(*));        
         END;        
     END;        
     OTHER;        
   END;        
         
   /* CHECK DES CRITeRES ... */        
   /* ---------------------- */        
   IF JWB001.CDTRACE = 9 THEN        
     DO;        
       PUT SKIP LIST('Check des criteres Marques...');        
       PUT SKIP LIST('NOIDMAR_W=',NOIDMAR_W);        
       PUT SKIP LIST('LTMARQU_Z=',LTMARQU_Z);        
       PUT SKIP LIST('DADEBIM_W=',DADEBIM_W);        
       PUT SKIP LIST('DAFINIM_W=',DAFINIM_W);        
       PUT SKIP LIST('CDTTERR_W=',CDTTERR_W);        
       PUT SKIP LIST('TBEGCOD_W(*)=',TBEGCOD_W(*));        
     END;        
         
   ITEM_OK = ON;        
   IF KA2151J_EXPMAK_I.CDTTERR ^= ' '  THEN        
     DO;        
       IF KA2151J_EXPMAK_I.CDTTERR ^= CDTTERR_W        
         THEN ITEM_OK = OFF;        
     END;        
         
   IF ITEM_OK        
    & KA2151J_EXPMAK_I.LIBMARQ ^= '' THEN        
     DO;        
       /* CONVERTIR LE LIBELLE EN MAJUSCULES (CF. 4X4) */        
       KA2151J_EXPMAK_I.LIBMARQ =        
               TRANSLATE(KA2151J_EXPMAK_I.LIBMARQ,MAJUS,MINUS);        
       LTMARQU_Z = TRANSLATE(LTMARQU_Z,MAJUS,MINUS);        
         
       IF KA2151J_EXPMAK_I.LIBMARQ ^= '' THEN        
         DO;        
           ITEM_OK = OFF;        
           LIBMARQ_W = KA2151J_EXPMAK_I.LIBMARQ;        
           I = INDEX(LIBMARQ_W,'?');        
           J = 1;        
           DO WHILE(I > 0 & ITEM_OK = OFF & J < 40);        
             TESTLIB_W = SUBSTR(LIBMARQ_W,J,I - J);        
             K = LENGTH(TESTLIB_W);        
             IF SUBSTR(LTMARQU_Z,1,K) = TESTLIB_W        
               THEN DO;        
                      ITEM_OK = ON;        
                    END;        
               ELSE DO;        
                      SUBSTR(LIBMARQ_W,I,1) = '$';        
                      J = I + 1;        
                      I = INDEX(LIBMARQ_W,'?');        
                    END;        
           END;        
         END;        
     END;        
         
   IF ITEM_OK &        
      KA2151J_EXPMAK_I.ANNECTR > 0 THEN        
     DO;        
       ANNDEB_W = SUBSTR(DADEBIM_W,1,4);        
       ANNFIN_W = SUBSTR(DAFINIM_W,1,4);        
       SELECT;        
         WHEN(ANNDEB_W = 0) ITEM_OK = OFF;        
         WHEN(KA2151J_EXPMAK_I.NOUVEAU = 'O') DO;        
             /* Pour FORD, on demande Nouveau/Occasion et si nouveau        
                on regarde jusqu'e 6 mois avant l'annee du jour (qui est        
                dans l'annee de construction)        
             */        
             IF ANNFIN_W = 0        
               THEN;        
               ELSE IF ANNFIN_W < KA2151J_EXPMAK_I.ANNECTR        
                      THEN ITEM_OK = OFF;        
           END;        
         WHEN(ANNDEB_W > KA2151J_EXPMAK_I.ANNECTR) ITEM_OK = OFF;        
         WHEN(ANNFIN_W < KA2151J_EXPMAK_I.ANNECTR & ANNFIN_W > 0)        
           ITEM_OK = OFF;        
         OTHER;        
       END;        
         
     END;        
         
   IF ITEM_OK &        
      KA2151J_EXPMAK_I.CDSPORT ^= ' ' THEN        
     DO;        
       IF KA2151J_EXPMAK_I.CDSPORT = '1'        
        & TBEGCOD_W(4) = OFF        
       /* On veut uniqt les vh sportifs et il n'y en a pas ! */        
         THEN ITEM_OK = OFF;        
       /* Par contre, si on veut uniqt les vh non sportifs et que on a        
          TBEGCOD(4) e 1, cela ne veut pas dire qu'il n'y a que des        
          sportifs et pas des autres ! => on ne sait pas le tester ...        
       */        
     END;        
         
   IF ITEM_OK &        
      KA2151J_EXPMAK_I.CDSPOSE ^= ' ' THEN        
     DO;        
       CDSPOSE_W = SUBSTR(KA2151J_EXPMAK_I.CDSPOSE,2,1);        
       SELECT;        
         WHEN(CDSPOSE_W = '1' & TBEGCOD_W(5) = OFF)        
           /* On veut uniqt les vh S1 et il n'y en a pas ! */        
           ITEM_OK = OFF;        
         WHEN(CDSPOSE_W = '2' & TBEGCOD_W(6) = OFF)        
           /* On veut uniqt les vh S2 et il n'y en a pas ! */        
           ITEM_OK = OFF;        
         WHEN(CDSPOSE_W = '3' & TBEGCOD_W(7) = OFF)        
           /* On veut uniqt les vh S3 et il n'y en a pas ! */        
           ITEM_OK = OFF;        
         WHEN(CDSPOSE_W = '4' & TBEGCOD_W(8) = OFF)        
           /* On veut uniqt les vh S4 et il n'y en a pas ! */        
           ITEM_OK = OFF;        
         WHEN(CDSPOSE_W = '5' & TBEGCOD_W(9) = OFF)        
           /* On veut uniqt les vh S5 et il n'y en a pas ! */        
           ITEM_OK = OFF;        
         OTHER;        
       END;        
     END;        
         
   IF ITEM_OK &        
      KA2151J_EXPMAK_I.TXTCARB ^= '' THEN        
     DO;        
       SELECT(KA2151J_EXPMAK_I.TXTCARB);        
         WHEN('ESSENCE ') DO;        
             IF TBEGCOD_W(1) = OFF        
               THEN ITEM_OK = OFF;        
           END;        
         WHEN('DIESEL  ') DO;        
             IF TBEGCOD_W(2) = OFF        
               THEN ITEM_OK = OFF;        
           END;        
         WHEN('ESSENGAZ') DO;        
             IF TBEGCOD_W(3) = OFF        
               THEN ITEM_OK = OFF;        
           END;        
         OTHER;        
        END;        
     END;        
   /* CHARGER ITEM SELECTIONNE */        
   IF ITEM_OK THEN        
     DO;        
       KA2151J_EXPMAK_O.NBELMTB = KA2151J_EXPMAK_O.NBELMTB + 1;        
       I = KA2151J_EXPMAK_O.NBELMTB;        
       KA2151J_EXPMAK_O.TBIDELM(I).NOIDMAR = NOIDMAR_W;        
       KA2151J_EXPMAK_O.TBIDELM(I).LTMARQU = LTMARQU_Z;        
       KA2151J_EXPMAK_O.TBIDELM(I).CDTTERR = CDTTERR_W;        
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('KA2151J_EXPMAK_O.TBIDELM(I).NOIDMAR=',        
                          KA2151J_EXPMAK_O.TBIDELM(I).NOIDMAR);        
           PUT SKIP LIST('KA2151J_EXPMAK_O.TBIDELM(I).LTMARQU=',        
                          KA2151J_EXPMAK_O.TBIDELM(I).LTMARQU);        
           PUT SKIP LIST('KA2151J_EXPMAK_O.TBIDELM(I).CDTTERR=',        
                          KA2151J_EXPMAK_O.TBIDELM(I).CDTTERR);        
         END;        
     END;        
         
   /* LECTURE SUIVANTE */        
   IF KA2151J_EXPMAK_O.NBELMTB        
    < KA2151J_EXPMAK_I.NBITEXP  THEN        
     DO;        
       IEU001.CDDFSEG = 'CA2EUTAX';        
       JWB001.LSTSERV = 'F5_MAK.4';        
       SELECT(METHODE);        
         WHEN('VP') DO;        
             SSA2_A2EUT11.PAR    = ' ';        
             CALL XEU100(IEU001,FOUR,GN,DA2152,A2EUTAX,SSA2_A2EUT11);        
             SSA2_A2EUT11.PAR   = '(';        
           END;        
         WHEN('UT') DO;        
             SSA2_A2EUT21.PAR    = ' ';        
             CALL XEU100(IEU001,FOUR,GN,DA2152,A2EUTAX,SSA2_A2EUT21);        
             SSA2_A2EUT21.PAR   = '(';        
           END;        
         OTHER RETURN;        
       END;        
     END;        
 END;        
         
 SELECT(DA2152.STATUS);        
   WHEN ('','GE','GB') DO;        
       IF KA2151J_EXPMAK_O.NBELMTB = 0        
         THEN JWB001.CDRTPGM = 'NOTFOUND';        
     END;        
   OTHER DO;        
     CALL ERR_DL1;        
     RETURN;        
   END;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F5_MAK';        
         
 CALL PT;        
 $END F5_MAK;        
         
 /*-------------------------------------------------------------------*/        
         
 /*-------------------------------------------------------------------*/        
         
 F5_MOD: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F5_MOD';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE EXPLO_1P_XX_MOD  EXPLORATION PREMIERE PAGE MODELE         */        
 /*         EXPLO_PS_XX_MOD  EXPLORATION MODELE PAGE SUIVANTE         */        
 /*         EXPLO_PP_XX_MOD  EXPLORATION MODELE PAGE PRECEDENTE       */        
 /*                                                                   */        
 /* Exploration de tous les modeles d'une marque                      */        
 /* YY  =  VP => VOITURES PARTICULIERES                               */        
 /* YY  =  UT => UTILITAIRES                                          */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(02);        
 DCL  TBEGCOD_W(16)     BIT(1);        
 DCL  CDSPOSE_W         CHAR(1);        
 DCL  LTMODEL_W         CHAR(40);        
         
 METHODE = SUBSTR(JWB001.LTNMMTH,10,2);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP LIST('CDTYPTB=',KA2151J_EXPMOD_I.CDTYPTB);        
     PUT SKIP LIST('NBITEXP=',KA2151J_EXPMOD_I.NBITEXP);        
     PUT SKIP LIST('NOIDMAR=',KA2151J_EXPMOD_I.NOIDMAR);        
     PUT SKIP LIST('NOIDMOD=',KA2151J_EXPMOD_I.NOIDMOD);        
     PUT SKIP LIST('LTMODEL=',KA2151J_EXPMOD_I.LTMODEL);        
     PUT SKIP LIST('ANNECTR=',KA2151J_EXPMOD_I.ANNECTR);        
     PUT SKIP LIST('CDTTERR=',KA2151J_EXPMOD_I.CDTTERR);        
     PUT SKIP LIST('CDSPORT=',KA2151J_EXPMOD_I.CDSPORT);        
     PUT SKIP LIST('CDSPOSE=',KA2151J_EXPMOD_I.CDSPOSE);        
     PUT SKIP LIST('TXTCLAS=',KA2151J_EXPMOD_I.TXTCLAS);        
     PUT SKIP LIST('TXTCATV=',KA2151J_EXPMOD_I.TXTCATV);        
     PUT SKIP LIST('TXTCARO=',KA2151J_EXPMOD_I.TXTCARO);        
     PUT SKIP LIST('TXTCARB=',KA2151J_EXPMOD_I.TXTCARB);        
     PUT SKIP LIST('NOUVEAU=',KA2151J_EXPMOD_I.NOUVEAU);        
   END;        
         
 IF KA2151J_EXPMOD_I.NBITEXP = 0  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '007';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPMOD_I.NBITEXP > 50  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '008';        
     RETURN;        
   END;        
         
 IF ( METHODE = 'VP' & KA2151J_EXPMOD_I.CDTYPTB ^= '12' )        
  ! ( METHODE = 'UT' & KA2151J_EXPMOD_I.CDTYPTB ^= '22' ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
 IF KA2151J_EXPMOD_I.NOIDMAR = 0 THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF SUBSTR(JWB001.LTNMMTH,1,8) ^= 'EXPLO_1P'        
  & ( KA2151J_EXPMOD_I.NOIDMOD = 0        
  !   KA2151J_EXPMOD_I.LTMODEL = '' ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '009';        
     RETURN;        
   END;        
         
 KA2151J_EXPMOD_O = '';        
         
 /* PREMIERE LECTURE AVANT BOUCLE : SUR INDEX 2 */        
 /* ------------------------------------------- */        
 IEU001.CDDFSEG = 'CA2EUTAX';        
 JWB001.LSTSERV = 'F5_MOD.1';        
 SELECT(METHODE);        
   WHEN('VP') DO;        
     SSA2_A2EUT12.VALUE1 = '';        
     SSA2_A2EUT12.VALUE2 = KA2151J_EXPMOD_I.NOIDMAR;        
     SSA2_A2EUT12.VALUE3 = KA2151J_EXPMOD_I.LTMODEL;        
     SSA2_A2EUT12.VALUE4 = KA2151J_EXPMOD_I.NOIDMOD;        
     SSA2_A2EUT12.VALUEF = '';        
     SSA2_A2EUT12.OPER   = '> ';        
     /* PUT SKIP LIST('Premiere lecture =',SSA_A2EUT12);*/        
     CALL XEU100(IEU001,FOUR,GU,DA2152,A2EUTAX,SSA2_A2EUT12);        
     SSA2_A2EUT12.OPER  = '= ';        
   END;        
   WHEN('UT') DO;        
     SSA2_A2EUT22.VALUE1 = '';        
     SSA2_A2EUT22.VALUE2 = KA2151J_EXPMOD_I.NOIDMAR;        
     SSA2_A2EUT22.VALUE3 = KA2151J_EXPMOD_I.LTMODEL;        
     SSA2_A2EUT22.VALUE4 = KA2151J_EXPMOD_I.NOIDMOD;        
     SSA2_A2EUT22.VALUEF = '';        
     SSA2_A2EUT22.OPER   = '> ';        
     /* PUT SKIP LIST('Premiere lecture =',SSA_A2EUT22);*/        
     CALL XEU100(IEU001,FOUR,GU,DA2152,A2EUTAX,SSA2_A2EUT22);        
     SSA2_A2EUT22.OPER  = '= ';        
   END;        
   OTHER RETURN;        
 END;        
         
 KA2151J_EXPMOD_O.NBELMTB = 0;        
         
 DO WHILE (DA2152.STATUS = ''        
         & A2EUTAX.CDTYPTB = KA2151J_EXPMOD_I.CDTYPTB        
         & ( KA2151J_EXPMOD_O.NBELMTB        
         <   KA2151J_EXPMOD_I.NBITEXP)        
         & JWB001.CDRTPGM = '') ;        
         
   SELECT(METHODE);        
     WHEN('VP') DO;        
       A2EUT12_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT12';        
       JWB001.LSTSERV = 'F5_MOD.2';        
       CALL XEU100(IEU001,THREE,GCV,DA2152,A2EUT12);        
       IF DA2152.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDMAR_W = A2EUT12.NOIDMAR;        
       NOIDMOD_W = A2EUT12.NOIDMOD;        
       LTMODEL_W = A2EUT12.LTMODEL;        
       CDTTERR_W = A2EUT12.CDTTERR;        
       DADEBIM_W = A2EUT12.DADEBIM;        
       DAFINIM_W = A2EUT12.DAFINIM;        
       TBEGCOD_W(*) = A2EUT12.TBEGCOD(*);        
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('Lecture Modeles index 2 ...');        
           PUT SKIP LIST('A2EUT12.CDTYPTB=',A2EUT12.CDTYPTB);        
           PUT SKIP LIST('A2EUT12.NOIDMAR=',A2EUT12.NOIDMAR);        
           PUT SKIP LIST('A2EUT12.NOIDMOD=',A2EUT12.NOIDMOD);        
           PUT SKIP LIST('A2EUT12.LTMODEL=',A2EUT12.LTMODEL);        
         END;        
     END;        
     WHEN('UT') DO;        
       A2EUT22_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT22';        
       JWB001.LSTSERV = 'F5_MOD.3';        
       CALL XEU100(IEU001,THREE,GCV,DA2152,A2EUT22);        
       IF DA2152.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDMAR_W = A2EUT22.NOIDMAR;        
       NOIDMOD_W = A2EUT22.NOIDMOD;        
       LTMODEL_W = A2EUT22.LTMODEL;        
       CDTTERR_W = A2EUT22.CDTTERR;        
       DADEBIM_W = A2EUT22.DADEBIM;        
       DAFINIM_W = A2EUT22.DAFINIM;        
       TBEGCOD_W(*) = A2EUT22.TBEGCOD(*);        
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('Lecture Modeles index 2 ...');        
           PUT SKIP LIST('A2EUT22.CDTYPTB=',A2EUT22.CDTYPTB);        
           PUT SKIP LIST('A2EUT22.NOIDMAR=',A2EUT22.NOIDMAR);        
           PUT SKIP LIST('A2EUT22.NOIDMOD=',A2EUT22.NOIDMOD);        
           PUT SKIP LIST('A2EUT22.LTMODEL=',A2EUT22.LTMODEL);        
         END;        
     END;        
     OTHER;        
   END;        
         
   /* Rupture Marque ? */        
   IF NOIDMAR_W ^= KA2151J_EXPMOD_I.NOIDMAR        
     THEN JWB001.CDRTPGM = 'FIN';        
     ELSE        
       DO;        
         /* CHECK DES CRITeRES ... */        
         /* ---------------------- */        
         ITEM_OK = ON;        
         
         IF KA2151J_EXPMOD_I.CDTTERR ^= ' ' THEN        
           DO;        
             IF KA2151J_EXPMOD_I.CDTTERR ^= CDTTERR_W        
               THEN ITEM_OK = OFF;        
           END;        
         
         IF ITEM_OK &        
            KA2151J_EXPMOD_I.ANNECTR > 0 THEN        
           DO;        
             ANNDEB_W = SUBSTR(DADEBIM_W,1,4);        
             ANNFIN_W = SUBSTR(DAFINIM_W,1,4);        
             SELECT;        
               WHEN(ANNDEB_W = 0) ITEM_OK = OFF;        
               WHEN(KA2151J_EXPMOD_I.NOUVEAU = 'O') DO;        
                   /* Pour FORD, on demande Nouveau/Occasion        
                      et si nouveau        
                      on regarde jusqu'e 6 mois avant        
                      l'annee du jour (qui est        
                      dans l'annee de construction)        
                   */        
                   IF ANNFIN_W = 0        
                     THEN;        
                     ELSE IF ANNFIN_W < KA2151J_EXPMOD_I.ANNECTR        
                           THEN ITEM_OK = OFF;        
                 END;        
               WHEN(ANNDEB_W > KA2151J_EXPMOD_I.ANNECTR) ITEM_OK = OFF;        
               WHEN(ANNFIN_W < KA2151J_EXPMOD_I.ANNECTR & ANNFIN_W > 0)        
                 ITEM_OK = OFF;        
               OTHER;        
             END;        
         
           END;        
         /*        
         IF ITEM_OK &        
            KA2151J_EXPMOD_I.ANNECTR > 0 THEN        
           DO;        
             ANNDEB_W = SUBSTR(DADEBIM_W,1,4);        
             ANNFIN_W = SUBSTR(DAFINIM_W,1,4);        
             IF ANNDEB_W = 0        
               THEN ITEM_OK = OFF;        
               ELSE        
                 IF KA2151J_EXPMOD_I.ANNECTR < ANNDEB_W        
                   THEN ITEM_OK = OFF;        
                   ELSE IF KA2151J_EXPMOD_I.ANNECTR > ANNFIN_W        
                      THEN IF ANNFIN_W > 0        
                             THEN ITEM_OK = OFF;        
           END;        
         */        
         IF ITEM_OK &        
            KA2151J_EXPMOD_I.CDSPORT ^= ' ' THEN        
           DO;        
             IF KA2151J_EXPMOD_I.CDSPORT = '1'        
              & TBEGCOD_W(4) = OFF        
             /* On veut uniqt les vh sportifs et il n'y en a pas ! */        
               THEN ITEM_OK = OFF;        
             /* Par contre, si on veut uniqt les vh non sportifs        
                et que on a TBEGCOD(4) e 1, cela ne veut pas dire qu'il        
                n'y a que des sportifs et pas des autres !        
                => on ne sait pas le tester ...        
             */        
           END;        
         
         IF ITEM_OK &        
            KA2151J_EXPMOD_I.CDSPOSE ^= ' ' THEN        
           DO;        
             CDSPOSE_W = SUBSTR(KA2151J_EXPMOD_I.CDSPOSE,2,1);        
             SELECT;        
               WHEN(CDSPOSE_W = '1' & TBEGCOD_W(5) = OFF)        
                 /* On veut uniqt les vh S1 et il n'y en a pas ! */        
                 ITEM_OK = OFF;        
               WHEN(CDSPOSE_W = '2' & TBEGCOD_W(6) = OFF)        
                 /* On veut uniqt les vh S2 et il n'y en a pas ! */        
                 ITEM_OK = OFF;        
               WHEN(CDSPOSE_W = '3' & TBEGCOD_W(7) = OFF)        
                 /* On veut uniqt les vh S3 et il n'y en a pas ! */        
                 ITEM_OK = OFF;        
               WHEN(CDSPOSE_W = '4' & TBEGCOD_W(8) = OFF)        
                 /* On veut uniqt les vh S4 et il n'y en a pas ! */        
                 ITEM_OK = OFF;        
               WHEN(CDSPOSE_W = '5' & TBEGCOD_W(9) = OFF)        
                 /* On veut uniqt les vh S5 et il n'y en a pas ! */        
                 ITEM_OK = OFF;        
               OTHER;        
             END;        
           END;        
         
         IF ITEM_OK &        
            KA2151J_EXPMOD_I.TXTCARB ^= '' THEN        
           DO;        
             SELECT(KA2151J_EXPMOD_I.TXTCARB);        
               WHEN('ESSENCE ') DO;        
                   IF TBEGCOD_W(1) = OFF        
                     THEN ITEM_OK = OFF;        
                 END;        
               WHEN('DIESEL  ') DO;        
                   IF TBEGCOD_W(2) = OFF        
                     THEN ITEM_OK = OFF;        
                 END;        
               WHEN('ESSENGAZ') DO;        
                   IF TBEGCOD_W(3) = OFF        
                     THEN ITEM_OK = OFF;        
                 END;        
               OTHER;        
              END;        
           END;        
         
       END;        
         
   /* CHARGER ITEM SELECTIONNE */        
   IF JWB001.CDRTPGM = ''        
    & ITEM_OK THEN        
     DO;        
       KA2151J_EXPMOD_O.NBELMTB = KA2151J_EXPMOD_O.NBELMTB + 1;        
       I = KA2151J_EXPMOD_O.NBELMTB;        
       KA2151J_EXPMOD_O.TBIDELM(I).NOIDMOD = NOIDMOD_W;        
       KA2151J_EXPMOD_O.TBIDELM(I).LTMODEL = LTMODEL_W;        
       KA2151J_EXPMOD_O.TBIDELM(I).CDTTERR = CDTTERR_W;        
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('KA2151J_EXPMOD_O.TBIDELM(I).NOIDMOD=',        
                          KA2151J_EXPMOD_O.TBIDELM(I).NOIDMOD);        
           PUT SKIP LIST('KA2151J_EXPMOD_O.TBIDELM(I).LTMODEL=',        
                          KA2151J_EXPMOD_O.TBIDELM(I).LTMODEL);        
           PUT SKIP LIST('KA2151J_EXPMOD_O.TBIDELM(I).CDTTERR=',        
                          KA2151J_EXPMOD_O.TBIDELM(I).CDTTERR);        
         END;        
     END;        
         
   /* LECTURE SUIVANTE */        
   IF (KA2151J_EXPMOD_O.NBELMTB        
    <  KA2151J_EXPMOD_I.NBITEXP)        
    & JWB001.CDRTPGM = '' THEN        
     DO;        
       IEU001.CDDFSEG = 'CA2EUTAX';        
       JWB001.LSTSERV = 'F5_MOD.4';        
       SELECT(METHODE);        
         WHEN('VP') DO;        
             SSA2_A2EUT12.PAR    = ' ';        
             CALL XEU100(IEU001,FOUR,GN,DA2152,A2EUTAX,SSA2_A2EUT12);        
             SSA2_A2EUT12.PAR   = '(';        
           END;        
         WHEN('UT') DO;        
             SSA2_A2EUT22.PAR    = ' ';        
             CALL XEU100(IEU001,FOUR,GN,DA2152,A2EUTAX,SSA2_A2EUT22);        
             SSA2_A2EUT22.PAR   = '(';        
           END;        
         OTHER RETURN;        
       END;        
     END;        
 END;        
 IF JWB001.CDRTPGM = 'FIN'        
   THEN JWB001.CDRTPGM = '';        
         
 SELECT(DA2152.STATUS);        
   WHEN ('','GE','GB') DO;        
       IF KA2151J_EXPMOD_O.NBELMTB = 0        
         THEN JWB001.CDRTPGM = 'NOTFOUND';        
     END;        
   OTHER DO;        
     CALL ERR_DL1;        
     RETURN;        
   END;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F5_MOD';        
         
 CALL PT;        
 $END F5_MOD;        
         
 /*-------------------------------------------------------------------*/        
         
         
 /*-------------------------------------------------------------------*/        
         
 F5_TYP: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F5_TYP';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE EXPLO_1P_XX_TYP  EXPLORATION PREMIERE PAGE TYPE           */        
 /*         EXPLO_PS_XX_TYP  EXPLORATION TYPE   PAGE SUIVANTE         */        
 /*         EXPLO_PP_XX_TYP  EXPLORATION TYPE   PAGE PRECEDENTE       */        
 /*                                                                   */        
 /* Exploration de tous les Types d'une modele et d'une marque        */        
 /* YY  =  VP => VOITURES PARTICULIERES                               */        
 /* YY  =  UT => UTILITAIRES                                          */        
 /*********************************************************************/        
 DCL  METHODE               CHAR(02);        
         
 METHODE = SUBSTR(JWB001.LTNMMTH,10,2);        
         
 DCL  LTTYPEV_W             CHAR(60);        
 DCL  NBRPORT_W             FIXED(03);        
 DCL  NBTYPKW_W             FIXED(03);        
 DCL  NBVITES_W             FIXED(03);        
 DCL  TXTBOIT_W             CHAR(08);        
 DCL  TYPCYLI_W             FIXED(05);        
 DCL  NBCVDIN_W             FIXED(03);        
         
 DCL  CDSPORT_W             CHAR(01);        
 DCL  CDSPOSE_W             CHAR(01);        
 DCL  TXTCLAS_W             CHAR(08);        
 DCL  TXTCATV_W             CHAR(08);        
 DCL  TXTCARO_W             CHAR(08);        
 DCL  TXTCARB_W             CHAR(08);        
 DCL  TCO2EMI_W             FIXED(05);        
 DCL  CDECOV2_W             CHAR(01);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP LIST('CDTYPTB=',KA2151J_EXPTYP_I.CDTYPTB);        
     PUT SKIP LIST('NBITEXP=',KA2151J_EXPTYP_I.NBITEXP);        
     PUT SKIP LIST('NOIDMAR=',KA2151J_EXPTYP_I.NOIDMAR);        
     PUT SKIP LIST('NOIDMOD=',KA2151J_EXPTYP_I.NOIDMOD);        
     PUT SKIP LIST('NOIDTYP=',KA2151J_EXPTYP_I.NOIDTYP);        
     PUT SKIP LIST('LTTYPEV=',KA2151J_EXPTYP_I.LTTYPEV);        
     PUT SKIP LIST('ANNECTR=',KA2151J_EXPTYP_I.ANNECTR);        
     PUT SKIP LIST('CDTTERR=',KA2151J_EXPTYP_I.CDTTERR);        
     PUT SKIP LIST('CDSPORT=',KA2151J_EXPTYP_I.CDSPORT);        
     PUT SKIP LIST('CDSPOSE=',KA2151J_EXPTYP_I.CDSPOSE);        
     PUT SKIP LIST('TXTCLAS=',KA2151J_EXPTYP_I.TXTCLAS);        
     PUT SKIP LIST('TXTCATV=',KA2151J_EXPTYP_I.TXTCATV);        
     PUT SKIP LIST('TXTCARO=',KA2151J_EXPTYP_I.TXTCARO);        
     PUT SKIP LIST('TXTCARB=',KA2151J_EXPTYP_I.TXTCARB);        
   END;        
         
 IF KA2151J_EXPTYP_I.NBITEXP = 0  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '007';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPTYP_I.NBITEXP > 50  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '008';        
     RETURN;        
   END;        
         
 IF ( METHODE = 'VP' & KA2151J_EXPTYP_I.CDTYPTB ^= '13' )        
  ! ( METHODE = 'UT' & KA2151J_EXPTYP_I.CDTYPTB ^= '23' ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPTYP_I.NOIDMAR = 0        
  ! KA2151J_EXPTYP_I.NOIDMOD = 0 THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF SUBSTR(JWB001.LTNMMTH,1,8) ^= 'EXPLO_1P'        
  & ( KA2151J_EXPTYP_I.NOIDTYP = 0        
  !   KA2151J_EXPTYP_I.LTTYPEV = '' ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '009';        
     RETURN;        
   END;        
         
 KA2151J_EXPTYP_O = '';        
         
 IEU001.CDDFSEG = 'CA2EUTAX';        
 JWB001.LSTSERV = 'F5_TYP.1';        
 IF METHODE = 'VP' THEN        
   DO;        
     SSA2_A2EUT13.VALUE1 = KA2151J_EXPTYP_I.NOIDMAR;        
     SSA2_A2EUT13.VALUE2 = KA2151J_EXPTYP_I.NOIDMOD;        
     SSA2_A2EUT13.VALUE3 = KA2151J_EXPTYP_I.LTTYPEV;        
     SSA2_A2EUT13.OPER   = '> ';        
     IF JWB001.CDTRACE = 9        
       THEN PUT SKIP LIST('Premiere lecture =',SSA2_A2EUT13);        
     CALL XEU100(IEU001,FOUR,GU,DA2152,A2EUTAX,SSA2_A2EUT13);        
     SSA2_A2EUT13.OPER  = '= ';        
   END;        
 IF METHODE = 'UT' THEN        
   DO;        
     SSA2_A2EUT23.VALUE1 = KA2151J_EXPTYP_I.NOIDMAR;        
     SSA2_A2EUT23.VALUE2 = KA2151J_EXPTYP_I.NOIDMOD;        
     SSA2_A2EUT23.VALUE3 = KA2151J_EXPTYP_I.LTTYPEV;        
     SSA2_A2EUT23.OPER   = '> ';        
     IF JWB001.CDTRACE = 9        
       THEN PUT SKIP LIST('Premiere lecture =',SSA2_A2EUT23);        
     CALL XEU100(IEU001,FOUR,GU,DA2152,A2EUTAX,SSA2_A2EUT23);        
     SSA2_A2EUT23.OPER  = '= ';        
   END;        
         
 IF JWB001.CDTRACE = 9 THEN        
   DO;        
     PUT SKIP LIST('Resultat lecture ,DA2152.STATUS=',DA2152.STATUS);        
     IF DA2152.STATUS = '' THEN        
       PUT SKIP LIST('A2EUTAX=',A2EUTAX);        
   END;        
         
         
 KA2151J_EXPTYP_O.NBELMTB = 0;        
         
 DO WHILE (DA2152.STATUS = ''        
         & A2EUTAX.CDTYPTB = KA2151J_EXPTYP_I.CDTYPTB        
         & ( KA2151J_EXPTYP_O.NBELMTB        
         <   KA2151J_EXPTYP_I.NBITEXP)        
         & JWB001.CDRTPGM = '') ;        
         
   SELECT(METHODE);        
     WHEN('VP') DO;        
       A2EUT13_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT13';        
       JWB001.LSTSERV = 'F5_TYP.2';        
       CALL XEU100(IEU001,THREE,GCV,DA2152,A2EUT13);        
       IF DA2152.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
         
       NOIDMAR_W = A2EUT13.NOIDMAR;        
       NOIDMOD_W = A2EUT13.NOIDMOD;        
       NOIDTYP_W = A2EUT13.NOIDTYP;        
       LTTYPEV_W = A2EUT13.LTTYPEV;        
       CDTTERR_W = A2EUT13.CDTTERR;        
       DADEBIM_W = A2EUT13.DADEBIM;        
       DAFINIM_W = A2EUT13.DAFINIM;        
       NBRPORT_W = A2EUT13.NBRPORT;        
       NBTYPKW_W = A2EUT13.NBTYPKW;        
       NBVITES_W = A2EUT13.NBVITES;        
       TXTBOIT_W = A2EUT13.TXTBOIT;        
       TYPCYLI_W = A2EUT13.TYPCYLI;        
       NBCVDIN_W = A2EUT13.NBCVDIN;        
       CDSPORT_W = A2EUT13.CDSPORT;        
       CDSPOSE_W = A2EUT13.CDSPOSE;        
       TXTCLAS_W = A2EUT13.TXTCLAS;        
       TXTCATV_W = A2EUT13.TXTCATV;        
       TXTCARO_W = A2EUT13.TXTCARO;        
       TXTCARB_W = A2EUT13.TXTCARB;        
       TCO2EMI_W = A2EUT13.TCO2EMI;        
       CDECOV2_W = A2EUT13.CDECOV2;        
       IF JWB001.CDTRACE = 9 THEN        
         PUT SKIP LIST('Segment A2EUT13 lu :,NOIDMAR=',NOIDMAR_W);        
     END;        
     WHEN('UT') DO;        
       A2EUT23_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT23';        
       JWB001.LSTSERV = 'F5_TYP.3';        
       CALL XEU100(IEU001,THREE,GCV,DA2152,A2EUT23);        
       IF DA2152.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
         
       NOIDMAR_W = A2EUT23.NOIDMAR;        
       NOIDMOD_W = A2EUT23.NOIDMOD;        
       NOIDTYP_W = A2EUT23.NOIDTYP;        
       LTTYPEV_W = A2EUT23.LTTYPEV;        
       CDTTERR_W = A2EUT23.CDTTERR;        
       DADEBIM_W = A2EUT23.DADEBIM;        
       DAFINIM_W = A2EUT23.DAFINIM;        
       NBRPORT_W = A2EUT23.NBRPORT;        
       NBTYPKW_W = A2EUT23.NBTYPKW;        
       NBVITES_W = A2EUT23.NBVITES;        
       TXTBOIT_W = A2EUT23.TXTBOIT;        
       TYPCYLI_W = A2EUT23.TYPCYLI;        
       NBCVDIN_W = A2EUT23.NBCVDIN;        
       CDSPORT_W = A2EUT23.CDSPORT;        
       CDSPOSE_W = A2EUT23.CDSPOSE;        
       TXTCLAS_W = A2EUT23.TXTCLAS;        
       TXTCATV_W = A2EUT23.TXTCATV;        
       TXTCARO_W = A2EUT23.TXTCARO;        
       TXTCARB_W = A2EUT23.TXTCARB;        
       TCO2EMI_W = A2EUT23.TCO2EMI;        
       CDECOV2_W = A2EUT23.CDECOV2;        
       IF JWB001.CDTRACE = 9 THEN        
         PUT SKIP LIST('Segment A2EUT23 lu :,NOIDMAR=',NOIDMAR_W);        
     END;        
     OTHER;        
   END;        
   IF JWB001.CDTRACE = 9 THEN        
     DO;        
       PUT SKIP LIST('....................,NOIDMOD=',NOIDMOD_W);        
       PUT SKIP LIST('....................,NOIDTYP=',NOIDTYP_W);        
       PUT SKIP LIST('....................,LTTYPEV=',LTTYPEV_W);        
       PUT SKIP LIST('....................,CDTTERR=',CDTTERR_W);        
       PUT SKIP LIST('....................,DADEBIM=',DADEBIM_W);        
       PUT SKIP LIST('....................,DAFINIM=',DAFINIM_W);        
       PUT SKIP LIST('....................,TXTBOIT=',TXTBOIT_W);        
       PUT SKIP LIST('....................,DADEBIM=',DADEBIM_W);        
       PUT SKIP LIST('....................,DAFINIM=',DAFINIM_W);        
       PUT SKIP LIST('....................,TXTBOIT=',TXTBOIT_W);        
       PUT SKIP LIST('....................,CDSPORT=',CDSPORT_W);        
       PUT SKIP LIST('....................,CDSPOSE=',CDSPOSE_W);        
       PUT SKIP LIST('....................,TXTCLAS=',TXTCLAS_W);        
       PUT SKIP LIST('....................,TXTCATV=',TXTCATV_W);        
       PUT SKIP LIST('....................,TXTCARO=',TXTCARO_W);        
       PUT SKIP LIST('....................,TXTCARB=',TXTCARB_W);        
       PUT SKIP LIST('....................,TCO2EMI=',TCO2EMI_W);        
       PUT SKIP LIST('....................,CDECOV2=',CDECOV2_W);        
     END;        
         
   /* Rupture Modele ? */        
   IF NOIDMAR_W ^= KA2151J_EXPTYP_I.NOIDMAR        
    ! NOIDMOD_W ^= KA2151J_EXPTYP_I.NOIDMOD        
     THEN JWB001.CDRTPGM = 'FIN';        
     ELSE        
       DO;        
         /* PUT SKIP LIST('Check des criteres ...'); */        
         /* CHECK DES CRITeRES ... */        
         ITEM_OK = ON;        
         
         IF KA2151J_EXPTYP_I.CDTTERR ^= ' ' THEN        
           DO;        
             IF KA2151J_EXPTYP_I.CDTTERR ^= CDTTERR_W        
                THEN ITEM_OK = OFF;        
           END;        
         
         /* Tester l'annee de construction demandee */        
         IF ITEM_OK &        
            KA2151J_EXPTYP_I.ANNECTR > 0 THEN        
           DO;        
             ANNDEB_W = SUBSTR(DADEBIM_W,1,4);        
             ANNFIN_W = SUBSTR(DAFINIM_W,1,4);        
             SELECT;        
               WHEN(ANNDEB_W = 0) ITEM_OK = OFF;        
               WHEN(KA2151J_EXPTYP_I.NOUVEAU = 'O') DO;        
                   /* Pour FORD, on demande Nouveau/Occasion        
                      et si nouveau        
                      on regarde jusqu'e 6 mois avant        
                      l'annee du jour (qui est        
                      dans l'annee de construction)        
                   */        
                   IF ANNFIN_W = 0        
                     THEN;        
                     ELSE IF ANNFIN_W < KA2151J_EXPTYP_I.ANNECTR        
                           THEN ITEM_OK = OFF;        
                 END;        
               WHEN(ANNDEB_W > KA2151J_EXPTYP_I.ANNECTR) ITEM_OK = OFF;        
               WHEN(ANNFIN_W < KA2151J_EXPTYP_I.ANNECTR & ANNFIN_W > 0)        
                 ITEM_OK = OFF;        
               OTHER;        
             END;        
           END;        
         /*        
         IF KA2151J_EXPTYP_I.ANNECTR > 0        
          & ITEM_OK = ON THEN        
           DO;        
             ANNDEB_W = SUBSTR(DADEBIM_W,1,4);        
             ANNFIN_W = SUBSTR(DAFINIM_W,1,4);        
             IF KA2151J_EXPTYP_I.ANNECTR < ANNDEB_W        
               THEN ITEM_OK = OFF;        
               ELSE IF KA2151J_EXPTYP_I.ANNECTR > ANNFIN_W        
                      THEN IF ANNFIN_W > 0        
                             THEN ITEM_OK = OFF;        
           END;        
         */        
         IF ITEM_OK = ON        
          & KA2151J_EXPTYP_I.CDSPORT ^= ' ' THEN        
           IF KA2151J_EXPTYP_I.CDSPORT ^= CDSPORT_W        
             THEN ITEM_OK = OFF;        
         IF ITEM_OK = ON        
          & KA2151J_EXPTYP_I.CDSPOSE ^= ' ' THEN        
           IF SUBSTR(KA2151J_EXPTYP_I.CDSPOSE,2,1) ^= CDSPOSE_W        
             THEN ITEM_OK = OFF;        
         IF ITEM_OK = ON        
          & KA2151J_EXPTYP_I.TXTCLAS ^= ' ' THEN        
           IF KA2151J_EXPTYP_I.TXTCLAS ^= TXTCLAS_W        
             THEN ITEM_OK = OFF;        
         IF ITEM_OK = ON        
          & KA2151J_EXPTYP_I.TXTCATV ^= ' ' THEN        
           IF KA2151J_EXPTYP_I.TXTCATV ^= TXTCATV_W        
             THEN ITEM_OK = OFF;        
         IF ITEM_OK = ON        
          & KA2151J_EXPTYP_I.TXTCARO ^= ' ' THEN        
           IF KA2151J_EXPTYP_I.TXTCARO ^= TXTCARO_W        
             THEN ITEM_OK = OFF;        
         IF ITEM_OK = ON        
          & KA2151J_EXPTYP_I.TXTCARB ^= ' ' THEN        
           SELECT(KA2151J_EXPTYP_I.TXTCARB);        
             WHEN('ESSENCE ') DO;        
                 IF TXTCARB_W ^= '00100001'        
                  & TXTCARB_W ^= '00100002'        
                  & TXTCARB_W ^= '00100006'        
                  & TXTCARB_W ^= '00100012'        
                   THEN TYPE_OK = OFF;        
               END;        
             WHEN('DIESEL  ') DO;        
                 IF TXTCARB_W ^= '00100003'        
                   THEN TYPE_OK = OFF;        
               END;        
             WHEN('ESSENGAZ') DO;        
                 IF TXTCARB_W ^= '00100006'        
                   THEN TYPE_OK = OFF;        
               END;        
             OTHER DO;        
                 IF KA2151J_EXPTYP_I.TXTCARB ^= TXTCARB_W        
                   THEN TYPE_OK = OFF;        
               END;        
           END;        
       END;        
   IF JWB001.CDTRACE = 9 THEN        
     DO;        
       PUT SKIP LIST('===> CDRTPGM=',JWB001.CDRTPGM);        
       PUT SKIP LIST('===> Item_ok=',ITEM_OK);        
     END;        
   /* CHARGER ITEM SELECTIONNE */        
   IF JWB001.CDRTPGM = ''        
    & ITEM_OK THEN        
     DO;        
       KA2151J_EXPTYP_O.NBELMTB = KA2151J_EXPTYP_O.NBELMTB + 1;        
       I = KA2151J_EXPTYP_O.NBELMTB;        
       KA2151J_EXPTYP_O.TBIDELM(I).NOIDTYP = NOIDTYP_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).LTTYPEV = LTTYPEV_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).CDTTERR = CDTTERR_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).DADEBIM = DADEBIM_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).DAFINIM = DAFINIM_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).NBRPORT = NBRPORT_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).NBTYPKW = NBTYPKW_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).NBVITES = NBVITES_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).TXTBOIT = TXTBOIT_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).TYPCYLI = TYPCYLI_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).NBCVDIN = NBCVDIN_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).TCO2EMI = TCO2EMI_W;        
       KA2151J_EXPTYP_O.TBIDELM(I).CDECOV2 = CDECOV2_W;        
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).NOIDTYP=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).NOIDTYP);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).LTTYPEV=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).LTTYPEV);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).CDTTERR=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).CDTTERR);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).DADEBIM=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).DADEBIM);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).DAFINIM=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).DAFINIM);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).NBRPORT=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).NBRPORT);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).NBTYPKW=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).NBTYPKW);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).NBVITES=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).NBVITES);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).TXTBOIT=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).TXTBOIT);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).TYPCYLI=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).TYPCYLI);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).NBCVDIN=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).NBCVDIN);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).TCO2EMI=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).TCO2EMI);        
           PUT SKIP LIST('KA2151J_EXPTYP_O.TBIDELM(I).CDECOV2=',        
                          KA2151J_EXPTYP_O.TBIDELM(I).CDECOV2);        
         END;        
     END;        
         
   /* LECTURE SUIVANTE */        
   IF (KA2151J_EXPTYP_O.NBELMTB        
    <  KA2151J_EXPTYP_I.NBITEXP)        
    & JWB001.CDRTPGM = '' THEN        
     DO;        
       IEU001.CDDFSEG = 'CA2EUTAX';        
       JWB001.LSTSERV = 'F5_TYP.4';        
       SELECT(METHODE);        
         WHEN('VP') DO;        
             SSA2_A2EUT13.PAR    = ' ';        
             CALL XEU100(IEU001,FOUR,GN,DA2152,A2EUTAX,SSA2_A2EUT13);        
             SSA2_A2EUT13.PAR   = '(';        
           END;        
         WHEN('UT') DO;        
             SSA2_A2EUT23.PAR    = ' ';        
             CALL XEU100(IEU001,FOUR,GN,DA2152,A2EUTAX,SSA2_A2EUT23);        
             SSA2_A2EUT23.PAR   = '(';        
           END;        
         OTHER RETURN;        
       END;        
     END;        
 END;        
 IF JWB001.CDRTPGM = 'FIN'        
   THEN JWB001.CDRTPGM = '';        
         
 SELECT(DA2152.STATUS);        
   WHEN ('','GE','GB') DO;        
       IF KA2151J_EXPTYP_O.NBELMTB = 0        
         THEN JWB001.CDRTPGM = 'NOTFOUND';        
     END;        
   OTHER DO;        
     CALL ERR_DL1;        
     RETURN;        
   END;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F5_TYP';        
         
 CALL PT;        
 $END F5_TYP;        
         
 /*-------------------------------------------------------------------*/        
         
 F5_EQT: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F5_EQT';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE EXPLO_1P_XX_EQT  EXPLORATION PREMIERE PAGE EQUIPEMENT     */        
 /*         EXPLO_PS_XX_EQT  EXPLORATION EQUIPEMENT PAGE SUIVANTE     */        
 /*         EXPLO_PP_XX_EQT  EXPLORATION EQUIPEMENT PAGE PRECEDENTE   */        
 /* YY  =  VP => VOITURES PARTICULIERES                               */        
 /* YY  =  UT => UTILITAIRES                                          */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(02);        
 METHODE = SUBSTR(JWB001.LTNMMTH,10,2);        
         
 DCL  NOIDFLA_W             PIC'9';        
 DCL  NOIDFLP_W             PIC'9';        
 DCL  PRIHTVA_W             FIXED(09);        
 DCL  PRITVAC_W             FIXED(09);        
 DCL  CDTYPEQ_W             CHAR(01);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP LIST('CDTYPTB=',KA2151J_EXPEQT_I.CDTYPTB);        
     PUT SKIP LIST('NBITEXP=',KA2151J_EXPEQT_I.NBITEXP);        
     PUT SKIP LIST('NOIDTYP=',KA2151J_EXPEQT_I.NOIDTYP);        
     PUT SKIP LIST('NOIDADD=',KA2151J_EXPEQT_I.NOIDADD);        
     PUT SKIP LIST('ANNECTR=',KA2151J_EXPEQT_I.ANNECTR);        
     PUT SKIP LIST('CDTYPEQ=',KA2151J_EXPEQT_I.CDTYPEQ);        
     PUT SKIP LIST('CDMULTI=',KA2151J_EXPEQT_I.CDMULTI);        
     PUT SKIP LIST('DAFINIM=',KA2151J_EXPEQT_I.DAFINIM);        
     PUT SKIP LIST('CDGARAN=',KA2151J_EXPEQT_I.CDGARAN); ###################        
   END;        
         
 IF KA2151J_EXPEQT_I.NBITEXP = 0  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '007';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPEQT_I.NBITEXP > 50  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '008';        
     RETURN;        
   END;        
         
 IF ( METHODE = 'VP' & KA2151J_EXPEQT_I.CDTYPTB ^= '15' )        
  ! ( METHODE = 'UT' & KA2151J_EXPEQT_I.CDTYPTB ^= '25' ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPEQT_I.NOIDTYP = 0 THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF SUBSTR(JWB001.LTNMMTH,1,8) ^= 'EXPLO_1P'        
  & KA2151J_EXPEQT_I.NOIDADD = 0 THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '009';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPEQT_I.CDMULTI ^= 'Y' THEN        
   DO;        
     /* Construire la date pivot pour test validite equipement */        
     DAPIVOT_W = KA2151J_EXPEQT_I.ANNECTR;        
     IF DAPIVOT_W > 1800        
       THEN DAPIVOT_W = ((DAPIVOT_W - 1800) * 10000) + 1231;        
         
   END;        
 ELSE DAPIVOT_W = 0;        
         
 KA2151J_EXPEQT_O = '';        
         
 IEU001.CDDFSEG = 'CA2EUTAX';        
 JWB001.LSTSERV = 'F5_EQT.1';        
 IF METHODE = 'VP' THEN        
   DO;        
     SSA_A2EUT15.VALUE1 = KA2151J_EXPEQT_I.NOIDTYP;        
     SSA_A2EUT15.VALUE2 = KA2151J_EXPEQT_I.NOIDADD;        
     SSA_A2EUT15.VALUEF = '';        
     SSA_A2EUT15.OPER   = '> ';        
     /* PUT SKIP LIST('Premiere lecture =',SSA_A2EUT15);*/        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUTAX,SSA_A2EUT15);        
     SSA_A2EUT15.OPER  = '= ';        
   END;        
 IF METHODE = 'UT' THEN        
   DO;        
     SSA_A2EUT25.VALUE1 = KA2151J_EXPEQT_I.NOIDTYP;        
     SSA_A2EUT25.VALUE2 = KA2151J_EXPEQT_I.NOIDADD;        
     SSA_A2EUT25.VALUEF = '';        
     SSA_A2EUT25.OPER   = '> ';        
     /* PUT SKIP LIST('Premiere lecture =',SSA_A2EUT25);*/        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUTAX,SSA_A2EUT25);        
     SSA_A2EUT25.OPER  = '= ';        
   END;        
         
 /*        
 PUT SKIP LIST('Resultat lecture ,DA215.STATUS=',DA215.STATUS);        
 IF DA215.STATUS = '' THEN        
   PUT SKIP LIST('A2EUTAX=',A2EUTAX);        
   */        
         
 KA2151J_EXPEQT_O.NBELMTB = 0;        
         
 DO WHILE (DA215.STATUS = ''        
         & A2EUTAX.CDTYPTB = KA2151J_EXPEQT_I.CDTYPTB        
         & ( KA2151J_EXPEQT_O.NBELMTB        
         <   KA2151J_EXPEQT_I.NBITEXP)        
         & JWB001.CDRTPGM = '') ;        
         
   SELECT(METHODE);        
     WHEN('VP') DO;        
       A2EUT15_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT15';        
       JWB001.LSTSERV = 'F5_EQT.2';        
       CALL XEU100(IEU001,THREE,GCV,DA215,A2EUT15);        
       IF DA215.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDTYP_W = A2EUT15.NOIDTYP;        
       NOIDADD_W = A2EUT15.NOIDADD;        
       NOIDEQT_W = A2EUT15.NOIDEQT;        
       DATEDEB_W = A2EUT15.DATEDEB;        
       DATEFIN_W = A2EUT15.DATEFIN;        
       NOIDFLA_W = A2EUT15.NOIDFLA;        
       NOIDFLP_W = A2EUT15.NOIDFLP;        
       PRIHTVA_W = A2EUT15.PRIHTVA;        
       PRITVAC_W = A2EUT15.PRITVAC;        
     END;        
     WHEN('UT') DO;        
       A2EUT25_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT25';        
       JWB001.LSTSERV = 'F5_EQT.3';        
       CALL XEU100(IEU001,THREE,GCV,DA215,A2EUT25);        
       IF DA215.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDTYP_W = A2EUT25.NOIDTYP;        
       NOIDADD_W = A2EUT25.NOIDADD;        
       NOIDEQT_W = A2EUT25.NOIDEQT;        
       DATEDEB_W = A2EUT25.DATEDEB;        
       DATEFIN_W = A2EUT25.DATEFIN;        
       NOIDFLA_W = A2EUT25.NOIDFLA;        
       NOIDFLP_W = A2EUT25.NOIDFLP;        
       PRIHTVA_W = A2EUT25.PRIHTVA;        
       PRITVAC_W = A2EUT25.PRITVAC;        
     END;        
     OTHER;        
   END;        
   CDTYPEQ_W = '';        
   IF NOIDFLA_W = 0 & NOIDFLP_W = 0        
     THEN CDTYPEQ_W = 'S'; ###################################        
   IF ( NOIDFLA_W = 1 ! NOIDFLA_W = 2) & NOIDFLP_W = 0        
     THEN CDTYPEQ_W = 'O'; ###################################        
   IF NOIDFLA_W = 2 & NOIDFLP_W = 1        
     THEN CDTYPEQ_W = 'P'; ###################################        
   /*        
   PUT SKIP LIST('NOIDTYP=',NOIDTYP_W);        
   PUT SKIP LIST('NOIDADD=',NOIDADD_W);        
   PUT SKIP LIST('CDTYPEQ=',CDTYPEQ_W);        
   PUT SKIP LIST('NOIDEQT=',NOIDEQT_W);        
   */        
   /* Rupture Type   ? */        
   IF NOIDTYP_W ^= KA2151J_EXPEQT_I.NOIDTYP THEN        
     DO;        
       JWB001.CDRTPGM = 'FIN';        
     /*PUT SKIP LIST('Rupture NOIDTYP ...'); */        
     END;        
   ELSE        
     DO;        
       /* CHECK DES CRITeRES ... */        
       ITEM_OK = ON;        
       IF CDTYPEQ_W = ''        
         THEN ITEM_OK = OFF; #############################        
         
       IF KA2151J_EXPEQT_I.CDTYPEQ ^= ''        
        & ITEM_OK = ON THEN        
         DO;        
           IF INDEX(KA2151J_EXPEQT_I.CDTYPEQ,CDTYPEQ_W) = 0        
             THEN ITEM_OK = OFF;        
         END;        
         
       /* Tester l'annee de construction demandee */        
       /* --------------------------------------- */        
       /* Cki le 06.09.05 : On a des eqt dont datefin=2020717        
          et d'autres dont datedeb=2020718 avec DATEFIN=2040324        
          => ces eqt viennent deux fois !!! car l'annee est bonne        
          dans les 2 !!!        
          Si KA2151J_EXPEQT_I.CDMULTI = 'Y' => on prend tous les        
          equipements de l'annee (mme les doubles)        
          Si KA2151J_EXPEQT_I.CDMULTI ^= 'Y' => on teste la date de        
          fin de l'eqt. Si DATEFIN < 3112Annctr alors ne pas prendre        
          l'eqt. C'est qu'il y aura un autre apres dont        
          DATEFIN = 0 ou bien dont DATEFIN > 3112Annctr        
          Attention, si le vehicule a une date de fin d'importation,        
          les equipements ont aussi une date de fin de validite !!!        
          Dans ce cas, il ne faut pas chercher d'autres equipements !        
       */        
         
       IF KA2151J_EXPEQT_I.ANNECTR > 0        
        & ITEM_OK = ON THEN        
         DO;        
           ANNDEB_W = ANNDEB_Z + 1800;#############################        
           ANNFIN_W = ANNFIN_Z + 1800;#############################        
           /*        
           PUT SKIP LIST('Debut eqt : ANNDEB_Z=',ANNDEB_Z);        
           PUT SKIP LIST('Debut eqt : ANNDEB_W=',ANNDEB_W);        
           PUT SKIP LIST('Fin   eqt : ANNFIN_Z=',ANNFIN_Z);        
           PUT SKIP LIST('Fin   eqt : ANNFIN_W=',ANNFIN_W);        
           PUT SKIP LIST('Mois Fin eqt : MOIFIN_Z=',MOIFIN_Z);        
           */        
           IF KA2151J_EXPEQT_I.ANNECTR < ANNDEB_W        
             THEN ITEM_OK = OFF;        
             ELSE IF KA2151J_EXPEQT_I.ANNECTR > ANNFIN_W        
                    THEN IF ANNFIN_W > 1800        
                           THEN ITEM_OK = OFF;        
         
           /* Faut-il considerer uniquement les derniers valides        
              pour l'annee (on ne veut pas les multiples) ?        
              ps: si date fin eqt = 0=> c'est le dernier        
           */        
           IF KA2151J_EXPEQT_I.CDMULTI ^= 'Y'        
            & ITEM_OK = ON        
            & DATEFIN_W > 0 THEN        
             DO;        
               FINEQT_W = (ANNFIN_W * 100) + MOIFIN_Z; #####################        
           /*        
               PUT SKIP LIST('FINEQT_W=',FINEQT_W);        
           */        
         
               IF DATEFIN_W <= DAPIVOT_W THEN        
                 /* Fin eqt anterieure e fin annee demandee */        
                 /* => Ce n'est peut-tre pas le dernier    */        
                 DO;        
                   IF (KA2151J_EXPEQT_I.DAFINIM > 0        
                     & FINEQT_W ^= KA2151J_EXPEQT_I.DAFINIM )        
                     /*        
                     Cela veut dire que cet equipement n'est pas le        
                     dernier valide pour l'annee donnee ...        
                     */        
                     THEN ITEM_OK = OFF;        
                 END;        
             END;        
         END;        
     END;        
         
   /* Lire le libelle de l'equipement */        
   IF JWB001.CDRTPGM = ''        
    & ITEM_OK THEN        
     DO;        
       CALL LECT_LIBEQT(METHODE);        
       IF JWB001.CDRTPGM = 'NOTFOUND' THEN        
         DO;        
           ITEM_OK = OFF;        
           JWB001.CDRTPGM = '';        
         END;        
       ELSE                                           #############################################################        
         IF CDGARAN_W = 'Y'        
          & KA2151J_EXPEQT_I.CDGARAN ^= 'Y'        
           /* L'equipement trouve est une garantie et on a dit        
              que on ne les voulais pas dans l'exploration */        
           THEN ITEM_OK = OFF;        
     END;        
         
   /* CHARGER ITEM SELECTIONNE */        
   IF JWB001.CDRTPGM = ''        
    & ITEM_OK THEN        
     DO;        
       KA2151J_EXPEQT_O.NBELMTB = KA2151J_EXPEQT_O.NBELMTB + 1;        
       I = KA2151J_EXPEQT_O.NBELMTB;        
       KA2151J_EXPEQT_O.TBIDELM(I).NOIDADD = NOIDADD_W;        
       KA2151J_EXPEQT_O.TBIDELM(I).NOIDEQT = NOIDEQT_W;        
       KA2151J_EXPEQT_O.TBIDELM(I).DATEDEB = DATEDEB_W;        
       KA2151J_EXPEQT_O.TBIDELM(I).DATEFIN = DATEFIN_W;        
       KA2151J_EXPEQT_O.TBIDELM(I).CDTYPEQ = CDTYPEQ_W;        
       KA2151J_EXPEQT_O.TBIDELM(I).PRIHTVA = PRIHTVA_W;        
       KA2151J_EXPEQT_O.TBIDELM(I).PRITVAC = PRITVAC_W;        
       KA2151J_EXPEQT_O.TBIDELM(I).LTTXTEQ(1)=LIBEQT_FR;        
       KA2151J_EXPEQT_O.TBIDELM(I).LTTXTEQ(2)=LIBEQT_NL;        
       KA2151J_EXPEQT_O.TBIDELM(I).LTTXTST(1)=LIBEST_FR;        
       KA2151J_EXPEQT_O.TBIDELM(I).LTTXTST(2)=LIBEST_NL;        
       IF JWB001.CDTRACE = 9 THEN        
         DO;        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).NOIDADD=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).NOIDADD);        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).NOIDEQT=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).NOIDEQT);        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).LTTXTEQ(1)=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).LTTXTEQ(1));        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).LTTXTEQ(2)=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).LTTXTEQ(2));        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).LTTXTST(1)=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).LTTXTST(1));        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).LTTXTST(2)=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).LTTXTST(2));        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).CDTYPEQ=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).CDTYPEQ);        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).PRIHTVA=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).PRIHTVA);        
           PUT SKIP LIST('KA2151J_EXPEQT_O.TBIDELM(I).PRITVAC=',        
                          KA2151J_EXPEQT_O.TBIDELM(I).PRITVAC);        
         END;        
     END;        
         
   /* LECTURE SUIVANTE */        
   IF (KA2151J_EXPEQT_O.NBELMTB        
    <  KA2151J_EXPEQT_I.NBITEXP)        
    & JWB001.CDRTPGM = '' THEN        
     DO;        
       IEU001.CDDFSEG = 'CA2EUTAX';        
       JWB001.LSTSERV = 'F5_EQT.4';        
       SSA_A2EUTAX.PAR   = ' ';        
       CALL XEU100(IEU001,FOUR,GN,DA215,A2EUTAX,SSA_A2EUTAX);        
       SSA_A2EUTAX.PAR   = '(';        
     END;        
 END;        
 IF JWB001.CDRTPGM = 'FIN'        
   THEN JWB001.CDRTPGM = '';        
         
 SELECT(DA215.STATUS);        
   WHEN ('','GE','GB') DO;        
       IF KA2151J_EXPEQT_O.NBELMTB = 0        
         THEN JWB001.CDRTPGM = 'NOTFOUND';        
     END;        
   OTHER DO;        
     CALL ERR_DL1;        
     RETURN;        
   END;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F5_EQT';        
         
 CALL PT;        
 $END F5_EQT;        
         
 /*-------------------------------------------------------------------*/        
         
 F5_CON: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F5_CON';        
         
 CALL PT;        
 /*********************************************************************/        
 /* METHODE EXPLO_1P_XX_CON  EXPLORATION PREMIERE PAGE CONTENT PACK   */        
 /*         EXPLO_PS_XX_CON  EXPLORATION CONTENT PACK PAGE SUIVANTE   */        
 /*         EXPLO_PP_XX_CON  EXPLORATION CONTENT PACK PAGE PRECEDENTE */        
 /* YY  =  VP => VOITURES PARTICULIERES                               */        
 /* YY  =  UT => UTILITAIRES                                          */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(02);        
 METHODE = SUBSTR(JWB001.LTNMMTH,10,2);        
         
 DCL  PRIHTVA_W             FIXED(09);        
 DCL  PRITVAC_W             FIXED(09);        
 DCL  DEBLECT_W             FIXED(07);        
 DCL  DEBCOMP_W             FIXED(07);        
 DCL  DEB_CTR_W             FIXED(07);        
 DCL  FIN_CTR_W             FIXED(07);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP LIST('CDTYPTB=',KA2151J_EXPCON_I.CDTYPTB);        
     PUT SKIP LIST('NBITEXP=',KA2151J_EXPCON_I.NBITEXP);        
     PUT SKIP LIST('NOIDTYP=',KA2151J_EXPCON_I.NOIDTYP);        
     PUT SKIP LIST('NOIDPAC=',KA2151J_EXPCON_I.NOIDPAC);        
     PUT SKIP LIST('NOIDEQT=',KA2151J_EXPCON_I.NOIDEQT);        
     PUT SKIP LIST('DATEDEB=',KA2151J_EXPCON_I.DATEDEB);        
     PUT SKIP LIST('ANNECTR=',KA2151J_EXPCON_I.ANNECTR);        
     PUT SKIP LIST('CDMULTI=',KA2151J_EXPCON_I.CDMULTI);        
     PUT SKIP LIST('DAFINIM=',KA2151J_EXPCON_I.DAFINIM);        
   END;        
         
 IF KA2151J_EXPCON_I.NBITEXP = 0  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '007';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPCON_I.NBITEXP > 50  THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '008';        
     RETURN;        
   END;        
         
 IF ( METHODE = 'VP' & KA2151J_EXPCON_I.CDTYPTB ^= '16' )        
  ! ( METHODE = 'UT' & KA2151J_EXPCON_I.CDTYPTB ^= '26' ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF KA2151J_EXPCON_I.NOIDTYP = 0        
  ! KA2151J_EXPCON_I.NOIDPAC = 0 THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '011';        
     RETURN;        
   END;        
         
 IF SUBSTR(JWB001.LTNMMTH,1,8) ^= 'EXPLO_1P'        
  & ( KA2151J_EXPCON_I.NOIDEQT = 0        
  !   KA2151J_EXPCON_I.DATEDEB = 0 ) THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '009';        
     RETURN;        
   END;        
         
 DEB_CTR_W = KA2151J_EXPCON_I.ANNECTR;        
 IF DEB_CTR_W > 1800        
   THEN DEB_CTR_W = ((DEB_CTR_W - 1800) * 10000) + 0101;        
   ELSE DEB_CTR_W = 0;        
 FIN_CTR_W = KA2151J_EXPCON_I.ANNECTR;        
 IF FIN_CTR_W > 1800        
   THEN FIN_CTR_W = ((FIN_CTR_W - 1800) * 10000) + 1231;        
   ELSE FIN_CTR_W = 0;        
         
 KA2151J_EXPCON_O = '';        
         
 /* Preparer premiere lecture */        
 /* ------------------------- */        
 IF SUBSTR(JWB001.LTNMMTH,1,8) = 'EXPLO_1P'        
   THEN DEBLECT_W = 9999999 - FIN_CTR_W;        
   ELSE DO;  /* Repositionnement avec PS/PP :        
                on connait le NOIDEQT et la date debut */        
          DEBLECT_W = 9999999 - KA2151J_EXPCON_I.DATEDEB;        
        END;        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST('DEB_CTR_W=',DEB_CTR_W);        
     PUT SKIP LIST('FIN_CTR_W=',FIN_CTR_W);        
     PUT SKIP LIST('DEBLECT_W=',DEBLECT_W);        
   END;        
         
 IEU001.CDDFSEG = 'CA2EUTAX';        
 IF METHODE = 'VP' THEN        
   DO;        
     JWB001.LSTSERV = 'F5_CON.1';        
     SSA_A2EUT16.VALUE1 = KA2151J_EXPCON_I.NOIDTYP;        
     SSA_A2EUT16.VALUE2 = KA2151J_EXPCON_I.NOIDPAC;        
     SSA_A2EUT16.VALUE3 = KA2151J_EXPCON_I.NOIDEQT;        
     IF SUBSTR(JWB001.LTNMMTH,1,8) = 'EXPLO_1P'        
       THEN SSA_A2EUT16.VALUE4 = 0;        
       ELSE SSA_A2EUT16.VALUE4 = DEBLECT_W;        
     SSA_A2EUT16.VALUEF = '';        
     SSA_A2EUT16.OPER   = '> ';        
     IF JWB001.CDTRACE = 9 THEN        
       DO;        
         PUT SKIP LIST('Premiere lecture ,SSA_A2EUT16=',        
                        SSA_A2EUT16);        
       END;        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUTAX,SSA_A2EUT16);        
     SSA_A2EUT16.OPER  = '= ';        
   END;        
 IF METHODE = 'UT' THEN        
   DO;        
     JWB001.LSTSERV = 'F5_CON.2';        
     SSA_A2EUT26.VALUE1 = KA2151J_EXPCON_I.NOIDTYP;        
     SSA_A2EUT26.VALUE2 = KA2151J_EXPCON_I.NOIDPAC;        
     SSA_A2EUT26.VALUE3 = KA2151J_EXPCON_I.NOIDEQT;        
     IF SUBSTR(JWB001.LTNMMTH,1,8) = 'EXPLO_1P'        
       THEN SSA_A2EUT26.VALUE4 = 0;        
       ELSE SSA_A2EUT26.VALUE4 = DEBLECT_W;        
     SSA_A2EUT26.VALUE4 = DEBLECT_W;        
     SSA_A2EUT26.VALUEF = '';        
     SSA_A2EUT26.OPER   = '> ';        
     IF JWB001.CDTRACE = 9 THEN        
       DO;        
         PUT SKIP LIST('Premiere lecture ,SSA_A2EUT26=',        
                        SSA_A2EUT26);        
       END;        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUTAX,SSA_A2EUT26);        
     SSA_A2EUT26.OPER  = '= ';        
   END;        
         
 IF JWB001.CDTRACE = 9 THEN        
   DO;        
     PUT SKIP LIST('Resultat premiere lecture ,DA215.STATUS=',        
                    DA215.STATUS);        
   END;        
 IF DA215.STATUS = '' THEN        
   SELECT(METHODE);        
     WHEN('VP') DO;        
       A2EUT16_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT16';        
       JWB001.LSTSERV = 'F5_CON.3';        
       CALL XEU100(IEU001,THREE,GCV,DA215,A2EUT16);        
       IF DA215.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDTYP_W = A2EUT16.NOIDTYP;        
       NOIDPAC_W = A2EUT16.NOIDPAC;        
       NOIDEQT_W = A2EUT16.NOIDEQT;        
       DEBCOMP_W = A2EUT16.DATEDEB;        
       DATEDEB_W = 9999999 - A2EUT16.DATEDEB;        
       DATEFIN_W = A2EUT16.DATEFIN;        
       PRIHTVA_W = A2EUT16.PRIHTVA;        
       PRITVAC_W = A2EUT16.PRITVAC;        
     END;        
     WHEN('UT') DO;        
       A2EUT26_R = A2EUTAX_R;        
       IEU001.CDDFSEG = 'CA2EUT26';        
       JWB001.LSTSERV = 'F5_CON.4';        
       CALL XEU100(IEU001,THREE,GCV,DA215,A2EUT26);        
       IF DA215.STATUS ^= '' THEN        
         DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       NOIDTYP_W = A2EUT26.NOIDTYP;        
       NOIDPAC_W = A2EUT26.NOIDPAC;        
       NOIDEQT_W = A2EUT26.NOIDEQT;        
       DEBCOMP_W = A2EUT26.DATEDEB;        
       DATEDEB_W = 9999999 - A2EUT26.DATEDEB;        
       DATEFIN_W = A2EUT26.DATEFIN;        
       PRIHTVA_W = A2EUT26.PRIHTVA;        
       PRITVAC_W = A2EUT26.PRITVAC;        
     END;        
     OTHER;        
   END;        
 IF DA215.STATUS = ''        
  & JWB001.CDTRACE = 9 THEN        
   DO;        
     PUT SKIP LIST('A2EUTAX.CDTYPTB=',A2EUTAX.CDTYPTB);        
     PUT SKIP LIST('NOIDTYP_W=',NOIDTYP_W);        
     PUT SKIP LIST('NOIDPAC_W=',NOIDPAC_W);        
     PUT SKIP LIST('NOIDEQT_W=',NOIDEQT_W);        
     PUT SKIP LIST('DEBCOMP_W=',DEBCOMP_W);        
     PUT SKIP LIST('DATEDEB_W=',DATEDEB_W);        
     PUT SKIP LIST('DATEFIN_W=',DATEFIN_W);        
     PUT SKIP LIST('PRIHTVA_W=',PRIHTVA_W);        
     PUT SKIP LIST('PRITVAC_W=',PRITVAC_W);        
   END;        
         
 KA2151J_EXPCON_O.NBELMTB = 0;        
         
 DO WHILE (DA215.STATUS = ''        
         & A2EUTAX.CDTYPTB = KA2151J_EXPCON_I.CDTYPTB        
         & ( KA2151J_EXPCON_O.NBELMTB        
         <   KA2151J_EXPCON_I.NBITEXP)        
         & NOIDTYP_W = KA2151J_EXPCON_I.NOIDTYP        
         & NOIDPAC_W = KA2151J_EXPCON_I.NOIDPAC        
         & JWB001.CDRTPGM = '');        
         
   OLDNEQT_W = NOIDEQT_W;        
   JWB001.CDRTPGM = '';        
   IF JWB001.CDTRACE = 9        
     THEN PUT SKIP LIST('Boucle pour equipement =',OLDNEQT_W);        
         
   /* Boucler sur les multiples segments d'un meme equipement */        
   /* ------------------------------------------------------- */        
   DO WHILE (DA215.STATUS = ''        
         & A2EUTAX.CDTYPTB = KA2151J_EXPCON_I.CDTYPTB        
         & ( KA2151J_EXPCON_O.NBELMTB        
         <   KA2151J_EXPCON_I.NBITEXP)        
         & NOIDTYP_W = KA2151J_EXPCON_I.NOIDTYP        
         & NOIDPAC_W = KA2151J_EXPCON_I.NOIDPAC        
         & OLDNEQT_W = NOIDEQT_W        
         & JWB001.CDRTPGM = '');        
         
     ITEM_OK = ON;        
         
     /* Tester l'annee de construction demandee */        
     /* --------------------------------------- */        
     IF KA2151J_EXPCON_I.ANNECTR > 0 THEN        
       /* Prendre uniqt ceux de l'annee de construction donnee */        
       DO;        
         IF DEBCOMP_W < DEBLECT_W        
           THEN ITEM_OK = OFF;        
           ELSE DO;        
                  IF DATEFIN_W > 0 THEN        
                    DO;        
                      IF DATEFIN_W < DEB_CTR_W THEN        
                        DO;        
                          ITEM_OK = OFF;        
                          JWB001.CDRTPGM = 'FIN';        
                        END;        
                    END;        
                END;        
       END;        
     ELSE; ################################################################        
         
     IF ITEM_OK THEN        
       DO;        
         /* Lire le libelle de l'equipement */        
         CALL LECT_LIBEQT(METHODE);        
         IF JWB001.CDRTPGM = 'NOTFOUND' THEN        
           DO;        
             ITEM_OK = OFF;        
             JWB001.CDRTPGM = '';        
           END;        
       END;        
         
     /* CHARGER ITEM SELECTIONNE */        
     IF JWB001.CDRTPGM = ''        
      & ITEM_OK THEN        
       DO;        
         KA2151J_EXPCON_O.NBELMTB = KA2151J_EXPCON_O.NBELMTB + 1;        
         I = KA2151J_EXPCON_O.NBELMTB;        
         KA2151J_EXPCON_O.TBIDELM(I).NOIDPAC = NOIDPAC_W;        
         KA2151J_EXPCON_O.TBIDELM(I).NOIDEQT = NOIDEQT_W;        
         KA2151J_EXPCON_O.TBIDELM(I).DATEDEB = DATEDEB_W;        
         KA2151J_EXPCON_O.TBIDELM(I).DATEFIN = DATEFIN_W;        
         KA2151J_EXPCON_O.TBIDELM(I).PRIHTVA = PRIHTVA_W;        
         KA2151J_EXPCON_O.TBIDELM(I).PRITVAC = PRITVAC_W;        
         KA2151J_EXPCON_O.TBIDELM(I).LTTXTEQ(1)=LIBEQT_FR;        
         KA2151J_EXPCON_O.TBIDELM(I).LTTXTEQ(2)=LIBEQT_NL;        
         KA2151J_EXPCON_O.TBIDELM(I).LTTXTST(1)=LIBEST_FR;        
         KA2151J_EXPCON_O.TBIDELM(I).LTTXTST(2)=LIBEST_NL;        
         IF JWB001.CDTRACE = 9 THEN        
           DO;        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).NOIDPAC=',        
                            KA2151J_EXPCON_O.TBIDELM(I).NOIDPAC);        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).NOIDEQT=',        
                            KA2151J_EXPCON_O.TBIDELM(I).NOIDEQT);        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).LTTXTEQ(1)=',        
                            KA2151J_EXPCON_O.TBIDELM(I).LTTXTEQ(1));        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).LTTXTEQ(2)=',        
                            KA2151J_EXPCON_O.TBIDELM(I).LTTXTEQ(2));        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).LTTXTST(1)=',        
                            KA2151J_EXPCON_O.TBIDELM(I).LTTXTST(1));        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).LTTXTST(2)=',        
                            KA2151J_EXPCON_O.TBIDELM(I).LTTXTST(2));        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).DATEDEB=',        
                            KA2151J_EXPCON_O.TBIDELM(I).DATEDEB);        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).DATEFIN=',        
                            KA2151J_EXPCON_O.TBIDELM(I).DATEFIN);        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).PRIHTVA=',        
                            KA2151J_EXPCON_O.TBIDELM(I).PRIHTVA);        
             PUT SKIP LIST('KA2151J_EXPCON_O.TBIDELM(I).PRITVAC=',        
                            KA2151J_EXPCON_O.TBIDELM(I).PRITVAC);        
           END;        
         /* Voir si on doit lire un suivant ... */        
         IF KA2151J_EXPCON_I.CDMULTI = 'Y'        
          & DATEDEB_W > DEB_CTR_W        
           THEN; #######################################################        
           ELSE JWB001.CDRTPGM = 'FIN';        
       END;        
         
     /* LECTURE SUIVANTE */        
     IF (KA2151J_EXPCON_O.NBELMTB        
      <  KA2151J_EXPCON_I.NBITEXP) THEN        
       DO;        
         IF JWB001.CDRTPGM = '' THEN        
           /* LIRE TYP/PAC/EQT/DATE SUIVANTE */        
           DO;        
             IEU001.CDDFSEG = 'CA2EUTAX';        
             JWB001.LSTSERV = 'F5_CON.5';        
             SSA_A2EUTAX.PAR   = ' ';        
             IF JWB001.CDTRACE = 9 THEN        
               DO;        
                 PUT SKIP LIST('lecture cle suivante ');        
               END;        
             CALL XEU100(IEU001,FOUR,GN,DA215,A2EUTAX,SSA_A2EUTAX);        
             SSA_A2EUTAX.PAR   = '(';        
           END;        
         ELSE ######################################################        
           DO;        
             JWB001.CDRTPGM = ''; ###############################        
             IEU001.CDDFSEG = 'CA2EUTAX';        
             IF METHODE = 'VP' THEN        
               DO;        
                 JWB001.LSTSERV = 'F5_CON.6';        
                 SSA_A2EUT16.VALUE1 = KA2151J_EXPCON_I.NOIDTYP;        
                 SSA_A2EUT16.VALUE2 = KA2151J_EXPCON_I.NOIDPAC;        
                 SSA_A2EUT16.VALUE3 = OLDNEQT_W;        
                 SSA_A2EUT16.VALUE4 = 9999999;        
                 SSA_A2EUT16.VALUEF = '';        
                 SSA_A2EUT16.OPER   = '> ';        
                 IF JWB001.CDTRACE = 9 THEN        
                   DO;        
                     PUT SKIP LIST('Sauter vers equipement suivant ',        
                                    SSA_A2EUT16);        
                   END;        
                 CALL XEU100(IEU001,FOUR,GU,DA215,A2EUTAX,SSA_A2EUT16);        
                 SSA_A2EUT16.OPER  = '= ';        
               END;        
             IF METHODE = 'UT' THEN        
               DO;        
                 JWB001.LSTSERV = 'F5_CON.7';        
                 SSA_A2EUT26.VALUE1 = KA2151J_EXPCON_I.NOIDTYP;        
                 SSA_A2EUT26.VALUE2 = KA2151J_EXPCON_I.NOIDPAC;        
                 SSA_A2EUT26.VALUE3 = OLDNEQT_W;        
                 SSA_A2EUT26.VALUE4 = 9999999;        
                 SSA_A2EUT26.VALUEF = '';        
                 SSA_A2EUT26.OPER   = '> ';        
                 IF JWB001.CDTRACE = 9 THEN        
                   DO;        
                     PUT SKIP LIST('Sauter vers equipement suivant ',        
                                    SSA_A2EUT26);        
                   END;        
                 CALL XEU100(IEU001,FOUR,GU,DA215,A2EUTAX,SSA_A2EUT26);        
                 SSA_A2EUT26.OPER  = '= ';        
               END;        
           END;        
           IF DA215.STATUS = '' THEN        
             SELECT(METHODE);        
               WHEN('VP') DO;        
                 A2EUT16_R = A2EUTAX_R;        
                 IEU001.CDDFSEG = 'CA2EUT16';        
                 JWB001.LSTSERV = 'F5_CON.8';        
                 CALL XEU100(IEU001,THREE,GCV,DA215,A2EUT16);        
                 IF DA215.STATUS ^= '' THEN        
                   DO;        
                     CALL ERR_DL1;        
                     RETURN;        
                   END;        
                 NOIDTYP_W = A2EUT16.NOIDTYP;        
                 NOIDPAC_W = A2EUT16.NOIDPAC;        
                 NOIDEQT_W = A2EUT16.NOIDEQT;        
                 DEBCOMP_W = A2EUT16.DATEDEB;        
                 DATEDEB_W = 9999999 - A2EUT16.DATEDEB;        
                 DATEFIN_W = A2EUT16.DATEFIN;        
                 PRIHTVA_W = A2EUT16.PRIHTVA;        
                 PRITVAC_W = A2EUT16.PRITVAC;        
               END;        
               WHEN('UT') DO;        
                 A2EUT26_R = A2EUTAX_R;        
                 IEU001.CDDFSEG = 'CA2EUT26';        
                 JWB001.LSTSERV = 'F5_CON.9';        
                 CALL XEU100(IEU001,THREE,GCV,DA215,A2EUT26);        
                 IF DA215.STATUS ^= '' THEN        
                   DO;        
                     CALL ERR_DL1;        
                     RETURN;        
                   END;        
                 NOIDTYP_W = A2EUT26.NOIDTYP;        
                 NOIDPAC_W = A2EUT26.NOIDPAC;        
                 NOIDEQT_W = A2EUT26.NOIDEQT;        
                 DEBCOMP_W = A2EUT26.DATEDEB;        
                 DATEDEB_W = 9999999 - A2EUT26.DATEDEB;        
                 DATEFIN_W = A2EUT26.DATEFIN;        
                 PRIHTVA_W = A2EUT26.PRIHTVA;        
                 PRITVAC_W = A2EUT26.PRITVAC;        
               END;        
               OTHER;        
             END;        
         IF DA215.STATUS = ''        
          & JWB001.CDTRACE = 9 THEN        
           DO;        
             PUT SKIP LIST('Resultat lecture suivante :');        
             PUT SKIP LIST('A2EUTAX.CDTYPTB=',A2EUTAX.CDTYPTB);        
             PUT SKIP LIST('NOIDTYP_W=',NOIDTYP_W);        
             PUT SKIP LIST('NOIDPAC_W=',NOIDPAC_W);        
             PUT SKIP LIST('NOIDEQT_W=',NOIDEQT_W);        
             PUT SKIP LIST('DEBCOMP_W=',DEBCOMP_W);        
             PUT SKIP LIST('DATEDEB_W=',DATEDEB_W);        
             PUT SKIP LIST('DATEFIN_W=',DATEFIN_W);        
             PUT SKIP LIST('PRIHTVA_W=',PRIHTVA_W);        
             PUT SKIP LIST('PRITVAC_W=',PRITVAC_W);        
           END;        
       END;        
   END;        
 END;        
 IF JWB001.CDRTPGM = 'FIN'        
   THEN JWB001.CDRTPGM = '';        
         
 SELECT(DA215.STATUS);        
   WHEN ('','GE','GB') DO;        
       IF KA2151J_EXPCON_O.NBELMTB = 0        
         THEN JWB001.CDRTPGM = 'NOTFOUND';        
     END;        
   OTHER DO;        
      CALL ERR_DL1;        
      RETURN;        
   END;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F5_CON';        
         
 CALL PT;        
 $END F5_CON;        
 /*-------------------------------------------------------------------*/        
         
 LECT_LIBEQT: PROC (TYP_P) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'LECT_LIBEQT';        
         
 CALL PT;        
 /*********************************************************************/        
 /*             LIRE LE LIBELLE D'UN EQUIPEMENT                       */        
 /*********************************************************************/        
 DCL  TYP_P             CHAR(02);        
 LIBEQT_FR = '';        
 LIBEQT_NL = '';        
 LIBEST_FR = '';        
 LIBEST_NL = '';        
 CDGARAN_W = '';        
         
 SELECT(TYP_P);        
   WHEN('VP') DO;        
       IEU001.CDDFSEG = 'CA2EUT17';        
       SSA_A2EUT17.VALUET = '17';        
       SSA_A2EUT17.VALUE1 = NOIDEQT_W;        
       SSA_A2EUT17.VALUEF = '';        
       JWB001.LSTSERV = 'LEQT.1';        
       CALL XEU100(IEU001,FOUR,GU,DA215$,A2EUT17,SSA_A2EUT17);        
       SELECT(DA215$.STATUS);        
         WHEN(' ') DO;        
             LIBEQT_FR = A2EUT17.LTTXTEQ(1);        
             LIBEQT_NL = A2EUT17.LTTXTEQ(2);        
             LIBEST_FR = A2EUT17.LTTXTST(1);        
             LIBEST_NL = A2EUT17.LTTXTST(2);        
 ############# IF SUBSTR(A2EUT17.TXTESAC,1,6) = '007525'        
               THEN CDGARAN_W = 'Y';        
           END;        
         WHEN('GB','GE') JWB001.CDRTPGM = 'NOTFOUND';        
         OTHER DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       END;        
     END;        
   WHEN('UT') DO;        
       IEU001.CDDFSEG = 'CA2EUT27';        
       SSA_A2EUT27.VALUET = '27';        
       SSA_A2EUT27.VALUE1 = NOIDEQT_W;        
       SSA_A2EUT27.VALUEF = '';        
       JWB001.LSTSERV = 'LEQT.2';        
       CALL XEU100(IEU001,FOUR,GU,DA215$,A2EUT27,SSA_A2EUT27);        
       SELECT(DA215$.STATUS);        
         WHEN(' ') DO;        
             LIBEQT_FR = A2EUT27.LTTXTEQ(1);        
             LIBEQT_NL = A2EUT27.LTTXTEQ(2);        
             LIBEST_FR = A2EUT27.LTTXTST(1);        
             LIBEST_NL = A2EUT27.LTTXTST(2);        
 ############# IF SUBSTR(A2EUT27.TXTESAC,1,6) = '007525'        
               THEN CDGARAN_W = 'Y';        
           END;        
         WHEN('GB','GE') JWB001.CDRTPGM = 'NOTFOUND';        
         OTHER DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       END;        
     END;        
   OTHER;        
 END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END LECT_LIBEQT';        
         
 CALL PT;        
 $END LECT_LIBEQT;        
         
 /*-------------------------------------------------------------------*/        
         
 F6: PROC (SEG_P) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F6';        
         
 CALL PT;        
 /*********************************************************************/        
 /*             CHERCHER LE NOIDMAR ET NOIDMOD D'UN NOIDTYP           */        
 /*             DANS DA216 INDEX 10 ou 20                             */        
 /* METHODE MAR_MOD_YY_TYP                                            */        
 /*     YY = VP         Pour NOIDTYP VOITURES                         */        
 /*     YY = UT         Pour NOIDTYP UTILITAIRES                      */        
 /*********************************************************************/        
 DCL  SEG_P             CHAR(02);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP DATA(KA2151J.INPUT);        
   END;        
         
 SELECT(SEG_P);        
         
   WHEN('10','20') DO;        
       IF KA2151J_A2IXEUT_I.NOIDTYP = 0 THEN        
         DO;        
           JWB001.CDRTPGM = 'KA2151' !! '003';        
           RETURN;        
         END;        
       NOIDTYP_W = KA2151J_A2IXEUT_I.NOIDTYP;        
     END;        
   WHEN('12','13','22','23') DO;        
       IF KA2151J_A2IXEUT_I.NOIDEQT = 0 THEN        
         DO;        
           JWB001.CDRTPGM = 'KA2151' !! '003';        
           RETURN;        
         END;        
       NOIDEQT_W = KA2151J_A2IXEUT_I.NOIDEQT;        
     END;        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '010';        
       RETURN;        
     END;        
 END;        
         
 KA2151J_A2IXEUT_O = '';        
         
 SELECT(SEG_P);        
         
   WHEN('10','20') DO;        
       IEU001.CDDFSEG = 'CA2IXEUT';        
       SSA_A2IXEUT.VALUET = SEG_P;        
       SSA_A2IXEUT.VALUE1 = NOIDTYP_W;        
       SSA_A2IXEUT.VALUE2 = '';        
       SSA_A2IXEUT.OPER   = '>=';        
         
       JWB001.LSTSERV = 'F6.1';        
       CALL XEU100(IEU001,FOUR,GU,DA216,A2IXEUT,SSA_A2IXEUT);        
       SSA_A2IXEUT.OPER   = '= ';        
         
       SELECT(DA216.STATUS);        
         WHEN(' ') DO;        
             IF A2IXEUT.CDTYIDX ^= SEG_P THEN        
               DO;        
                 JWB001.CDRTPGM = 'NOTFOUND';        
                 RETURN;        
               END;        
             NOIDTYP_W = SUBSTR(A2IXEUT.LTIDX01,1,7);        
             IF NOIDTYP_W ^= KA2151J_A2IXEUT_I.NOIDTYP THEN        
               DO;        
                 JWB001.CDRTPGM = 'NOTFOUND';        
               END;        
             ELSE        
               DO;        
                 NOIDMOD_W = SUBSTR(A2IXEUT.LTIDX01,8,7);        
                 NOIDMAR_W = SUBSTR(A2IXEUT.LTIDX01,15,7);        
                 KA2151J_A2IXEUT_O.NOIDTYP = NOIDTYP_W;        
                 KA2151J_A2IXEUT_O.NOIDMAR = NOIDMAR_W;        
                 KA2151J_A2IXEUT_O.NOIDMOD = NOIDMOD_W;        
               END;        
           END;        
         WHEN('GE','GB') JWB001.CDRTPGM = 'NOTFOUND';        
         OTHER DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       END;        
     END;        
         
   WHEN('12','22') DO;        
       IEU001.CDDFSEG = 'CA2IXEUT';        
       SSA_A2IXEUT.VALUET = SEG_P;        
       SSA_A2IXEUT.VALUE1 = NOIDEQT_W;        
       SSA_A2IXEUT.VALUE2 = '';        
       SSA_A2IXEUT.OPER   = '>=';        
         
       JWB001.LSTSERV = 'F6.2';        
       CALL XEU100(IEU001,FOUR,GU,DA216,A2IXEUT,SSA_A2IXEUT);        
       SSA_A2IXEUT.OPER   = '= ';        
         
       SELECT(DA216.STATUS);        
         WHEN(' ') DO;        
             IF A2IXEUT.CDTYIDX ^= SEG_P THEN        
               DO;        
                 JWB001.CDRTPGM = 'NOTFOUND';        
                 RETURN;        
               END;        
             NOIDEQT_W = SUBSTR(A2IXEUT.LTIDX01,1,7);        
             IF NOIDEQT_W ^= KA2151J_A2IXEUT_I.NOIDEQT THEN        
               DO;        
                 JWB001.CDRTPGM = 'NOTFOUND';        
               END;        
             ELSE        
               DO;        
                 NOIDADD_W = SUBSTR(A2IXEUT.LTIDX01,8,11);        
                 NOIDTYP_W = SUBSTR(A2IXEUT.LTIDX02,1,7);        
                 KA2151J_A2IXEUT_O.NOIDTYP = NOIDTYP_W;        
                 KA2151J_A2IXEUT_O.NOIDADD = NOIDADD_W;        
               END;        
           END;        
         WHEN('GE','GB') JWB001.CDRTPGM = 'NOTFOUND';        
         OTHER DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       END;        
     END;        
         
   WHEN('13','23') DO;        
       IEU001.CDDFSEG = 'CA2IXEUT';        
       SSA_A2IXEUT.VALUET = SEG_P;        
       SSA_A2IXEUT.VALUE1 = NOIDEQT_W;        
       SSA_A2IXEUT.VALUE2 = '';        
       SSA_A2IXEUT.OPER   = '>=';        
         
       JWB001.LSTSERV = 'F6.3';        
       CALL XEU100(IEU001,FOUR,GU,DA216,A2IXEUT,SSA_A2IXEUT);        
       SSA_A2IXEUT.OPER   = '= ';        
         
       SELECT(DA216.STATUS);        
         WHEN(' ') DO;        
             IF A2IXEUT.CDTYIDX ^= SEG_P THEN        
               DO;        
                 JWB001.CDRTPGM = 'NOTFOUND';        
                 RETURN;        
               END;        
             NOIDEQT_W = SUBSTR(A2IXEUT.LTIDX01,1,7);        
             IF NOIDEQT_W ^= KA2151J_A2IXEUT_I.NOIDEQT THEN        
               DO;        
                 JWB001.CDRTPGM = 'NOTFOUND';        
               END;        
             ELSE        
               DO;        
                 NOIDPAC_W = SUBSTR(A2IXEUT.LTIDX01,8,7);        
                 NOIDTYP_W = SUBSTR(A2IXEUT.LTIDX02,1,7);        
                 KA2151J_A2IXEUT_O.NOIDTYP = NOIDTYP_W;        
                 KA2151J_A2IXEUT_O.NOIDPAC = NOIDPAC_W;        
               END;        
           END;        
         WHEN('GE','GB') JWB001.CDRTPGM = 'NOTFOUND';        
         OTHER DO;        
           CALL ERR_DL1;        
           RETURN;        
         END;        
       END;        
     END;        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '001';        
       RETURN;        
     END;        
 END;        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => OUTPUT =');        
     PUT SKIP DATA(KA2151J.OUTPUT);        
   END;        
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F6';        
         
 CALL PT;        
 $END F6;        
         
 /*-------------------------------------------------------------------*/        
         
 F7: PROC (METHODE) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F7';        
         
 CALL PT;        
 /*********************************************************************/        
 /*             CHERCHER LE PRIX D'UN VEHICULE POUR UNE ANNEE DONNEE  */        
 /* METHODE YY_PRIX                                                   */        
 /*     YY = VP         Pour NOIDTYP VOITURES                         */        
 /*     YY = UT         Pour NOIDTYP UTILITAIRES                      */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(02);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP LIST('CDTYPTB=',KA2151J_PRIX_I.CDTYPTB);        
     PUT SKIP LIST('NOIDTYP=',KA2151J_PRIX_I.NOIDTYP);        
     PUT SKIP LIST('ANNECTR=',KA2151J_PRIX_I.ANNECTR);        
   END;        
         
 /* CHECKER LES DATA EN INPUT */        
         
 SELECT;        
   WHEN(METHODE = 'VP' & KA2151J_PRIX_I.CDTYPTB = '14');        
   WHEN(METHODE = 'UT' & KA2151J_PRIX_I.CDTYPTB = '24');        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
 IF KA2151J_PRIX_I.NOIDTYP = 0 THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '003';        
     RETURN;        
   END;        
         
 KA2151J_PRIX_O = '';        
         
 DATEDEB_W = 0;        
 IF KA2151J_PRIX_I.ANNECTR > 0        
  & KA2151J_PRIX_I.ANNECTR > 1800 THEN        
   DO;        
     DATEDEB_W = ((KA2151J_PRIX_I.ANNECTR - 1800) * 10000) + 1231;        
     DATEDEB_W = 9999999 - DATEDEB_W;        
   END;        
         
 IEU001.CDDFSEG   = 'CA2EUTAX';        
 JWB001.LSTSERV   = 'F7.1';        
 IF METHODE = 'VP' THEN        
   DO;        
     SSA_A2EUT14.VALUET = KA2151J_PRIX_I.CDTYPTB;        
     SSA_A2EUT14.VALUE1 = KA2151J_PRIX_I.NOIDTYP;        
     SSA_A2EUT14.VALUE2 = DATEDEB_W;        
     SSA_A2EUT14.VALUEF = '';        
     SSA_A2EUT14.OPER   = '>=';        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT14,SSA_A2EUT14);        
     SSA_A2EUT14.OPER   = '= ';        
     SELECT(DA215.STATUS);        
       WHEN(' ') DO;        
         IF A2EUT14.NOIDTYP ^= KA2151J_PRIX_I.NOIDTYP        
           THEN JWB001.CDRTPGM = 'NOTFOUND';        
           ELSE        
             DO;        
               KA2151J_PRIX_O.DATEDEB = 9999999 - A2EUT14.DATEDEB;        
               KA2151J_PRIX_O.PRIHTVA = A2EUT14.PRIHTVA;        
               KA2151J_PRIX_O.PRITVAC = A2EUT14.PRITVAC;        
               KA2151J_PRIX_O.TAUXTVA = A2EUT14.TAUXTVA;        
             END;        
       END;        
       WHEN('GE','GB') JWB001.CDRTPGM = 'NOTFOUND';        
       OTHER DO;        
         CALL ERR_DL1;        
         RETURN;        
       END;        
     END;        
   END;        
 ELSE        
   DO;        
     SSA_A2EUT24.VALUET = KA2151J_PRIX_I.CDTYPTB;        
     SSA_A2EUT24.VALUE1 = KA2151J_PRIX_I.NOIDTYP;        
     SSA_A2EUT24.VALUE2 = DATEDEB_W;        
     SSA_A2EUT24.VALUEF = '';        
     SSA_A2EUT24.OPER   = '>=';        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT24,SSA_A2EUT24);        
     SSA_A2EUT24.OPER   = '= ';        
     SELECT(DA215.STATUS);        
       WHEN(' ') DO;        
         IF A2EUT24.NOIDTYP ^= KA2151J_PRIX_I.NOIDTYP        
           THEN JWB001.CDRTPGM = 'NOTFOUND';        
           ELSE        
             DO;        
               KA2151J_PRIX_O.DATEDEB = 9999999 - A2EUT24.DATEDEB;        
               KA2151J_PRIX_O.PRIHTVA = A2EUT24.PRIHTVA;        
               KA2151J_PRIX_O.PRITVAC = A2EUT24.PRITVAC;        
               KA2151J_PRIX_O.TAUXTVA = A2EUT24.TAUXTVA;        
             END;        
       END;        
       WHEN('GE','GB') JWB001.CDRTPGM = 'NOTFOUND';        
       OTHER DO;        
         CALL ERR_DL1;        
         RETURN;        
       END;        
     END;        
   END;        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => OUTPUT=');        
     PUT SKIP LIST('DATEDEB=',KA2151J_PRIX_O.DATEDEB);        
     PUT SKIP LIST('PRIHTVA=',KA2151J_PRIX_O.PRIHTVA);        
     PUT SKIP LIST('PRITVAC=',KA2151J_PRIX_O.PRITVAC);        
     PUT SKIP LIST('TAUXTVA=',KA2151J_PRIX_O.TAUXTVA);        
   END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F7';        
         
 CALL PT;        
 $END F7;        
         
 /*-------------------------------------------------------------------*/        
         
 F8: PROC (METHODE) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F8';        
         
 CALL PT;        
 /*********************************************************************/        
 /*     CHERCHER LES COTATIONS D'UN VEHICULE POUR UNE ANNEE DONNEE    */        
 /* METHODE YY_COTATION                                               */        
 /*     YY = VP         Pour NOIDTYP VOITURES                         */        
 /*     YY = UT         Pour NOIDTYP UTILITAIRES                      */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(02);        
         
 DCL  PERIMAT_W         PIC '(6)9';        
         
 DCL  COTAREV_W(12)   DEC FIXED(09);        
 DCL  COTARAC_W(12)   DEC FIXED(09);        
 DCL  KILOMTH_W(12)   DEC FIXED(09);        
         
 DCL  DIFFKIL_W       DEC FIXED(9);        
 DCL  AJUSKIL_W       DEC FIXED(9);        
 DCL  KILOMTH_W1      DEC FIXED(9);        
 DCL  COTAREV_W1      DEC FIXED(9);        
 DCL  COTARAC_W1      DEC FIXED(9);        
         
 DCL  DIF2RAC_W       DEC FIXED(09);        
 DCL  DIF2REV_W       DEC FIXED(09);        
 DCL  RAPMOIS_W       DEC FIXED(03);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => INPUT =');        
     PUT SKIP LIST('CDTYPTB=',KA2151J_COTAT_I.CDTYPTB);        
     PUT SKIP LIST('NOIDTYP=',KA2151J_COTAT_I.NOIDTYP);        
     PUT SKIP LIST('ANNIMAT=',KA2151J_COTAT_I.ANNIMAT);        
     PUT SKIP LIST('MOIIMAT=',KA2151J_COTAT_I.MOIIMAT);        
     PUT SKIP LIST('KILOMRE=',KA2151J_COTAT_I.KILOMRE);        
   END;        
         
 /* CHECKER LES DATA EN INPUT */        
         
 SELECT;        
   WHEN(METHODE = 'VP' & KA2151J_COTAT_I.CDTYPTB = '18');        
   WHEN(METHODE = 'UT' & KA2151J_COTAT_I.CDTYPTB = '28');        
   OTHER DO;        
       JWB001.CDRTPGM = 'KA2151' !! '003';        
       RETURN;        
     END;        
 END;        
 IF KA2151J_COTAT_I.NOIDTYP = 0        
  ! KA2151J_COTAT_I.ANNIMAT = 0        
  ! KA2151J_COTAT_I.MOIIMAT = 0 THEN        
   DO;        
     JWB001.CDRTPGM = 'KA2151' !! '003';        
     RETURN;        
   END;        
         
 KA2151J_COTAT_O = '';        
 PERIMAT_W = ( KA2151J_COTAT_I.ANNIMAT * 100) + 5;        
         
 IEU001.CDDFSEG = 'CA2EUTAX';        
 IF METHODE = 'VP' THEN        
   DO;        
     SSA_A2EUT18.VALUE1 = KA2151J_COTAT_I.NOIDTYP;        
     SSA_A2EUT18.VALUE2 = PERIMAT_W;        
     SSA_A2EUT18.VALUEF = '';        
     JWB001.LSTSERV = 'F8.1';        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT18,SSA_A2EUT18);        
     SELECT(DA215.STATUS);        
       WHEN ('') DO;        
           KA2151J_COTAT_O.ANNEVAL = A2EUT18.ANNEVAL;        
           KA2151J_COTAT_O.MOISVAL = A2EUT18.MOISVAL;        
           COTAREV_W(*) = A2EUT18.COTAREV(*);        
           COTARAC_W(*) = A2EUT18.COTARAC(*);        
           KILOMTH_W(*) = A2EUT18.KILOMTH(*);        
         END;        
       WHEN ('GE') JWB001.CDRTPGM = 'NOTFOUND';        
       OTHER DO;        
         CALL ERR_DL1;        
         RETURN;        
       END;        
     END;        
   END;        
 ELSE        
   DO;        
     SSA_A2EUT28.VALUE1 = KA2151J_COTAT_I.NOIDTYP;        
     SSA_A2EUT28.VALUE2 = PERIMAT_W;        
     SSA_A2EUT28.VALUEF = '';        
     JWB001.LSTSERV = 'F8.2';        
     CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT28,SSA_A2EUT28);        
     SELECT(DA215.STATUS);        
       WHEN ('') DO;        
           KA2151J_COTAT_O.ANNEVAL = A2EUT28.ANNEVAL;        
           KA2151J_COTAT_O.MOISVAL = A2EUT28.MOISVAL;        
           COTAREV_W(*) = A2EUT28.COTAREV(*);        
           COTARAC_W(*) = A2EUT28.COTARAC(*);        
           KILOMTH_W(*) = A2EUT28.KILOMTH(*);        
         END;        
       WHEN ('GE') JWB001.CDRTPGM = 'NOTFOUND';        
       OTHER DO;        
         CALL ERR_DL1;        
         RETURN;        
       END;        
     END;        
   END;        
         
 /* Trouver la derniere cote et faire l'ajustement facultatif */        
         
 IF JWB001.CDRTPGM ^= ''        
   THEN RETURN;  ####################################        
         
 KA2151J_COTAT_O.COTAREV = COTAREV_W(KA2151J_COTAT_O.MOISVAL);        
 KA2151J_COTAT_O.COTARAC = COTARAC_W(KA2151J_COTAT_O.MOISVAL);        
 KA2151J_COTAT_O.KILOMTH = KILOMTH_W(KA2151J_COTAT_O.MOISVAL);        
 IF JWB001.CDTRACE = 9 THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => 1er OUTPUT sans ajustement =');        
     PUT SKIP LIST('ANNEVAL=',KA2151J_COTAT_O.ANNEVAL);        
     PUT SKIP LIST('MOISVAL=',KA2151J_COTAT_O.MOISVAL);        
     PUT SKIP LIST('KILOMTH=',KA2151J_COTAT_O.KILOMTH);        
     PUT SKIP LIST('COTAREV=',KA2151J_COTAT_O.COTAREV);        
     PUT SKIP LIST('COTARAC=',KA2151J_COTAT_O.COTARAC);        
   END;        
         
 /* 1. Ajustement sur kilometrage reel si il est donne en input */        
 IF KA2151J_COTAT_I.KILOMRE > 0 THEN        
   DO;        
     IF KA2151J_COTAT_I.KILOMRE < KA2151J_COTAT_O.KILOMTH THEN        
       DO;        
         DIFFKIL_W = KA2151J_COTAT_O.KILOMTH -        
                     KA2151J_COTAT_I.KILOMRE;        
         AJUSKIL_W = KA2151J_COTAT_O.COTAREV * DIFFKIL_W / 500000.0;        
         KA2151J_COTAT_O.COTAREV = KA2151J_COTAT_O.COTAREV +        
                                  AJUSKIL_W;        
         AJUSKIL_W = KA2151J_COTAT_O.COTARAC * DIFFKIL_W / 500000.0;        
         KA2151J_COTAT_O.COTARAC = KA2151J_COTAT_O.COTARAC +        
                                  AJUSKIL_W;        
       END;        
     IF KA2151J_COTAT_I.KILOMRE > KA2151J_COTAT_O.KILOMTH THEN        
       DO;        
         DIFFKIL_W = KA2151J_COTAT_I.KILOMRE -        
                     KA2151J_COTAT_O.KILOMTH;        
         AJUSKIL_W = KA2151J_COTAT_O.COTAREV * DIFFKIL_W / 400000.0;        
         KA2151J_COTAT_O.COTAREV = KA2151J_COTAT_O.COTAREV -        
                                  AJUSKIL_W;        
         AJUSKIL_W = KA2151J_COTAT_O.COTARAC * DIFFKIL_W / 400000.0;        
         KA2151J_COTAT_O.COTARAC = KA2151J_COTAT_O.COTARAC -        
                                  AJUSKIL_W;        
       END;        
     IF JWB001.CDTRACE = 9 THEN        
       DO;        
         PUT SKIP LIST(JWB001.LTNMMTH,        
             ' => 2eme OUTPUT : ajustement sur Km reels =');        
         PUT SKIP LIST('ANNEVAL=',KA2151J_COTAT_O.ANNEVAL);        
         PUT SKIP LIST('MOISVAL=',KA2151J_COTAT_O.MOISVAL);        
         PUT SKIP LIST('KILOMTH=',KA2151J_COTAT_O.KILOMTH);        
         PUT SKIP LIST('COTAREV=',KA2151J_COTAT_O.COTAREV);        
         PUT SKIP LIST('COTARAC=',KA2151J_COTAT_O.COTARAC);        
       END;        
   END;        
         
 /* 2. Ajustement sur kilometrage reel si il est donne en input */        
 /*    en fonction du mois d'immatriculation si # 05            */        
 IF KA2151J_COTAT_I.KILOMRE > 0        
  & KA2151J_COTAT_I.MOIIMAT ^= 5 THEN        
   DO;        
     /* Lire les cotes en Annee immatric - 1 ou + 1 */        
     IF KA2151J_COTAT_I.MOIIMAT < 5        
       THEN PERIMAT_W = ((KA2151J_COTAT_I.ANNIMAT - 1) * 100) + 5;        
       ELSE PERIMAT_W = ((KA2151J_COTAT_I.ANNIMAT + 1) * 100) + 5;        
         
     COTAREV_W1 = 0;        
     COTARAC_W1 = 0;        
     KILOMTH_W1 = 0;        
         
     IF METHODE = 'VP' THEN        
       DO;        
         IEU001.CDDFSEG = 'CA2EUTAX';        
         JWB001.LSTSERV = 'F8.3';        
         SSA_A2EUT18.VALUE1 = KA2151J_COTAT_I.NOIDTYP;        
         SSA_A2EUT18.VALUE2 = PERIMAT_W;        
         SSA_A2EUT18.VALUEF = '';        
         CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT18,SSA_A2EUT18);        
         
         SELECT(DA215.STATUS);        
           WHEN ('') DO;        
                 COTAREV_W1 = A2EUT18.COTAREV(A2EUT18.MOISVAL);        
                 COTARAC_W1 = A2EUT18.COTARAC(A2EUT18.MOISVAL);        
                 KILOMTH_W1 = A2EUT18.KILOMTH(A2EUT18.MOISVAL);        
               END;        
           WHEN('GE') JWB001.CDRTPGM = 'NOTFOUND';        
           OTHER DO;        
             CALL ERR_DL1;        
             RETURN;        
           END;        
         END;        
       END;        
     ELSE        
       DO;        
         IEU001.CDDFSEG = 'CA2EUTAX';        
         JWB001.LSTSERV = 'F8.4';        
         SSA_A2EUT28.VALUE1 = KA2151J_COTAT_I.NOIDTYP;        
         SSA_A2EUT28.VALUE2 = PERIMAT_W;        
         SSA_A2EUT28.VALUEF = '';        
         CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT28,SSA_A2EUT28);        
         
         SELECT(DA215.STATUS);        
           WHEN ('') DO;        
                 COTAREV_W1 = A2EUT28.COTAREV(A2EUT28.MOISVAL);        
                 COTARAC_W1 = A2EUT28.COTARAC(A2EUT28.MOISVAL);        
                 KILOMTH_W1 = A2EUT28.KILOMTH(A2EUT28.MOISVAL);        
               END;        
           WHEN('GE') JWB001.CDRTPGM = 'NOTFOUND';        
           OTHER DO;        
             CALL ERR_DL1;        
             RETURN;        
           END;        
         END;        
       END;        
     IF JWB001.CDRTPGM = 'NOTFOUND'        
       THEN JWB001.CDRTPGM = '';        
       ELSE        
         DO;        
           IF KA2151J_COTAT_I.KILOMRE < KILOMTH_W1 THEN        
             DO;        
               DIFFKIL_W  = KILOMTH_W1 - KA2151J_COTAT_I.KILOMRE;        
               AJUSKIL_W  = COTARAC_W1 * DIFFKIL_W / 500000.0;        
               COTARAC_W1 = COTARAC_W1 + AJUSKIL_W;        
         
               AJUSKIL_W  = COTAREV_W1 * DIFFKIL_W / 500000.0;        
               COTAREV_W1 = COTAREV_W1 + AJUSKIL_W;        
             END;        
           IF KA2151J_COTAT_I.KILOMRE > KILOMTH_W1 THEN        
             DO;        
               DIFFKIL_W  = KA2151J_COTAT_I.KILOMRE - KILOMTH_W1;        
               AJUSKIL_W  = COTARAC_W1 * DIFFKIL_W / 400000.0;        
               COTARAC_W1 = COTARAC_W1 - AJUSKIL_W;        
         
               AJUSKIL_W  = COTAREV_W1 * DIFFKIL_W / 400000.0;        
               COTAREV_W1 = COTAREV_W1 - AJUSKIL_W;        
             END;        
           /* Calculer l'ajustement en pourcentage de mois en plus        
              ou en moins selon le mois d'immatriculation */        
           IF KA2151J_COTAT_I.MOIIMAT < 5 THEN        
             DO;        
               RAPMOIS_W = 5 - KA2151J_COTAT_I.MOIIMAT;        
               DIF2RAC_W = KA2151J_COTAT_O.COTARAC - COTARAC_W1;        
               DIF2REV_W = KA2151J_COTAT_O.COTAREV - COTAREV_W1;        
               KA2151J_COTAT_O.COTARAC = KA2151J_COTAT_O.COTARAC -        
                  ((DIF2RAC_W / 12.0) * RAPMOIS_W);        
               KA2151J_COTAT_O.COTAREV = KA2151J_COTAT_O.COTAREV -        
                  ((DIF2REV_W / 12.0) * RAPMOIS_W);        
             END;        
           ELSE        
             DO;        
               RAPMOIS_W = KA2151J_COTAT_I.MOIIMAT - 5;        
               DIF2RAC_W = COTARAC_W1 - KA2151J_COTAT_O.COTARAC;        
               DIF2REV_W = COTAREV_W1 - KA2151J_COTAT_O.COTAREV;        
               KA2151J_COTAT_O.COTARAC = KA2151J_COTAT_O.COTARAC +        
                  ((DIF2RAC_W / 12.0) * RAPMOIS_W);        
               KA2151J_COTAT_O.COTAREV = KA2151J_COTAT_O.COTAREV +        
                  ((DIF2REV_W / 12.0) * RAPMOIS_W);        
             END;        
             IF JWB001.CDTRACE = 9 THEN        
               DO;        
                 PUT SKIP LIST(JWB001.LTNMMTH,        
                     ' => 3eme OUTPUT : ajustement sur mois immatric=');        
                 PUT SKIP LIST('ANNEVAL=',KA2151J_COTAT_O.ANNEVAL);        
                 PUT SKIP LIST('MOISVAL=',KA2151J_COTAT_O.MOISVAL);        
                 PUT SKIP LIST('KILOMTH=',KA2151J_COTAT_O.KILOMTH);        
                 PUT SKIP LIST('COTAREV=',KA2151J_COTAT_O.COTAREV);        
                 PUT SKIP LIST('COTARAC=',KA2151J_COTAT_O.COTARAC);        
               END;        
         END;        
   END;        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST(JWB001.LTNMMTH,' => OUTPUT =');        
     PUT SKIP LIST('ANNEVAL=',KA2151J_COTAT_O.ANNEVAL);        
     PUT SKIP LIST('MOISVAL=',KA2151J_COTAT_O.MOISVAL);        
     PUT SKIP LIST('KILOMTH=',KA2151J_COTAT_O.KILOMTH);        
     PUT SKIP LIST('COTAREV=',KA2151J_COTAT_O.COTAREV);        
     PUT SKIP LIST('COTARAC=',KA2151J_COTAT_O.COTARAC);        
   END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F8';        
         
 CALL PT;        
 $END F8;        
 /*-------------------------------------------------------------------*/        
         
 F9: PROC (METHODE) REORDER;        
 TRACE = 'KA2151 ===> ' !! 'F9';        
         
 CALL PT;        
 /*********************************************************************/        
 /*     CHERCHER LES COTATIONS D'UN VEHICULE POUR UNE ANNEE DONNEE    */        
 /* METHODE YY_COTATION                                               */        
 /*     YY = VP         Pour NOIDTYP VOITURES                         */        
 /*     YY = UT         Pour NOIDTYP UTILITAIRES  #003                */        
 /*********************************************************************/        
 DCL  METHODE           CHAR(02);        
 DCL  DATE_IMU          CHAR(07);        
 DCL  DATE_IMU_P        PIC'(07)9'DEF DATE_IMU;        
 DCL  DATE_JOUR         CHAR(07);        
 DCL  DATE_JOUR_P       PIC'(07)9'DEF DATE_JOUR;        
 DCL  ANNEE_VEC         PIC '(04)9';        
 DCL  TAXETMC_F         DEC FIXED(9,2);        
 DCL  TMC_NOUV          DEC FIXED(9);        
 DCL  TMC_NU_W          DEC FIXED(9,2);        
 DCL  TMC_MIN_W         DEC FIXED(9,2);        
 DCL  TMC_COEF_W        DEC FIXED(9,2);        
         
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST('KA2151 F9: => INPUT =');        
     PUT SKIP LIST('ANNEE IMC           =',KA2151J_TMC_I.TMC_ANNEE);        
     PUT SKIP LIST('MOIS  IMC           =',KA2151J_TMC_I.TMC_MOIS);        
     PUT SKIP LIST('N MARQUE           =',KA2151J_TMC_I.NOIDMAR);        
     PUT SKIP LIST('N MODEL            =',KA2151J_TMC_I.NOIDMOD);        
     PUT SKIP LIST('N TYPE             =',KA2151J_TMC_I.NOIDTYP);        
   END;        
 KA2151J_TMC_O = '';        
 SELECT(METHODE);        
   WHEN('VP') DO;        
                  IEU001.CDDFSEG = 'CA2EUT13';        
                  A2EUT13_R = KA2151J_A2EUTAX_I;        
                  SSA_A2EUT13.VALUE1 = KA2151J_TMC_I.NOIDMAR;        
                  SSA_A2EUT13.VALUE2 = KA2151J_TMC_I.NOIDMOD;        
                  SSA_A2EUT13.VALUE3 = KA2151J_TMC_I.NOIDTYP;        
                  SSA_A2EUT13.VALUEF = '';        
                  JWB001.LSTSERV = 'TMC.13';        
                  CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT13,SSA_A2EUT13);        
                  TMC_NOUV = A2EUT13.TAXETMC;        
                  KA2151J_TMC_O.TMC_NOUV = A2EUT13.TAXETMC;        
                  END;        
   WHEN('UT') DO;        
                  IEU001.CDDFSEG = 'CA2EUT23';        
                  A2EUT23_R = KA2151J_A2EUTAX_I;        
                  SSA_A2EUT23.VALUE1 = KA2151J_TMC_I.NOIDMAR;        
                  SSA_A2EUT23.VALUE2 = KA2151J_TMC_I.NOIDMOD;        
                  SSA_A2EUT23.VALUE3 = KA2151J_TMC_I.NOIDTYP;        
                  SSA_A2EUT23.VALUEF = '';        
                  JWB001.LSTSERV = 'TMC.23';        
                  CALL XEU100(IEU001,FOUR,GU,DA215,A2EUT23,SSA_A2EUT23);        
                  TMC_NOUV = A2EUT23.TAXETMC;        
                  KA2151J_TMC_O.TMC_NOUV = A2EUT23.TAXETMC;        
                  END;        
   OTHER DO;        
                      JWB001.CDRTPGM = 'KA2151' !! '003';        
                      RETURN;        
         END;        
 END;        
 TAXETMC_F = TMC_NOUV / 100;        
         
 IF (VERIFY (KA2151J_TMC_I.TMC_ANNEE,NUM) ^= 0) !      ############################        
    (VERIFY (KA2151J_TMC_I.TMC_MOIS,NUM) ^= 0) THEN        
    DO;        
         KA2151J_TMC_I.TMC_ANNEE = '0000';        
         KA2151J_TMC_I.TMC_MOIS  = '00';        
    END;        
         
 IF (KA2151J_TMC_I.TMC_ANNEE = '0000' !        
     KA2151J_TMC_I.TMC_MOIS  = '00')        
         THEN DO; KA2151J_TMC_O.TMC_OCCAS = 0;        
              END;        
 ELSE DO;        
       ANNEE_VEC = 0;        
       DATE_IMU = SUBSTR(KA2151J_TMC_I.TMC_ANNEE,1,1) !!        
                  SUBSTR(KA2151J_TMC_I.TMC_ANNEE,3,2) !!        
                  KA2151J_TMC_I.TMC_MOIS !!  '01';        
       CALL $DATES_TIMES;        
       DATE_JOUR = SUBSTR($DATE_SAAMMJJ,1,5) !! '01';        
         
       KGI011J_RI = '';        
       KGI011J_RI2 = '';        
       KGI011J_RI.CDFMTDA = 'SAAMMJJ_P7';        
       KGI011J_RI.SAAMMJJ_P7 = DATE_JOUR_P;            ####################################        
       KGI011J_RI2.SAAMMJJ_P7 = DATE_IMU_P;            #################################        
       JWB001.LTNMMTH = 'DIFF_2_DATES_366';        
         
       CALL KGI011(IEU001,JWB001,KGI011J);        
       SELECT (JWB001.CDRTPGM);        
         WHEN(' ') ANNEE_VEC = KGI011J_RO.NBAARES;        
         OTHER;        
       END;        
         
       TMC_MIN_W = 61.50;        
       SELECT(ANNEE_VEC);        
         WHEN(0)  TMC_COEF_W = 1.00;        
         WHEN(1)  TMC_COEF_W = 0.90;        
         WHEN(2)  TMC_COEF_W = 0.80;        
         WHEN(3)  TMC_COEF_W = 0.70;        
         WHEN(4)  TMC_COEF_W = 0.60;        
         WHEN(5)  TMC_COEF_W = 0.55;        
         WHEN(6)  TMC_COEF_W = 0.50;        
         WHEN(7)  TMC_COEF_W = 0.45;        
         WHEN(8)  TMC_COEF_W = 0.40;        
         WHEN(9)  TMC_COEF_W = 0.35;        
         WHEN(10) TMC_COEF_W = 0.30;        
         WHEN(11) TMC_COEF_W = 0.25;        
         WHEN(12) TMC_COEF_W = 0.20;        
         WHEN(13) TMC_COEF_W = 0.15;        
         WHEN(14) TMC_COEF_W = 0.10;        
         OTHER    TMC_COEF_W = 0.00;        
      END;        
      TMC_NU_W = MAX((TAXETMC_F * TMC_COEF_W), TMC_MIN_W);        
      KA2151J_TMC_O.TMC_OCCAS = TMC_NU_W * 100;        
 END;        
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST('KA2151 F9: => ZONE TRAVAIL =');        
     PUT SKIP LIST('COEFF               =',TMC_COEF_W);        
     PUT SKIP LIST('AGE VOITURE AU MAINT=',ANNEE_VEC);        
   END;        
 IF JWB001.CDTRACE = 9  THEN        
   DO;        
     PUT SKIP LIST('KA2151 F9: => OUTPUT =');        
     PUT SKIP LIST('NOUVELLE TMC        =',KA2151J_TMC_O.TMC_NOUV);        
     PUT SKIP LIST('OCCASSION TMC       =',KA2151J_TMC_O.TMC_OCCAS);        
   END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END F9';        
         
 CALL PT;        
 $END F9;        
 /*-------------------------------------------------------------------*/        
 INIT_CDETHIAS: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'INIT_CDETHIAS';        
         
 CALL PT;        
 /**********************************************        
 *      DETERMINER CDOMETH                     *        
 **********************************************/        
 CDSPORT_W = A2EUT13.CDSPORT;        
 CDTTERR_W = A2EUT13.CDTTERR;        
 TXTCARO_W = A2EUT13.TXTCARO;        
 TXTCATV_W = A2EUT13.TXTCATV;        
 LTMARQU_Z = '';        
 LTMODEL_W = '';        
 CDOMETH_W = '';        
 CDDMETH_W = '';        
 CDTYOP3_W = '';  ####################        
 CDTYDM3_W = '';  ####################        
         
 /* Lecture marque */        
 IEU001.CDDFSEG = 'CA2EUT11';        
 SSA_A2EUT11.VALUE1 = A2EUT13.NOIDMAR;        
 /* put skip list('ssa_a2eut11.value1=',ssa_a2eut11.value1);*/        
 SSA_A2EUT11.VALUEF = '';        
 JWB001.LSTSERV = 'INIT.1';        
 CALL XEU100(IEU001,FOUR,GU,DA215$,A2EUT11,SSA_A2EUT11);        
 IF DA215$.STATUS = ''        
   /* CONVERTIR LE LIBELLE DE LA MARQUE EN MAJUSCULES (CF. 4X4) */        
   THEN LTMARQU_Z = TRANSLATE(A2EUT11.LTMARQU,MAJUS,MINUS);  ####################        
   ELSE DO;        
          IF JWB001.CDTRACE >= 5  THEN        
             PUT SKIP LIST('Pas de record marque !!!');        
          RETURN;        
        END;        
         
 /* Lecture modele */        
 IEU001.CDDFSEG = 'CA2EUT12';        
 SSA_A2EUT12.VALUE1 = A2EUT13.NOIDMAR;        
 SSA_A2EUT12.VALUE2 = A2EUT13.NOIDMOD;        
 SSA_A2EUT12.VALUEF = '';        
 JWB001.LSTSERV = 'INIT.2';        
 CALL XEU100(IEU001,FOUR,GU,DA215$,A2EUT12,SSA_A2EUT12);        
 IF DA215$.STATUS = ''        
   THEN LTMODEL_W = A2EUT12.LTMODEL;        
   ELSE DO;        
          IF JWB001.CDTRACE >= 5  THEN        
             PUT SKIP LIST('Pas de record modele !!!');        
          RETURN;        
        END;        
 /*        
 PUT SKIP LIST('LTMARQU_Z = ',LTMARQU_Z);        
 PUT SKIP LIST('LTMODEL_W = ',LTMODEL_W);        
 PUT SKIP LIST('CDSPORT_W = ',CDSPORT_W);        
 PUT SKIP LIST('CDTTERR_W = ',CDTTERR_W);        
 PUT SKIP LIST('TXTCARO_W = ',TXTCARO_W);        
 PUT SKIP LIST('TXTCATV_W = ',TXTCATV_W);        
 */        
 CALL TRT_CDOMETH;        
 CALL TRT_CDDMETH;        
 CALL TRT_CDTYOP3; ###################        
 CALL TRT_CDTYDM3; ###################        
 /*        
 PUT SKIP LIST('CDOMETH_W = ',CDOMETH_W);        
 PUT SKIP LIST('CDDMETH_W = ',CDDMETH_W);        
 */        
         
 A2EUT13.CDOMETH = CDOMETH_W;        
 A2EUT13.CDDMETH = CDDMETH_W;        
 A2EUT13.CDTYOP3 = CDTYOP3_W; ###################        
 A2EUT13.CDTYDM3 = CDTYDM3_W; ###################        
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END INIT_CDETHIAS';        
         
 CALL PT;        
 $END INIT_CDETHIAS;        
 /*-------------------------------------------------------------------*/        
         
 TRT_CDOMETH: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'TRT_CDOMETH';        
         
 CALL PT;        
 /**********************************************        
 *      DETERMINER CDOMETH                     *        
 **********************************************/        
         
 CDOMETH_W = '3';        
         
 IF CDSPORT_W = '1'        ##################################        
  ! TXTCARO_W = '00010004' ###########################        
  ! TXTCARO_W = '00010005' ###########################        
  ! TXTCARO_W = '00010013' ###########################        
  ! TXTCARO_W = '00010014' ###########################        
  ! TXTCATV_W = '00040007' ###########################        
  ! TXTCATV_W = '00040008' ###########################        
  ! CDTTERR_W = '1'        ##################################        
   THEN DO;        
          CDOMETH_W = '6';        
          RETURN;        
        END;        
         
 DCL 1 LT_MARQ1,        
       2 LT01 CHAR(40) INIT('CHRYSLER'),        
       2 LT02 CHAR(40) INIT('CITROEN'),        
       2 LT03 CHAR(40) INIT('MAZDA'),        
       2 LT04 CHAR(40) INIT('NISSAN'),        
       2 LT05 CHAR(40) INIT('SAAB'),        
       2 LT06 CHAR(40) INIT('SKODA'),        
       2 LT07 CHAR(40) INIT('TOYOTA'),        
       2 LT08 CHAR(40) INIT('VOLVO');        
 DCL 1 TAB_MARQ1(08) CHAR(40) BASED(ADDR(LT_MARQ1));        
         
 DCL 1 LT_MARQ2,        
       2 LT01 CHAR(40) INIT('DAEWOO'),        
       2 LT02 CHAR(40) INIT('DAIHATSU'),        
       2 LT03 CHAR(40) INIT('HONDA'),        
       2 LT04 CHAR(40) INIT('HYUNDAI'),        
       2 LT05 CHAR(40) INIT('KIA'),        
       2 LT06 CHAR(40) INIT('LADA'),        
       2 LT07 CHAR(40) INIT('MITSUBISHI'),        
       2 LT08 CHAR(40) INIT('OPEL'),        
       2 LT09 CHAR(40) INIT('PEUGEOT'),        
       2 LT10 CHAR(40) INIT('ROVER'),        
       2 LT11 CHAR(40) INIT('SEAT'),        
       2 LT12 CHAR(40) INIT('SUBARU');        
 DCL 1 TAB_MARQ2(12) CHAR(40) BASED(ADDR(LT_MARQ2));        
         
 DCL 1 LT_MARQ3,        
       2 LT01 CHAR(40) INIT('AUDI'),        
       2 LT02 CHAR(40) INIT('FORD'),        
       2 LT03 CHAR(40) INIT('LANCIA'),        
       2 LT04 CHAR(40) INIT('RENAULT');        
 DCL 1 TAB_MARQ3(04) CHAR(40) BASED(ADDR(LT_MARQ3));        
         
 DCL 1 LT_MARQ4,        
       2 LT01 CHAR(40) INIT('ALFA ROMEO'),        
       2 LT02 CHAR(40) INIT('FIAT'),        
       2 LT03 CHAR(40) INIT('SUZUKI'),        
       2 LT04 CHAR(40) INIT('VOLKSWAGEN');        
 DCL 1 TAB_MARQ4(04) CHAR(40) BASED(ADDR(LT_MARQ4));        
         
 DCL 1 LT_MARQ5,        
       2 LT01 CHAR(40) INIT('MERCEDES');        
 DCL 1 TAB_MARQ5     CHAR(40) BASED(ADDR(LT_MARQ5));        
         
 DCL 1 LT_MARQ6,        
       2 LT01 CHAR(40) INIT('BMW'),        
       2 LT02 CHAR(40) INIT('FERRARI'),        
       2 LT03 CHAR(40) INIT('PORSCHE'),        
       2 LT04 CHAR(40) INIT('JEEP'),        
       2 LT05 CHAR(40) INIT('LAND-ROVER');        
 DCL 1 TAB_MARQ6(05) CHAR(40) BASED(ADDR(LT_MARQ6));        
         
 /* VOIR SI VW GOLF ? */        
 X = INDEX(LTMARQU_Z,'VOLKSWAGEN');        
 IF X > 0 THEN        
    DO;        
      X = INDEX(LTMODEL_W,'GOLF');        
      IF X > 0 THEN        
         DO;        
           CDOMETH_W = '5';        
           RETURN;        
         END;        
    END;        
 /* VOIR SI RENAULT TWINGO ? */        
 X = INDEX(LTMARQU_Z,'RENAULT');        
 IF X > 0 THEN        
    DO;        
      X = INDEX(LTMODEL_W,'TWINGO');        
      IF X > 0 THEN        
         DO;        
           CDOMETH_W = '5';        
           RETURN;        
         END;        
    END;        
 /* VOIR SI SEAT IBIZA ? */        
 X = INDEX(LTMARQU_Z,'SEAT');        
 IF X > 0 THEN        
    DO;        
      X = INDEX(LTMODEL_W,'IBIZA');        
      IF X > 0 THEN        
         DO;        
           CDOMETH_W = '3';        
           RETURN;        
         END;        
    END;        
 /* VOIR SI CITROEN SAXO ? */        
 X = INDEX(LTMARQU_Z,'CITROEN');        
 IF X > 0 THEN        
    DO;        
      X = INDEX(LTMODEL_W,'SAXO');        
      IF X > 0 THEN        
         DO;        
           CDOMETH_W = '3';        
           RETURN;        
         END;        
    END;        
 /* Voir en fonction de la marque */        
 /* ----------------------------- */        
 /* Correction cki : probleme avec les (4x4)        
    Verifier que 'AUDI' se trouve dans 'AUDI (4x4)' et non plus        
    l'inverse car cela ne marche pas si verif 'AUDI (4x4)' dans 'AUDI'        
 */        
 TROUVE = OFF;        
         
 DO I = 1 TO 08 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ1(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDOMETH_W = '1';        
      RETURN;        
    END;        
         
 DO I = 1 TO 12 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ2(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDOMETH_W = '2';        
      RETURN;        
    END;        
         
 DO I = 1 TO 4 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ3(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDOMETH_W = '3';        
      RETURN;        
    END;        
         
 DO I = 1 TO 4 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ4(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDOMETH_W = '4';        
      RETURN;        
    END;        
         
 LTMARQU_W = TRIM(TAB_MARQ5);        
 X = INDEX(LTMARQU_Z,LTMARQU_W);        
 IF X > 0 THEN        
   DO;        
     CDOMETH_W = '5';        
     RETURN;        
   END;        
         
 DO I = 1 TO 5 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ6(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDOMETH_W = '6';        
      RETURN;        
    END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END TRT_CDOMETH';        
         
 CALL PT;        
 $END TRT_CDOMETH;        
 /*-------------------------------------------------------------------*/        
         
 TRT_CDDMETH: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'TRT_CDDMETH';        
         
 CALL PT;        
 /**********************************************        
 *      DETERMINER CDDMETH                     *        
 **********************************************/        
         
 CDDMETH_W = '2';        
         
 IF CDSPORT_W = '1'        ##################################        
  ! TXTCARO_W = '00010004' ###########################        
  ! TXTCARO_W = '00010005' ###########################        
  ! TXTCARO_W = '00010013' ###########################        
  ! TXTCARO_W = '00010014' ###########################        
  ! TXTCATV_W = '00040007' ###########################        
  ! TXTCATV_W = '00040008' ###########################        
   THEN DO;        
          CDDMETH_W = '3';        
          RETURN;        
        END;        
         
 DCL 1 LT_MARQ1,        
       2 LT01 CHAR(40) INIT('AUDI'),        
       2 LT02 CHAR(40) INIT('BMW'),        
       2 LT03 CHAR(40) INIT('MERCEDES'),        
       2 LT04 CHAR(40) INIT('SAAB'),        
       2 LT05 CHAR(40) INIT('VOLVO'),        
       2 LT06 CHAR(40) INIT('JEEP'),        
       2 LT07 CHAR(40) INIT('LAND-ROVER');        
 DCL 1 TAB_MARQ1(07) CHAR(40) BASED(ADDR(LT_MARQ1));        
         
 DCL 1 LT_MARQ2,        
       2 LT01 CHAR(40) INIT('CHRYSLER'),        
       2 LT02 CHAR(40) INIT('CITROEN'),        
       2 LT03 CHAR(40) INIT('DAEWOO'),        
       2 LT04 CHAR(40) INIT('DAIHATSU'),        
       2 LT05 CHAR(40) INIT('FORD'),        
       2 LT06 CHAR(40) INIT('LADA'),        
       2 LT07 CHAR(40) INIT('MITSUBISHI'),        
       2 LT08 CHAR(40) INIT('NISSAN'),        
       2 LT09 CHAR(40) INIT('OPEL'),        
       2 LT10 CHAR(40) INIT('PEUGEOT'),        
       2 LT11 CHAR(40) INIT('RENAULT'),        
       2 LT12 CHAR(40) INIT('ROVER'),        
       2 LT13 CHAR(40) INIT('SKODA'),        
       2 LT14 CHAR(40) INIT('SUBARU'),        
       2 LT15 CHAR(40) INIT('TOYOTA'),        
       2 LT16 CHAR(40) INIT('VOLKSWAGEN');        
 DCL 1 TAB_MARQ2(16) CHAR(40) BASED(ADDR(LT_MARQ2));        
         
 DCL 1 LT_MARQ3,        
       2 LT01 CHAR(40) INIT('ALFA ROMEO'),        
       2 LT02 CHAR(40) INIT('FIAT'),        
       2 LT03 CHAR(40) INIT('HONDA'),        
       2 LT04 CHAR(40) INIT('HYUNDAI'),        
       2 LT05 CHAR(40) INIT('KIA'),        
       2 LT06 CHAR(40) INIT('LANCIA'),        
       2 LT07 CHAR(40) INIT('MAZDA'),        
       2 LT08 CHAR(40) INIT('SEAT'),        
       2 LT09 CHAR(40) INIT('SUZUKI');        
 DCL 1 TAB_MARQ3(09) CHAR(40) BASED(ADDR(LT_MARQ3));        
         
 /* Voir en fonction de la marque */        
 /* ----------------------------- */        
 /* Correction cki : probleme avec les (4x4)        
    Verifier que 'AUDI' se trouve dans 'AUDI (4x4)' et non plus        
    l'inverse car cela ne marche pas si verif 'AUDI (4x4)' dans 'AUDI'        
 */        
 TROUVE = OFF;        
         
 DO I = 1 TO 07 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ1(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDDMETH_W = '1';        
      RETURN;        
    END;        
         
 DO I = 1 TO 16 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ2(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDDMETH_W = '2';        
      RETURN;        
    END;        
         
 DO I = 1 TO 9 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ3(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDDMETH_W = '3';        
      RETURN;        
    END;        
         
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END TRT_CDDMETH';        
         
 CALL PT;        
 $END TRT_CDDMETH;        
 /*-------------------------------------------------------------------*/        
         
         
  /* -------------------- #007 --------------------------- */        
 TRT_CDTYOP3: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'TRT_CDTYOP3';        
         
 CALL PT;        
 /**********************************************        
 *      DETERMINER CDTYOP3                     *        
 **********************************************/        
         
 CDTYOP3_W = '3';        
         
 DCL 1 LT_MARQ1,        
       2 LT01 CHAR(40) INIT('CHRYSLER'),        
       2 LT02 CHAR(40) INIT('CITROEN'),        
       2 LT03 CHAR(40) INIT('JAGUAR' ),        
       2 LT04 CHAR(40) INIT('JEEP'   ),        
       2 LT05 CHAR(40) INIT('LAND ROVER'),        
       2 LT06 CHAR(40) INIT('LEXUS'  ),        
       2 LT07 CHAR(40) INIT('MAZDA'  ),        
       2 LT08 CHAR(40) INIT('PORSCHE'),        
       2 LT09 CHAR(40) INIT('SAAB'   ),        
       2 LT10 CHAR(40) INIT('VOLVO'  );        
 DCL 1 TAB_MARQ1(10) CHAR(40) BASED(ADDR(LT_MARQ1));        
         
 DCL 1 LT_MARQ2,        
       2 LT01 CHAR(40) INIT('HONDA' ),        
       2 LT12 CHAR(40) INIT('TOYOTA');        
 DCL 1 TAB_MARQ2(02) CHAR(40) BASED(ADDR(LT_MARQ2));        
         
 DCL 1 LT_MARQ3,        
       2 LT01 CHAR(40) INIT('ALFA'),        
       2 LT02 CHAR(40) INIT('AUDI'),        
       2 LT03 CHAR(40) INIT('MERCEDES'),        
       2 LT04 CHAR(40) INIT('NISSAN');        
 DCL 1 TAB_MARQ3(04) CHAR(40) BASED(ADDR(LT_MARQ3));        
         
 DCL 1 LT_MARQ4,        
       2 LT01 CHAR(40) INIT('HYUNDAI'),        
       2 LT02 CHAR(40) INIT('KIA'),        
       2 LT03 CHAR(40) INIT('LANCIA'),        
       2 LT04 CHAR(40) INIT('SKODA');        
 DCL 1 TAB_MARQ4(04) CHAR(40) BASED(ADDR(LT_MARQ4));        
         
 DCL 1 LT_MARQ5,        
       2 LT01 CHAR(40) INIT('BMW'     ),        
       2 LT02 CHAR(40) INIT('DAEWOO'  ),        
       2 LT03 CHAR(40) INIT('DAIHATSU'),        
       2 LT04 CHAR(40) INIT('FIAT'    ),        
       2 LT05 CHAR(40) INIT('FORD'    ),        
       2 LT06 CHAR(40) INIT('OPEL'    ),        
       2 LT07 CHAR(40) INIT('PEUGEOT' ),        
       2 LT08 CHAR(40) INIT('RENAULT' ),        
       2 LT09 CHAR(40) INIT('SEAT'    );        
 DCL 1 TAB_MARQ5(09) CHAR(40) BASED(ADDR(LT_MARQ5));        
         
 DCL 1 LT_MARQ6,        
       2 LT01 CHAR(40) INIT('MITSUBISHI'),        
       2 LT02 CHAR(40) INIT('SUZUKI'),        
       2 LT03 CHAR(40) INIT('VOLKSWAGEN');        
 DCL 1 TAB_MARQ6(03) CHAR(40) BASED(ADDR(LT_MARQ6));        
         
 /* VOIR SI RENAULT TWINGO ? */        
 X = INDEX(LTMARQU_Z,'RENAULT');        
 IF X > 0 THEN        
    DO;        
      X = INDEX(LTMODEL_W,'TWINGO');        
      IF X > 0 THEN        
         DO;        
           CDTYOP3_W = '6';        
           RETURN;        
         END;        
    END;        
 /* VOIR SI SEAT IBIZA ? */        
 X = INDEX(LTMARQU_Z,'SEAT');        
 IF X > 0 THEN        
    DO;        
      X = INDEX(LTMODEL_W,'IBIZA');        
      IF X > 0 THEN        
         DO;        
           CDTYOP3_W = '6';        
           RETURN;        
         END;        
    END;        
 /* Voir en fonction de la marque */        
 /* ----------------------------- */        
         
 TROUVE = OFF;        
         
 DO I = 1 TO 10 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ1(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYOP3_W = '1';        
      RETURN;        
    END;        
         
 DO I = 1 TO 02 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ2(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYOP3_W = '2';        
      RETURN;        
    END;        
         
 DO I = 1 TO 4 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ3(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYOP3_W = '3';        
      RETURN;        
    END;        
         
 DO I = 1 TO 4 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ4(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYOP3_W = '4';        
      RETURN;        
    END;        
         
 DO I = 1 TO 9 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ5(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYOP3_W = '5';        
      RETURN;        
    END;        
         
         
 DO I = 1 TO 3 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ6(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYOP3_W = '6';        
      RETURN;        
    END;        
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END TRT_CDTYOP3';        
         
 CALL PT;        
 $END TRT_CDTYOP3;        
 /*-------------------------------------------------------------------*/        
         
 TRT_CDTYDM3: PROC REORDER;        
 TRACE = 'KA2151 ===> ' !! 'TRT_CDTYDM3';        
         
 CALL PT;        
 /**********************************************        
 *      DETERMINER CDTYDM3                     *        
 **********************************************/        
         
 CDTYDM3_W = '4';        
         
         
 DCL 1 LT_MARQ1,        
       2 LT01 CHAR(40) INIT('MERCEDES'),        
       2 LT02 CHAR(40) INIT('SAAB'),        
       2 LT03 CHAR(40) INIT('VOLVO');        
 DCL 1 TAB_MARQ1(03) CHAR(40) BASED(ADDR(LT_MARQ1));        
         
 DCL 1 LT_MARQ2,        
       2 LT01 CHAR(40) INIT('ASIA'      ),        
       2 LT02 CHAR(40) INIT('ASTON'     ),        
       2 LT03 CHAR(40) INIT('AUDI'),        
       2 LT04 CHAR(40) INIT('AUSTIN'    ),        
       2 LT05 CHAR(40) INIT('BMW'),        
       2 LT06 CHAR(40) INIT('BUICK'     ),        
       2 LT07 CHAR(40) INIT('CADILLAC'  ),        
       2 LT08 CHAR(40) INIT('FERRARI'   ),        
       2 LT09 CHAR(40) INIT('JAGUAR'    ),        
       2 LT10 CHAR(40) INIT('JEEP'),        
       2 LT11 CHAR(40) INIT('LAND ROVER'),        
       2 LT12 CHAR(40) INIT('LEXUS'     ),        
       2 LT13 CHAR(40) INIT('LOTUS'     ),        
       2 LT14 CHAR(40) INIT('MASERATI'  ),        
       2 LT15 CHAR(40) INIT('MERCURY'   ),        
       2 LT16 CHAR(40) INIT('MG'        ),        
       2 LT17 CHAR(40) INIT('PONTIAC'    ),        
       2 LT18 CHAR(40) INIT('PORSCHE'   ),        
       2 LT19 CHAR(40) INIT('PROTON'    ),        
       2 LT20 CHAR(40) INIT('TVR'       );        
 DCL 1 TAB_MARQ2(20) CHAR(40) BASED(ADDR(LT_MARQ2));        
         
 DCL 1 LT_MARQ3,        
       2 LT01 CHAR(40) INIT('CHRYSLER'  ),        
       2 LT02 CHAR(40) INIT('CITROEN'   ),        
       2 LT03 CHAR(40) INIT('FORD'      ),        
       2 LT04 CHAR(40) INIT('MITSUBISHI'),        
       2 LT05 CHAR(40) INIT('NISSAN'    ),        
       2 LT06 CHAR(40) INIT('OPEL'      ),        
       2 LT07 CHAR(40) INIT('PEUGEOT'   ),        
       2 LT08 CHAR(40) INIT('RENAULT'   ),        
       2 LT09 CHAR(40) INIT('ROVER'     ),        
       2 LT10 CHAR(40) INIT('SKODA'     ),        
       2 LT11 CHAR(40) INIT('SUBARU'    ),        
       2 LT12 CHAR(40) INIT('TOYOTA'    ),        
       2 LT13 CHAR(40) INIT('VOLKSWAGEN');        
 DCL 1 TAB_MARQ3(13) CHAR(40) BASED(ADDR(LT_MARQ3));        
         
 DCL 1 LT_MARQ4,        
       2 LT01 CHAR(40) INIT('CHEVROLET'),        
       2 LT02 CHAR(40) INIT('HONDA'),        
       2 LT03 CHAR(40) INIT('KIA');        
 DCL 1 TAB_MARQ4(03) CHAR(40) BASED(ADDR(LT_MARQ4));        
         
 DCL 1 LT_MARQ5,        
       2 LT01 CHAR(40) INIT('ALFA'     ),        
       2 LT02 CHAR(40) INIT('DAEWOO'   ),        
       2 LT03 CHAR(40) INIT('DAIHATSU' ),        
       2 LT04 CHAR(40) INIT('FIAT'     ),        
       2 LT05 CHAR(40) INIT('HYUNDAI'  ),        
       2 LT06 CHAR(40) INIT('LADA'     ),        
       2 LT07 CHAR(40) INIT('LANCIA'   ),        
       2 LT08 CHAR(40) INIT('MAZDA'    ),        
       2 LT09 CHAR(40) INIT('SEAT'     ),        
       2 LT10 CHAR(40) INIT('SUZUKI'   );        
 DCL 1 TAB_MARQ5(10) CHAR(40) BASED(ADDR(LT_MARQ5));        
         
 IF CDSPORT_W = '1'        ##################################        
   THEN DO;        
          CDTYDM3_W = '3';        
          RETURN;        
        END;        
 /*        
 IF TXTCLAS_W = '00030007' -* luxe         *-        
   THEN DO;        
          CDTYDM3_W = '2';        
          RETURN;        
        END;        
 */        
         
 IF TXTCARO_W = '00010004' ###########################        
  ! TXTCARO_W = '00010005' ###########################        
  ! TXTCARO_W = '00010013' ###########################        
  ! TXTCARO_W = '00010014' ###########################        
  ! TXTCATV_W = '00040007' ###########################        
  ! TXTCATV_W = '00040008' ###########################        
   THEN DO;        
          CDTYDM3_W = '5';        
          RETURN;        
        END;        
         
 /* Voir en fonction de la marque */        
 /* ----------------------------- */        
 TROUVE = OFF;        
         
 DO I = 1 TO 03 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ1(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYDM3_W = '1';        
      RETURN;        
    END;        
         
 DO I = 1 TO 20 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ2(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYDM3_W = '2';        
      RETURN;        
    END;        
         
 DO I = 1 TO 13 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ3(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYDM3_W = '3';        
      RETURN;        
    END;        
         
 DO I = 1 TO  3 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ4(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYDM3_W = '4';        
      RETURN;        
    END;        
         
 DO I = 1 TO 10 WHILE(^TROUVE);        
    LTMARQU_W = TRIM(TAB_MARQ5(I));        
    X = INDEX(LTMARQU_Z,LTMARQU_W);        
    IF X > 0 THEN TROUVE = ON;        
 END;        
 IF TROUVE = ON THEN        
    DO;        
      CDTYDM3_W = '5';        
      RETURN;        
    END;        
         
         
 /*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/        
 TRACE = 'KA2151 ===> ' !! 'END TRT_CDTYDM3';        
         
 CALL PT;        
 $END TRT_CDTYDM3;        
  /* -------------------- #007 --------------------------- */        
 /*-------------------------------------------------------------------*/        
         
 $$END KA2151;        
